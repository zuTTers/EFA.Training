{"version":3,"sources":["./node_modules/@swimlane/ngx-datatable/fesm2015/swimlane-ngx-datatable.js"],"names":[],"mappings":"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,CAAC;AACD,uEAAuE;AACvE,yDAAyD;AACzD,IAAI,wDAAiB,sFAAsF,oEAA6B;AACxI,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACD,8EAA8E;AAC9E,IAAI,uDAAgB;AACpB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,sDAAe,CAAC,qDAAQ,GAAG;AAC1H,sCAAsC,gEAAyB,EAAE,gDAAgD,gCAAgC,EAAE,EAAE;AACrJ;AACA,KAAK,gCAAgC,OAAO,iDAAM,SAAS,qDAAQ,IAAI;AACvE;AACA,kBAAkB,iDAAU,GAAG,8CAAO,IAAI,qDAAM,CAAC,qDAAQ;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,uCAAuC,gEAAyB,EAAE,iDAAiD,iCAAiC,EAAE,EAAE;;AAExJ;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yCAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,0CAA0C;AAChH,2CAA2C,gEAAyB,EAAE,qDAAqD,qCAAqC,EAAE,EAAE;;AAEpK;AACA;AACA;AACA;AACA;AACA,8FAA8F,oDAAoD,+DAAwB,CAAC,sDAAkB,GAAG;AAChM,sDAAsD,+DAAwB,EAAE,iGAAiG;AACjL;AACA,KAAK,OAAO,sDAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,iDAAa,GAAG;AACjM,yCAAyC,+DAAwB,EAAE,wJAAwJ;AAC3N,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,YAAY,qBAAqB,EAAE;AAC1C;AACA,KAAK,OAAO,qDAAU,EAAE;AACxB,KAAK,OAAO,iDAAM;AAClB;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uDAAY;AACzC,4BAA4B,uDAAY;AACxC,2BAA2B,uDAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,4BAA4B,+CAAS;AACrC;AACA,iCAAiC,+CAAS;AAC1C,sBAAsB,yDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,CAAC,qDAAiB,GAAG;AACrJ,wCAAwC,+DAAwB,EAAE,wEAAwE,6FAA6F,YAAY,mEAAmE,aAAa,kEAA2B,GAAG;AACjW;AACA,KAAK,OAAO,qDAAU;AACtB;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAS;AACrC;AACA,iCAAiC,+CAAS;AAC1C,sBAAsB,yDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,oDAAgB,GAAG;AACpM,yCAAyC,+DAAwB,EAAE,gJAAgJ;AACnN,QAAQ,wDAAiB,iFAAiF,gCAAgC,EAAE;AAC5I,KAAK;AACL,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,6EAA6E,YAAY,mBAAmB,EAAE;AAChI;AACA,KAAK,OAAO,qDAAU,EAAE;AACxB,KAAK,OAAO,oDAAS;AACrB;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,2DAAY;AAChB;;AAEA;AACA;AACA;AACA,2BAA2B,uDAAY;AACvC,iCAAiC,uDAAY;AAC7C,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC,8BAA8B;AAC9D,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,CAAC,0DAAsB,GAAG,+DAAwB,CAAC,qDAAQ,GAAG;AAC9L,wCAAwC,+DAAwB,EAAE,8IAA8I;AAChN,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,YAAY,qDAAqD,EAAE;AAC1E;AACA,KAAK,OAAO,0DAAe,EAAE;AAC7B,KAAK,gCAAgC,OAAO,iDAAM,SAAS,qDAAQ,IAAI;AACvE;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,8DAAe,sBAAsB,oBAAoB;AAC7D;AACA,qBAAqB,iDAAU,GAAG,8CAAO,IAAI,qDAAM,CAAC,qDAAQ;AAC5D;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,uDAAY;AAC9C,gCAAgC,uDAAY;AAC5C,gCAAgC,uDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kCAAkC,+CAAS;AAC3C,sBAAsB,yDAAS;AAC/B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,wCAAwC;AAC1G,wCAAwC,+DAAwB,EAAE,8IAA8I;AAChN,QAAQ,wDAAiB,gFAAgF,gCAAgC,EAAE;AAC3I,KAAK;AACL,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,+EAA+E,YAAY,+FAA+F,EAAE;AAC9M,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,2DAAY;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,+DAAwB,CAAC,iDAAa,GAAG,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,oDAAgB,GAAG;AACvO,uCAAuC,+DAAwB,EAAE,gLAAgL;AACjP,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,+GAA+G,YAAY,mBAAmB,sGAAsG;AACtQ,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,wCAAwC;AAC/C;AACA,KAAK,OAAO,iDAAM,EAAE;AACpB,KAAK,OAAO,qDAAU,EAAE;AACxB,KAAK,OAAO,oDAAS;AACrB;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,0DAAW;AACf,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,0DAAW;AACf,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,wGAAwG,yDAAyD,+DAAwB,CAAC,sDAAkB,GAAG;AAC/M,2DAA2D,+DAAwB,EAAE,4GAA4G;AACjM;AACA,KAAK,OAAO,sDAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wFAAwF,mDAAmD;AAC3I,mDAAmD,+DAAwB,EAAE,6KAA6K;AAC1P,QAAQ,4DAAqB,qDAAqD,sDAAW;AAC7F,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,yEAAyE,YAAY,mBAAmB,EAAE;AAC5H,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,2DAAY,yCAAyC,OAAO,sDAAW,gBAAgB;AAC3F;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,MAAM;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;AAEvC;AACA;AACA;AACA;AACA,CAAC,4BAA4B;;AAE7B;AACA;AACA;AACA;AACA,CAAC,0CAA0C;;AAE3C;AACA;AACA;AACA;AACA;AACA,0FAA0F,kDAAkD,+DAAwB,CAAC,sDAAkB,GAAG;AAC1L,oDAAoD,+DAAwB,EAAE,+FAA+F;AAC7K;AACA,KAAK,OAAO,sDAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA,sFAAsF,gDAAgD,+DAAwB,CAAC,sDAAkB,GAAG;AACpL,kDAAkD,+DAAwB,EAAE,2FAA2F;AACvK;AACA,KAAK,OAAO,sDAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA,wFAAwF,iDAAiD,+DAAwB,CAAC,sDAAkB,GAAG;AACvL,mDAAmD,+DAAwB,EAAE,0FAA0F;AACvK;AACA,KAAK,OAAO,sDAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,4CAA4C,+DAAwB,wBAAwB;AAC1K,8CAA8C,+DAAwB,EAAE,6JAA6J;AACrO,QAAQ,4DAAqB,4CAA4C,sDAAW;AACpF,QAAQ,4DAAqB,8CAA8C,sDAAW;AACtF,QAAQ,4DAAqB,6CAA6C,sDAAW;AACrF,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,+vBAA+vB,aAAa,kEAA2B,GAAG;AAC5zB;AACA,KAAK;AACL;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,2DAAY,gCAAgC,OAAO,sDAAW,gBAAgB;AAClF;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,2DAAY,kCAAkC,OAAO,sDAAW,gBAAgB;AACpF;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,2DAAY,iCAAiC,OAAO,sDAAW,gBAAgB;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA,oGAAoG,uDAAuD,+DAAwB,CAAC,sDAAkB,GAAG;AACzM,yDAAyD,+DAAwB,EAAE,wGAAwG;AAC3L;AACA,KAAK,OAAO,sDAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oFAAoF,iDAAiD;AACrI,iDAAiD,+DAAwB,EAAE,uKAAuK;AAClP,QAAQ,4DAAqB,mDAAmD,sDAAW;AAC3F,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,yEAAyE,YAAY,mBAAmB,EAAE;AAC5H,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,2DAAY,uCAAuC,OAAO,sDAAW,gBAAgB;AACzF;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,8EAA8E,8CAA8C;AAC5H,8CAA8C,+DAAwB,EAAE,6JAA6J;AACrO,QAAQ,4DAAqB,gDAAgD,sDAAW;AACxF,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,+SAA+S,EAAE;AACnU,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,2DAAY,oCAAoC,OAAO,sDAAW,EAAE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAA2C;AAClE,uBAAuB,+CAA+C;AACtE,uBAAuB,6CAA6C;AACpE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yFAAyF;AACxG;AACA;AACA;AACA;AACA,2CAA2C,UAAU;AACrD;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,WAAW,cAAc,YAAY;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE,MAAM,EAAE;AACzD;AACA;AACA;AACA,wDAAwD,EAAE,MAAM,EAAE;AAClE;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC,wBAAwB,uDAAY;AACpC,4BAA4B,uDAAY;AACxC,0BAA0B,uDAAY;AACtC,gCAAgC,uDAAY;AAC5C,kCAAkC,uDAAY;AAC9C,8BAA8B,ucAAc;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gEAAgE,cAAc;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,SAAS,GAAG,EAAE;AACtD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,8CAA8C;AAC9C,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC;AACA;AACA,0EAA0E,0CAA0C,+DAAwB,CAAC,4DAAwB,GAAG;AACxK,4CAA4C,+DAAwB,EAAE,2HAA2H;AACjM,QAAQ,yDAAkB;AAC1B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,sHAAsH;AAC7H,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,qzBAAqzB,YAAY,mKAAmK,k1DAAk1D;AACx0F,QAAQ,wDAAiB;AACzB,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,mGAAmG,gCAAgC,EAAE,wGAAwG,kCAAkC,EAAE;AAC1S,QAAQ,wDAAiB;AACzB,QAAQ,wDAAiB;AACzB,QAAQ,0DAAmB;AAC3B,KAAK;AACL,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,KAAK,EAAE,2BAA2B,SAAS,iDAAW,wEAAwE,oDAAc,8DAA8D,oDAAc,6BAA6B,EAAE,wCAAwC;AAC/R;AACA,KAAK,OAAO,4DAAiB;AAC7B;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,oDAAK;AACT,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,wDAAS;AACb;;AAEA;AACA;AACA;AACA,wBAAwB,uDAAY;AACpC,2BAA2B,uDAAY;AACvC,0BAA0B,uDAAY;AACtC,0BAA0B,uDAAY;AACtC,qCAAqC,uDAAY;AACjD;AACA;AACA;AACA;AACA,oBAAoB;AACpB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB,oCAAoC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8BAA8B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,4CAA4C,+DAAwB,CAAC,4DAAwB,GAAG;AAC9K,8CAA8C,+DAAwB,EAAE,4LAA4L;AACpQ,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,maAAma,YAAY,+GAA+G,knCAAknC;AAClqD,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,uFAAuF,sCAAsC,EAAE,oGAAoG,oCAAoC,EAAE;AAClS,QAAQ,wDAAiB;AACzB,QAAQ,0DAAmB;AAC3B,KAAK;AACL,QAAQ,yDAAkB;AAC1B,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,KAAK,EAAE,2BAA2B,6BAA6B,oDAAc,EAAE,oDAAc,6FAA6F,EAAE,wCAAwC;AACpO;AACA,KAAK,OAAO,4DAAiB;AAC7B;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,0DAAW;AACf,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA,4BAA4B,uDAAY;AACxC;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA,wBAAwB,uDAAY;AACpC;AACA;AACA;AACA,wBAAwB,uDAAY;AACpC;AACA;AACA;AACA,2BAA2B,uDAAY;AACvC;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA;AACA;AACA,oCAAoC,uDAAY;AAChD;AACA;AACA;AACA,8BAA8B,uDAAY;AAC1C;AACA,4BAA4B,iDAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxiBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC,oCAAoC,uDAAuD;AAC3F;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC,oCAAoC,kDAAkD;AACtF;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qBAAqB,8BAA8B;AACnD;AACA,mCAAmC;AACnC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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DAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,0DAAW;AACf;AACA,iDAAU;AACV,IAAI,8DAAe;AACnB;AACA,iDAAU;AACV,IAAI,2DAAY;AAChB;AACA,iDAAU;AACV,IAAI,2DAAY;AAChB;AACA,iDAAU;AACV,IAAI,2DAAY;AAChB;AACA,iDAAU;AACV,IAAI,wDAAS;AACb;AACA,iDAAU;AACV,IAAI,wDAAS;AACb;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,2DAAY;AAChB;AACA;AACA,qBAAqB,iDAAU,GAAG,8CAAO,IAAI,uDAAQ;AACrD,IAAI,8CAAO,IAAI,uDAAQ;AACvB,IAAI,8CAAO,IAAI,uDAAQ,KAAK,8CAAO,IAAI,qDAAM;AAC7C;;AAEA;AACA;AACA;AACA,wBAAwB,uDAAY;AACpC,0BAA0B,uDAAY;AACtC,qCAAqC,uDAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,6CAA6C,+DAAwB,CAAC,0DAAsB,GAAG,+DAAwB,sBAAsB,+DAAwB,CAAC,4DAAwB,GAAG,+DAAwB,CAAC,qDAAiB,GAAG;AAC9T,+CAA+C,+DAAwB,EAAE,4JAA4J;AACrO,QAAQ,wDAAiB,mFAAmF,8BAA8B,EAAE,0FAA0F,iCAAiC,EAAE;AACzQ,KAAK;AACL,QAAQ,wDAAiB;AACzB,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,2QAA2Q,YAAY,iDAAiD,8gBAA8gB;AACx2B,QAAQ,wDAAiB;AACzB,KAAK;AACL,QAAQ,wDAAiB;AACzB,KAAK,EAAE,2BAA2B,SAAS,oDAAc,EAAE,oDAAc,8BAA8B,EAAE,wCAAwC;AACjJ;AACA,KAAK,OAAO,0DAAe,EAAE;AAC7B,KAAK,sCAAsC,OAAO,mDAAQ,EAAE,GAAG;AAC/D,KAAK,OAAO,4DAAiB,EAAE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DAAU;AACV,IAAI,2DAAY;AAChB;AACA,iDAAU;AACV,IAAI,2DAAY;AAChB;AACA,iDAAU;AACV,IAAI,2DAAY;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,uDAAY;AACxC,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oFAAoF,iDAAiD;AACrI,iDAAiD,+DAAwB,EAAE,mFAAmF,6JAA6J,YAAY,yCAAyC,gHAAgH;AAChe,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,wCAAwC;AAC/C,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AA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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,eAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yEAA8B;AAC/D;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,4DAAwB,EAAE,EAAE,EAAE,GAAG;AACvE,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;A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F,cAAc,mDAAQ;AACtB;AACA,0BAA0B,yDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB,cAAc,oDAAoD,gEAAyB,sBAAsB,4BAA4B,0vBAA0vB,EAAE,wBAAwB,SAAS,yDAAY,EAAE,EAAE,wBAAwB,iXAAiX,EAAE,EAAE,EAAE,EAAE;;AAE30C;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0CAA0C,kCAAkC;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAE07C;;AAE17C,kD","file":"default-node_modules_swimlane_ngx-datatable_fesm2015_swimlane-ngx-datatable_js-es2015.js","sourcesContent":["import { __decorate, __param } from 'tslib';\r\nimport { Inject, Injectable, TemplateRef, Directive, EventEmitter, ElementRef, NgZone, HostBinding, Output, Input, Renderer2, HostListener, KeyValueDiffers, ContentChildren, Component, ChangeDetectionStrategy, ContentChild, ChangeDetectorRef, ViewChild, SkipSelf, Optional, ViewEncapsulation, ViewContainerRef, NgModule } from '@angular/core';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { Subject, fromEvent, BehaviorSubject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common';\r\n\r\nconst _c0 = [\"*\"];\r\nfunction DataTableBodyComponent_datatable_progress_0_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"datatable-progress\");\r\n} }\r\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"datatable-summary-row\", 9);\r\n} if (rf & 2) {\r\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"rowHeight\", ctx_r4.summaryHeight)(\"offsetX\", ctx_r4.offsetX)(\"innerWidth\", ctx_r4.innerWidth)(\"rows\", ctx_r4.rows)(\"columns\", ctx_r4.columns);\r\n} }\r\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template(rf, ctx) { if (rf & 1) {\r\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-body-row\", 13);\r\n    ɵngcc0.ɵɵlistener(\"treeAction\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_treeAction_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const group_r7 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.onTreeAction(group_r7); })(\"activate\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const i_r8 = ɵngcc0.ɵɵnextContext().index; const ctx_r15 = ɵngcc0.ɵɵnextContext(2); const _r1 = ɵngcc0.ɵɵreference(2); return _r1.onActivate($event, ctx_r15.indexes.first + i_r8); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const group_r7 = ɵngcc0.ɵɵnextContext().$implicit;\r\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\r\n    const _r1 = ɵngcc0.ɵɵreference(2);\r\n    ɵngcc0.ɵɵproperty(\"isSelected\", _r1.getRowSelected(group_r7))(\"innerWidth\", ctx_r9.innerWidth)(\"offsetX\", ctx_r9.offsetX)(\"columns\", ctx_r9.columns)(\"rowHeight\", ctx_r9.getRowHeight(group_r7))(\"row\", group_r7)(\"rowIndex\", ctx_r9.getRowIndex(group_r7))(\"expanded\", ctx_r9.getRowExpanded(group_r7))(\"rowClass\", ctx_r9.rowClass)(\"displayCheck\", ctx_r9.displayCheck)(\"treeStatus\", group_r7 && group_r7.treeStatus);\r\n} }\r\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template(rf, ctx) { if (rf & 1) {\r\n    const _r22 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-body-row\", 15);\r\n    ɵngcc0.ɵɵlistener(\"activate\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template_datatable_body_row_activate_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r22); const i_r20 = restoredCtx.index; ɵngcc0.ɵɵnextContext(4); const _r1 = ɵngcc0.ɵɵreference(2); return _r1.onActivate($event, i_r20); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const row_r19 = ctx.$implicit;\r\n    const group_r7 = ɵngcc0.ɵɵnextContext(2).$implicit;\r\n    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);\r\n    const _r1 = ɵngcc0.ɵɵreference(2);\r\n    ɵngcc0.ɵɵproperty(\"isSelected\", _r1.getRowSelected(row_r19))(\"innerWidth\", ctx_r18.innerWidth)(\"offsetX\", ctx_r18.offsetX)(\"columns\", ctx_r18.columns)(\"rowHeight\", ctx_r18.getRowHeight(row_r19))(\"row\", row_r19)(\"group\", group_r7.value)(\"rowIndex\", ctx_r18.getRowIndex(row_r19))(\"expanded\", ctx_r18.getRowExpanded(row_r19))(\"rowClass\", ctx_r18.rowClass);\r\n} }\r\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template, 1, 10, \"datatable-body-row\", 14);\r\n} if (rf & 2) {\r\n    const group_r7 = ɵngcc0.ɵɵnextContext().$implicit;\r\n    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"ngForOf\", group_r7.value)(\"ngForTrackBy\", ctx_r11.rowTrackingFn);\r\n} }\r\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template(rf, ctx) { if (rf & 1) {\r\n    const _r26 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-row-wrapper\", 10);\r\n    ɵngcc0.ɵɵlistener(\"rowContextmenu\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template_datatable_row_wrapper_rowContextmenu_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.rowContextmenu.emit($event); });\r\n    ɵngcc0.ɵɵtemplate(1, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template, 1, 11, \"datatable-body-row\", 11);\r\n    ɵngcc0.ɵɵtemplate(2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template, 1, 2, \"ng-template\", null, 12, ɵngcc0.ɵɵtemplateRefExtractor);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const group_r7 = ctx.$implicit;\r\n    const i_r8 = ctx.index;\r\n    const _r10 = ɵngcc0.ɵɵreference(3);\r\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"groupedRows\", ctx_r5.groupedRows)(\"innerWidth\", ctx_r5.innerWidth)(\"ngStyle\", ctx_r5.getRowsStyles(group_r7))(\"rowDetail\", ctx_r5.rowDetail)(\"groupHeader\", ctx_r5.groupHeader)(\"offsetX\", ctx_r5.offsetX)(\"detailRowHeight\", ctx_r5.getDetailRowHeight(group_r7 && group_r7[i_r8], i_r8))(\"row\", group_r7)(\"expanded\", ctx_r5.getRowExpanded(group_r7))(\"rowIndex\", ctx_r5.getRowIndex(group_r7 && group_r7[i_r8]));\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r5.groupedRows)(\"ngIfElse\", _r10);\r\n} }\r\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"datatable-summary-row\", 16);\r\n} if (rf & 2) {\r\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r6.getBottomSummaryRowStyles())(\"rowHeight\", ctx_r6.summaryHeight)(\"offsetX\", ctx_r6.offsetX)(\"innerWidth\", ctx_r6.innerWidth)(\"rows\", ctx_r6.rows)(\"columns\", ctx_r6.columns);\r\n} }\r\nfunction DataTableBodyComponent_datatable_scroller_3_Template(rf, ctx) { if (rf & 1) {\r\n    const _r28 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-scroller\", 5);\r\n    ɵngcc0.ɵɵlistener(\"scroll\", function DataTableBodyComponent_datatable_scroller_3_Template_datatable_scroller_scroll_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.onBodyScroll($event); });\r\n    ɵngcc0.ɵɵtemplate(1, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template, 1, 5, \"datatable-summary-row\", 6);\r\n    ɵngcc0.ɵɵtemplate(2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template, 4, 12, \"datatable-row-wrapper\", 7);\r\n    ɵngcc0.ɵɵtemplate(3, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template, 1, 6, \"datatable-summary-row\", 8);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"scrollbarV\", ctx_r2.scrollbarV)(\"scrollbarH\", ctx_r2.scrollbarH)(\"scrollHeight\", ctx_r2.scrollHeight)(\"scrollWidth\", ctx_r2.columnGroupWidths == null ? null : ctx_r2.columnGroupWidths.total);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.summaryRow && ctx_r2.summaryPosition === \"top\");\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r2.temp)(\"ngForTrackBy\", ctx_r2.rowTrackingFn);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.summaryRow && ctx_r2.summaryPosition === \"bottom\");\r\n} }\r\nfunction DataTableBodyComponent_div_4_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"div\", 17);\r\n} if (rf & 2) {\r\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r3.emptyMessage, ɵngcc0.ɵɵsanitizeHtml);\r\n} }\r\nfunction DataTableHeaderComponent_div_1_datatable_header_cell_1_Template(rf, ctx) { if (rf & 1) {\r\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-header-cell\", 4);\r\n    ɵngcc0.ɵɵlistener(\"resize\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_resize_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const column_r3 = restoredCtx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onColumnResized($event, column_r3); })(\"longPressStart\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressStart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onLongPressStart($event); })(\"longPressEnd\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressEnd_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.onLongPressEnd($event); })(\"sort\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_sort_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.onSort($event); })(\"select\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.select.emit($event); })(\"columnContextmenu\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_columnContextmenu_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.columnContextmenu.emit($event); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const column_r3 = ctx.$implicit;\r\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"resizeEnabled\", column_r3.resizeable)(\"pressModel\", column_r3)(\"pressEnabled\", ctx_r2.reorderable && column_r3.draggable)(\"dragX\", ctx_r2.reorderable && column_r3.draggable && column_r3.dragging)(\"dragY\", false)(\"dragModel\", column_r3)(\"dragEventTarget\", ctx_r2.dragEventTarget)(\"headerHeight\", ctx_r2.headerHeight)(\"isTarget\", column_r3.isTarget)(\"targetMarkerTemplate\", ctx_r2.targetMarkerTemplate)(\"targetMarkerContext\", column_r3.targetMarkerContext)(\"column\", column_r3)(\"sortType\", ctx_r2.sortType)(\"sorts\", ctx_r2.sorts)(\"selectionType\", ctx_r2.selectionType)(\"sortAscendingIcon\", ctx_r2.sortAscendingIcon)(\"sortDescendingIcon\", ctx_r2.sortDescendingIcon)(\"allRowsSelected\", ctx_r2.allRowsSelected);\r\n} }\r\nfunction DataTableHeaderComponent_div_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\r\n    ɵngcc0.ɵɵtemplate(1, DataTableHeaderComponent_div_1_datatable_header_cell_1_Template, 1, 18, \"datatable-header-cell\", 3);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const colGroup_r1 = ctx.$implicit;\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵclassMap(\"datatable-row-\" + colGroup_r1.type);\r\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0._styleByGroup[colGroup_r1.type]);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngForOf\", colGroup_r1.columns)(\"ngForTrackBy\", ctx_r0.columnTrackingFn);\r\n} }\r\nfunction DatatableComponent_datatable_header_1_Template(rf, ctx) { if (rf & 1) {\r\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-header\", 4);\r\n    ɵngcc0.ɵɵlistener(\"sort\", function DatatableComponent_datatable_header_1_Template_datatable_header_sort_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onColumnSort($event); })(\"resize\", function DatatableComponent_datatable_header_1_Template_datatable_header_resize_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onColumnResize($event); })(\"reorder\", function DatatableComponent_datatable_header_1_Template_datatable_header_reorder_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onColumnReorder($event); })(\"select\", function DatatableComponent_datatable_header_1_Template_datatable_header_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onHeaderSelect($event); })(\"columnContextmenu\", function DatatableComponent_datatable_header_1_Template_datatable_header_columnContextmenu_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onColumnContextmenu($event); });\r\n    ɵngcc0.ɵɵpipe(1, \"async\");\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"sorts\", ctx_r0.sorts)(\"sortType\", ctx_r0.sortType)(\"scrollbarH\", ctx_r0.scrollbarH)(\"innerWidth\", ctx_r0._innerWidth)(\"offsetX\", ɵngcc0.ɵɵpipeBind1(1, 14, ctx_r0._offsetX))(\"dealsWithGroup\", ctx_r0.groupedRows !== undefined)(\"columns\", ctx_r0._internalColumns)(\"headerHeight\", ctx_r0.headerHeight)(\"reorderable\", ctx_r0.reorderable)(\"targetMarkerTemplate\", ctx_r0.targetMarkerTemplate)(\"sortAscendingIcon\", ctx_r0.cssClasses.sortAscending)(\"sortDescendingIcon\", ctx_r0.cssClasses.sortDescending)(\"allRowsSelected\", ctx_r0.allRowsSelected)(\"selectionType\", ctx_r0.selectionType);\r\n} }\r\nfunction DatatableComponent_datatable_footer_4_Template(rf, ctx) { if (rf & 1) {\r\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-footer\", 5);\r\n    ɵngcc0.ɵɵlistener(\"page\", function DatatableComponent_datatable_footer_4_Template_datatable_footer_page_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onFooterPage($event); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"rowCount\", ctx_r1.rowCount)(\"pageSize\", ctx_r1.pageSize)(\"offset\", ctx_r1.offset)(\"footerHeight\", ctx_r1.footerHeight)(\"footerTemplate\", ctx_r1.footer)(\"totalMessage\", ctx_r1.messages.totalMessage)(\"pagerLeftArrowIcon\", ctx_r1.cssClasses.pagerLeftArrow)(\"pagerRightArrowIcon\", ctx_r1.cssClasses.pagerRightArrow)(\"pagerPreviousIcon\", ctx_r1.cssClasses.pagerPrevious)(\"selectedCount\", ctx_r1.selected.length)(\"selectedMessage\", !!ctx_r1.selectionType && ctx_r1.messages.selectedMessage)(\"pagerNextIcon\", ctx_r1.cssClasses.pagerNext);\r\n} }\r\nfunction DataTableHeaderCellComponent_1_ng_template_0_Template(rf, ctx) { }\r\nfunction DataTableHeaderCellComponent_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, DataTableHeaderCellComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 5);\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.targetMarkerTemplate)(\"ngTemplateOutletContext\", ctx_r0.targetMarkerContext);\r\n} }\r\nfunction DataTableHeaderCellComponent_label_2_Template(rf, ctx) { if (rf & 1) {\r\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"label\", 6);\r\n    ɵngcc0.ɵɵelementStart(1, \"input\", 7);\r\n    ɵngcc0.ɵɵlistener(\"change\", function DataTableHeaderCellComponent_label_2_Template_input_change_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.select.emit(!ctx_r5.allRowsSelected); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r1.allRowsSelected);\r\n} }\r\nfunction DataTableHeaderCellComponent_span_3_Template(rf, ctx) { if (rf & 1) {\r\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\r\n    ɵngcc0.ɵɵelementStart(1, \"span\", 9);\r\n    ɵngcc0.ɵɵlistener(\"click\", function DataTableHeaderCellComponent_span_3_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onSort(); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r2.name, ɵngcc0.ɵɵsanitizeHtml);\r\n} }\r\nfunction DataTableHeaderCellComponent_4_ng_template_0_Template(rf, ctx) { }\r\nfunction DataTableHeaderCellComponent_4_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, DataTableHeaderCellComponent_4_ng_template_0_Template, 0, 0, \"ng-template\", 5);\r\n} if (rf & 2) {\r\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.column.headerTemplate)(\"ngTemplateOutletContext\", ctx_r3.cellContext);\r\n} }\r\nfunction DataTableFooterComponent_1_ng_template_0_Template(rf, ctx) { }\r\nconst _c1 = function (a0, a1, a2, a3, a4) { return { rowCount: a0, pageSize: a1, selectedCount: a2, curPage: a3, offset: a4 }; };\r\nfunction DataTableFooterComponent_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, DataTableFooterComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.footerTemplate.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction5(2, _c1, ctx_r0.rowCount, ctx_r0.pageSize, ctx_r0.selectedCount, ctx_r0.curPage, ctx_r0.offset));\r\n} }\r\nfunction DataTableFooterComponent_div_2_span_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"span\");\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate2(\" \", ctx_r4.selectedCount == null ? null : ctx_r4.selectedCount.toLocaleString(), \" \", ctx_r4.selectedMessage, \" / \");\r\n} }\r\nfunction DataTableFooterComponent_div_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\r\n    ɵngcc0.ɵɵtemplate(1, DataTableFooterComponent_div_2_span_1_Template, 2, 2, \"span\", 1);\r\n    ɵngcc0.ɵɵtext(2);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.selectedMessage);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate2(\" \", ctx_r1.rowCount == null ? null : ctx_r1.rowCount.toLocaleString(), \" \", ctx_r1.totalMessage, \" \");\r\n} }\r\nfunction DataTableFooterComponent_datatable_pager_3_Template(rf, ctx) { if (rf & 1) {\r\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-pager\", 6);\r\n    ɵngcc0.ɵɵlistener(\"change\", function DataTableFooterComponent_datatable_pager_3_Template_datatable_pager_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.page.emit($event); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"pagerLeftArrowIcon\", ctx_r2.pagerLeftArrowIcon)(\"pagerRightArrowIcon\", ctx_r2.pagerRightArrowIcon)(\"pagerPreviousIcon\", ctx_r2.pagerPreviousIcon)(\"pagerNextIcon\", ctx_r2.pagerNextIcon)(\"page\", ctx_r2.curPage)(\"size\", ctx_r2.pageSize)(\"count\", ctx_r2.rowCount)(\"hidden\", !ctx_r2.isVisible);\r\n} }\r\nconst _c2 = function (a0) { return { \"selected-count\": a0 }; };\r\nfunction DataTablePagerComponent_li_7_Template(rf, ctx) { if (rf & 1) {\r\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"li\", 6);\r\n    ɵngcc0.ɵɵelementStart(1, \"a\", 7);\r\n    ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_li_7_Template_a_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const pg_r1 = restoredCtx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.selectPage(pg_r1.number); });\r\n    ɵngcc0.ɵɵtext(2);\r\n    ɵngcc0.ɵɵelementEnd();\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const pg_r1 = ctx.$implicit;\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵclassProp(\"active\", pg_r1.number === ctx_r0.page);\r\n    ɵngcc0.ɵɵattribute(\"aria-label\", \"page \" + pg_r1.number);\r\n    ɵngcc0.ɵɵadvance(2);\r\n    ɵngcc0.ɵɵtextInterpolate1(\" \", pg_r1.text, \" \");\r\n} }\r\nfunction DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template(rf, ctx) { if (rf & 1) {\r\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"datatable-body-cell\", 3);\r\n    ɵngcc0.ɵɵlistener(\"activate\", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_activate_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const ii_r5 = restoredCtx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onActivate($event, ii_r5); })(\"treeAction\", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_treeAction_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.onTreeAction(); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const column_r4 = ctx.$implicit;\r\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"row\", ctx_r3.row)(\"group\", ctx_r3.group)(\"expanded\", ctx_r3.expanded)(\"isSelected\", ctx_r3.isSelected)(\"rowIndex\", ctx_r3.rowIndex)(\"column\", column_r4)(\"rowHeight\", ctx_r3.rowHeight)(\"displayCheck\", ctx_r3.displayCheck)(\"treeStatus\", ctx_r3.treeStatus);\r\n} }\r\nfunction DataTableBodyRowComponent_div_0_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\r\n    ɵngcc0.ɵɵtemplate(1, DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template, 1, 9, \"datatable-body-cell\", 2);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const colGroup_r1 = ctx.$implicit;\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵclassMapInterpolate1(\"datatable-row-\", colGroup_r1.type, \" datatable-row-group\");\r\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0._groupStyles[colGroup_r1.type]);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngForOf\", colGroup_r1.columns)(\"ngForTrackBy\", ctx_r0.columnTrackingFn);\r\n} }\r\nfunction DataTableRowWrapperComponent_div_0_1_ng_template_0_Template(rf, ctx) { }\r\nfunction DataTableRowWrapperComponent_div_0_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_0_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\r\n} if (rf & 2) {\r\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.groupHeader.template)(\"ngTemplateOutletContext\", ctx_r3.groupContext);\r\n} }\r\nfunction DataTableRowWrapperComponent_div_0_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\r\n    ɵngcc0.ɵɵtemplate(1, DataTableRowWrapperComponent_div_0_1_Template, 1, 2, undefined, 1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.getGroupHeaderStyle());\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.groupHeader && ctx_r0.groupHeader.template);\r\n} }\r\nfunction DataTableRowWrapperComponent_ng_content_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngIf\", \"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\"]);\r\n} }\r\nfunction DataTableRowWrapperComponent_div_2_1_ng_template_0_Template(rf, ctx) { }\r\nfunction DataTableRowWrapperComponent_div_2_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_2_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\r\n} if (rf & 2) {\r\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.rowDetail.template)(\"ngTemplateOutletContext\", ctx_r5.rowContext);\r\n} }\r\nfunction DataTableRowWrapperComponent_div_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\r\n    ɵngcc0.ɵɵtemplate(1, DataTableRowWrapperComponent_div_2_1_Template, 1, 2, undefined, 1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r2.detailRowHeight, \"px\");\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.rowDetail && ctx_r2.rowDetail.template);\r\n} }\r\nconst _c3 = [\"cellTemplate\"];\r\nfunction DataTableBodyCellComponent_label_1_Template(rf, ctx) { if (rf & 1) {\r\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"label\", 4);\r\n    ɵngcc0.ɵɵelementStart(1, \"input\", 5);\r\n    ɵngcc0.ɵɵlistener(\"click\", function DataTableBodyCellComponent_label_1_Template_input_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onCheckboxChange($event); });\r\n    ɵngcc0.ɵɵelementEnd();\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r0.isSelected);\r\n} }\r\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"i\", 11);\r\n} }\r\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"i\", 12);\r\n} }\r\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"i\", 13);\r\n} }\r\nfunction DataTableBodyCellComponent_ng_container_2_button_1_Template(rf, ctx) { if (rf & 1) {\r\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"button\", 7);\r\n    ɵngcc0.ɵɵlistener(\"click\", function DataTableBodyCellComponent_ng_container_2_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.onTreeAction(); });\r\n    ɵngcc0.ɵɵelementStart(1, \"span\");\r\n    ɵngcc0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template, 1, 0, \"i\", 8);\r\n    ɵngcc0.ɵɵtemplate(3, DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template, 1, 0, \"i\", 9);\r\n    ɵngcc0.ɵɵtemplate(4, DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template, 1, 0, \"i\", 10);\r\n    ɵngcc0.ɵɵelementEnd();\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r6.treeStatus === \"disabled\");\r\n    ɵngcc0.ɵɵadvance(2);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.treeStatus === \"loading\");\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.treeStatus === \"collapsed\");\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.treeStatus === \"expanded\" || ctx_r6.treeStatus === \"disabled\");\r\n} }\r\nfunction DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template(rf, ctx) { }\r\nconst _c4 = function (a0) { return { cellContext: a0 }; };\r\nfunction DataTableBodyCellComponent_ng_container_2_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template, 0, 0, \"ng-template\", 14);\r\n} if (rf & 2) {\r\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.column.treeToggleTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c4, ctx_r7.cellContext));\r\n} }\r\nfunction DataTableBodyCellComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementContainerStart(0);\r\n    ɵngcc0.ɵɵtemplate(1, DataTableBodyCellComponent_ng_container_2_button_1_Template, 5, 4, \"button\", 6);\r\n    ɵngcc0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_2_Template, 1, 4, undefined, 2);\r\n    ɵngcc0.ɵɵelementContainerEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.column.treeToggleTemplate);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.column.treeToggleTemplate);\r\n} }\r\nfunction DataTableBodyCellComponent_span_3_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"span\", 15);\r\n} if (rf & 2) {\r\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r2.sanitizedValue)(\"innerHTML\", ctx_r2.value, ɵngcc0.ɵɵsanitizeHtml);\r\n} }\r\nfunction DataTableBodyCellComponent_4_ng_template_0_Template(rf, ctx) { }\r\nfunction DataTableBodyCellComponent_4_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵtemplate(0, DataTableBodyCellComponent_4_ng_template_0_Template, 0, 0, \"ng-template\", 14, 16, ɵngcc0.ɵɵtemplateRefExtractor);\r\n} if (rf & 2) {\r\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.column.cellTemplate)(\"ngTemplateOutletContext\", ctx_r3.cellContext);\r\n} }\r\nfunction DataTableSummaryRowComponent_datatable_body_row_0_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"datatable-body-row\", 1);\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"innerWidth\", ctx_r0.innerWidth)(\"offsetX\", ctx_r0.offsetX)(\"columns\", ctx_r0._internalColumns)(\"rowHeight\", ctx_r0.rowHeight)(\"row\", ctx_r0.summaryRow)(\"rowIndex\", -1);\r\n} }\r\nlet ScrollbarHelper = class ScrollbarHelper {\r\n    constructor(document) {\r\n        this.document = document;\r\n        this.width = this.getWidth();\r\n    }\r\n    getWidth() {\r\n        const outer = this.document.createElement('div');\r\n        outer.style.visibility = 'hidden';\r\n        outer.style.width = '100px';\r\n        outer.style.msOverflowStyle = 'scrollbar';\r\n        this.document.body.appendChild(outer);\r\n        const widthNoScroll = outer.offsetWidth;\r\n        outer.style.overflow = 'scroll';\r\n        const inner = this.document.createElement('div');\r\n        inner.style.width = '100%';\r\n        outer.appendChild(inner);\r\n        const widthWithScroll = inner.offsetWidth;\r\n        outer.parentNode.removeChild(outer);\r\n        return widthNoScroll - widthWithScroll;\r\n    }\r\n};\r\nScrollbarHelper.ɵfac = function ScrollbarHelper_Factory(t) { return new (t || ScrollbarHelper)(ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nScrollbarHelper.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScrollbarHelper, factory: function (t) { return ScrollbarHelper.ɵfac(t); } });\r\nScrollbarHelper.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nScrollbarHelper = __decorate([ __param(0, Inject(DOCUMENT))\r\n], ScrollbarHelper);\r\n\r\n/**\r\n * Gets the width of the scrollbar.  Nesc for windows\r\n * http://stackoverflow.com/a/13382873/888165\r\n */\r\nlet DimensionsHelper = class DimensionsHelper {\r\n    getDimensions(element) {\r\n        return element.getBoundingClientRect();\r\n    }\r\n};\r\nDimensionsHelper.ɵfac = function DimensionsHelper_Factory(t) { return new (t || DimensionsHelper)(); };\r\nDimensionsHelper.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DimensionsHelper, factory: function (t) { return DimensionsHelper.ɵfac(t); } });\r\n\r\n/**\r\n * service to make DatatableComponent aware of changes to\r\n * input bindings of DataTableColumnDirective\r\n */\r\nlet ColumnChangesService = class ColumnChangesService {\r\n    constructor() {\r\n        this.columnInputChanges = new Subject();\r\n    }\r\n    get columnInputChanges$() {\r\n        return this.columnInputChanges.asObservable();\r\n    }\r\n    onInputChange() {\r\n        this.columnInputChanges.next();\r\n    }\r\n};\r\nColumnChangesService.ɵfac = function ColumnChangesService_Factory(t) { return new (t || ColumnChangesService)(); };\r\nColumnChangesService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ColumnChangesService, factory: function (t) { return ColumnChangesService.ɵfac(t); } });\r\n\r\nlet DataTableFooterTemplateDirective = class DataTableFooterTemplateDirective {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n};\r\nDataTableFooterTemplateDirective.ɵfac = function DataTableFooterTemplateDirective_Factory(t) { return new (t || DataTableFooterTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nDataTableFooterTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataTableFooterTemplateDirective, selectors: [[\"\", \"ngx-datatable-footer-template\", \"\"]] });\r\nDataTableFooterTemplateDirective.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n\r\n/**\r\n * Visibility Observer Directive\r\n *\r\n * Usage:\r\n *\r\n * \t\t<div\r\n * \t\t\tvisibilityObserver\r\n * \t\t\t(visible)=\"onVisible($event)\">\r\n * \t\t</div>\r\n *\r\n */\r\nlet VisibilityDirective = class VisibilityDirective {\r\n    constructor(element, zone) {\r\n        this.element = element;\r\n        this.zone = zone;\r\n        this.isVisible = false;\r\n        this.visible = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        this.runCheck();\r\n    }\r\n    ngOnDestroy() {\r\n        clearTimeout(this.timeout);\r\n    }\r\n    onVisibilityChange() {\r\n        // trigger zone recalc for columns\r\n        this.zone.run(() => {\r\n            this.isVisible = true;\r\n            this.visible.emit(true);\r\n        });\r\n    }\r\n    runCheck() {\r\n        const check = () => {\r\n            // https://davidwalsh.name/offsetheight-visibility\r\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n            if (offsetHeight && offsetWidth) {\r\n                clearTimeout(this.timeout);\r\n                this.onVisibilityChange();\r\n            }\r\n            else {\r\n                clearTimeout(this.timeout);\r\n                this.zone.runOutsideAngular(() => {\r\n                    this.timeout = setTimeout(() => check(), 50);\r\n                });\r\n            }\r\n        };\r\n        this.timeout = setTimeout(() => check());\r\n    }\r\n};\r\nVisibilityDirective.ɵfac = function VisibilityDirective_Factory(t) { return new (t || VisibilityDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nVisibilityDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: VisibilityDirective, selectors: [[\"\", \"visibilityObserver\", \"\"]], hostVars: 2, hostBindings: function VisibilityDirective_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"visible\", ctx.isVisible);\r\n    } }, outputs: { visible: \"visible\" } });\r\nVisibilityDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\n__decorate([\r\n    HostBinding('class.visible')\r\n], VisibilityDirective.prototype, \"isVisible\", void 0);\r\n__decorate([\r\n    Output()\r\n], VisibilityDirective.prototype, \"visible\", void 0);\r\n\r\n/**\r\n * Draggable Directive for Angular2\r\n *\r\n * Inspiration:\r\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\r\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\r\n *\r\n */\r\nlet DraggableDirective = class DraggableDirective {\r\n    constructor(element) {\r\n        this.dragX = true;\r\n        this.dragY = true;\r\n        this.dragStart = new EventEmitter();\r\n        this.dragging = new EventEmitter();\r\n        this.dragEnd = new EventEmitter();\r\n        this.isDragging = false;\r\n        this.element = element.nativeElement;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\r\n            this.onMousedown(changes['dragEventTarget'].currentValue);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroySubscription();\r\n    }\r\n    onMouseup(event) {\r\n        if (!this.isDragging)\r\n            return;\r\n        this.isDragging = false;\r\n        this.element.classList.remove('dragging');\r\n        if (this.subscription) {\r\n            this._destroySubscription();\r\n            this.dragEnd.emit({\r\n                event,\r\n                element: this.element,\r\n                model: this.dragModel\r\n            });\r\n        }\r\n    }\r\n    onMousedown(event) {\r\n        // we only want to drag the inner header text\r\n        const isDragElm = event.target.classList.contains('draggable');\r\n        if (isDragElm && (this.dragX || this.dragY)) {\r\n            event.preventDefault();\r\n            this.isDragging = true;\r\n            const mouseDownPos = { x: event.clientX, y: event.clientY };\r\n            const mouseup = fromEvent(document, 'mouseup');\r\n            this.subscription = mouseup.subscribe((ev) => this.onMouseup(ev));\r\n            const mouseMoveSub = fromEvent(document, 'mousemove')\r\n                .pipe(takeUntil(mouseup))\r\n                .subscribe((ev) => this.move(ev, mouseDownPos));\r\n            this.subscription.add(mouseMoveSub);\r\n            this.dragStart.emit({\r\n                event,\r\n                element: this.element,\r\n                model: this.dragModel\r\n            });\r\n        }\r\n    }\r\n    move(event, mouseDownPos) {\r\n        if (!this.isDragging)\r\n            return;\r\n        const x = event.clientX - mouseDownPos.x;\r\n        const y = event.clientY - mouseDownPos.y;\r\n        if (this.dragX)\r\n            this.element.style.left = `${x}px`;\r\n        if (this.dragY)\r\n            this.element.style.top = `${y}px`;\r\n        this.element.classList.add('dragging');\r\n        this.dragging.emit({\r\n            event,\r\n            element: this.element,\r\n            model: this.dragModel\r\n        });\r\n    }\r\n    _destroySubscription() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = undefined;\r\n        }\r\n    }\r\n};\r\nDraggableDirective.ɵfac = function DraggableDirective_Factory(t) { return new (t || DraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nDraggableDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DraggableDirective, selectors: [[\"\", \"draggable\", \"\"]], inputs: { dragX: \"dragX\", dragY: \"dragY\", dragEventTarget: \"dragEventTarget\", dragModel: \"dragModel\" }, outputs: { dragStart: \"dragStart\", dragging: \"dragging\", dragEnd: \"dragEnd\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nDraggableDirective.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input()\r\n], DraggableDirective.prototype, \"dragEventTarget\", void 0);\r\n__decorate([\r\n    Input()\r\n], DraggableDirective.prototype, \"dragModel\", void 0);\r\n__decorate([\r\n    Input()\r\n], DraggableDirective.prototype, \"dragX\", void 0);\r\n__decorate([\r\n    Input()\r\n], DraggableDirective.prototype, \"dragY\", void 0);\r\n__decorate([\r\n    Output()\r\n], DraggableDirective.prototype, \"dragStart\", void 0);\r\n__decorate([\r\n    Output()\r\n], DraggableDirective.prototype, \"dragging\", void 0);\r\n__decorate([\r\n    Output()\r\n], DraggableDirective.prototype, \"dragEnd\", void 0);\r\n\r\nlet ResizeableDirective = class ResizeableDirective {\r\n    constructor(element, renderer) {\r\n        this.renderer = renderer;\r\n        this.resizeEnabled = true;\r\n        this.resize = new EventEmitter();\r\n        this.resizing = false;\r\n        this.element = element.nativeElement;\r\n    }\r\n    ngAfterViewInit() {\r\n        const renderer2 = this.renderer;\r\n        this.resizeHandle = renderer2.createElement('span');\r\n        if (this.resizeEnabled) {\r\n            renderer2.addClass(this.resizeHandle, 'resize-handle');\r\n        }\r\n        else {\r\n            renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\r\n        }\r\n        renderer2.appendChild(this.element, this.resizeHandle);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroySubscription();\r\n        if (this.renderer.destroyNode) {\r\n            this.renderer.destroyNode(this.resizeHandle);\r\n        }\r\n        else if (this.resizeHandle) {\r\n            this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\r\n        }\r\n    }\r\n    onMouseup() {\r\n        this.resizing = false;\r\n        if (this.subscription && !this.subscription.closed) {\r\n            this._destroySubscription();\r\n            this.resize.emit(this.element.clientWidth);\r\n        }\r\n    }\r\n    onMousedown(event) {\r\n        const isHandle = event.target.classList.contains('resize-handle');\r\n        const initialWidth = this.element.clientWidth;\r\n        const mouseDownScreenX = event.screenX;\r\n        if (isHandle) {\r\n            event.stopPropagation();\r\n            this.resizing = true;\r\n            const mouseup = fromEvent(document, 'mouseup');\r\n            this.subscription = mouseup.subscribe((ev) => this.onMouseup());\r\n            const mouseMoveSub = fromEvent(document, 'mousemove')\r\n                .pipe(takeUntil(mouseup))\r\n                .subscribe((e) => this.move(e, initialWidth, mouseDownScreenX));\r\n            this.subscription.add(mouseMoveSub);\r\n        }\r\n    }\r\n    move(event, initialWidth, mouseDownScreenX) {\r\n        const movementX = event.screenX - mouseDownScreenX;\r\n        const newWidth = initialWidth + movementX;\r\n        const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\r\n        const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\r\n        if (overMinWidth && underMaxWidth) {\r\n            this.element.style.width = `${newWidth}px`;\r\n        }\r\n    }\r\n    _destroySubscription() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = undefined;\r\n        }\r\n    }\r\n};\r\nResizeableDirective.ɵfac = function ResizeableDirective_Factory(t) { return new (t || ResizeableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\r\nResizeableDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ResizeableDirective, selectors: [[\"\", \"resizeable\", \"\"]], hostVars: 2, hostBindings: function ResizeableDirective_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"mousedown\", function ResizeableDirective_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"resizeable\", ctx.resizeEnabled);\r\n    } }, inputs: { resizeEnabled: \"resizeEnabled\", minWidth: \"minWidth\", maxWidth: \"maxWidth\" }, outputs: { resize: \"resize\" } });\r\nResizeableDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    Input()\r\n], ResizeableDirective.prototype, \"resizeEnabled\", void 0);\r\n__decorate([\r\n    Input()\r\n], ResizeableDirective.prototype, \"minWidth\", void 0);\r\n__decorate([\r\n    Input()\r\n], ResizeableDirective.prototype, \"maxWidth\", void 0);\r\n__decorate([\r\n    Output()\r\n], ResizeableDirective.prototype, \"resize\", void 0);\r\n__decorate([\r\n    HostListener('mousedown', ['$event'])\r\n], ResizeableDirective.prototype, \"onMousedown\", null);\r\n\r\nlet OrderableDirective = class OrderableDirective {\r\n    constructor(differs, document) {\r\n        this.document = document;\r\n        this.reorder = new EventEmitter();\r\n        this.targetChanged = new EventEmitter();\r\n        this.differ = differs.find({}).create();\r\n    }\r\n    ngAfterContentInit() {\r\n        // HACK: Investigate Better Way\r\n        this.updateSubscriptions();\r\n        this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\r\n    }\r\n    ngOnDestroy() {\r\n        this.draggables.forEach(d => {\r\n            d.dragStart.unsubscribe();\r\n            d.dragging.unsubscribe();\r\n            d.dragEnd.unsubscribe();\r\n        });\r\n    }\r\n    updateSubscriptions() {\r\n        const diffs = this.differ.diff(this.createMapDiffs());\r\n        if (diffs) {\r\n            const subscribe = ({ currentValue, previousValue }) => {\r\n                unsubscribe({ previousValue });\r\n                if (currentValue) {\r\n                    currentValue.dragStart.subscribe(this.onDragStart.bind(this));\r\n                    currentValue.dragging.subscribe(this.onDragging.bind(this));\r\n                    currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\r\n                }\r\n            };\r\n            const unsubscribe = ({ previousValue }) => {\r\n                if (previousValue) {\r\n                    previousValue.dragStart.unsubscribe();\r\n                    previousValue.dragging.unsubscribe();\r\n                    previousValue.dragEnd.unsubscribe();\r\n                }\r\n            };\r\n            diffs.forEachAddedItem(subscribe);\r\n            // diffs.forEachChangedItem(subscribe.bind(this));\r\n            diffs.forEachRemovedItem(unsubscribe);\r\n        }\r\n    }\r\n    onDragStart() {\r\n        this.positions = {};\r\n        let i = 0;\r\n        for (const dragger of this.draggables.toArray()) {\r\n            const elm = dragger.element;\r\n            const left = parseInt(elm.offsetLeft.toString(), 0);\r\n            this.positions[dragger.dragModel.prop] = {\r\n                left,\r\n                right: left + parseInt(elm.offsetWidth.toString(), 0),\r\n                index: i++,\r\n                element: elm\r\n            };\r\n        }\r\n    }\r\n    onDragging({ element, model, event }) {\r\n        const prevPos = this.positions[model.prop];\r\n        const target = this.isTarget(model, event);\r\n        if (target) {\r\n            if (this.lastDraggingIndex !== target.i) {\r\n                this.targetChanged.emit({\r\n                    prevIndex: this.lastDraggingIndex,\r\n                    newIndex: target.i,\r\n                    initialIndex: prevPos.index\r\n                });\r\n                this.lastDraggingIndex = target.i;\r\n            }\r\n        }\r\n        else if (this.lastDraggingIndex !== prevPos.index) {\r\n            this.targetChanged.emit({\r\n                prevIndex: this.lastDraggingIndex,\r\n                initialIndex: prevPos.index\r\n            });\r\n            this.lastDraggingIndex = prevPos.index;\r\n        }\r\n    }\r\n    onDragEnd({ element, model, event }) {\r\n        const prevPos = this.positions[model.prop];\r\n        const target = this.isTarget(model, event);\r\n        if (target) {\r\n            this.reorder.emit({\r\n                prevIndex: prevPos.index,\r\n                newIndex: target.i,\r\n                model\r\n            });\r\n        }\r\n        this.lastDraggingIndex = undefined;\r\n        element.style.left = 'auto';\r\n    }\r\n    isTarget(model, event) {\r\n        let i = 0;\r\n        const x = event.x || event.clientX;\r\n        const y = event.y || event.clientY;\r\n        const targets = this.document.elementsFromPoint(x, y);\r\n        for (const prop in this.positions) {\r\n            // current column position which throws event.\r\n            const pos = this.positions[prop];\r\n            // since we drag the inner span, we need to find it in the elements at the cursor\r\n            if (model.prop !== prop && targets.find((el) => el === pos.element)) {\r\n                return {\r\n                    pos,\r\n                    i\r\n                };\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n    createMapDiffs() {\r\n        return this.draggables.toArray().reduce((acc, curr) => {\r\n            acc[curr.dragModel.$$id] = curr;\r\n            return acc;\r\n        }, {});\r\n    }\r\n};\r\nOrderableDirective.ɵfac = function OrderableDirective_Factory(t) { return new (t || OrderableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\r\nOrderableDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OrderableDirective, selectors: [[\"\", \"orderable\", \"\"]], contentQueries: function OrderableDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DraggableDirective, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.draggables = _t);\r\n    } }, outputs: { reorder: \"reorder\", targetChanged: \"targetChanged\" } });\r\nOrderableDirective.ctorParameters = () => [\r\n    { type: KeyValueDiffers },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n__decorate([\r\n    Output()\r\n], OrderableDirective.prototype, \"reorder\", void 0);\r\n__decorate([\r\n    Output()\r\n], OrderableDirective.prototype, \"targetChanged\", void 0);\r\n__decorate([\r\n    ContentChildren(DraggableDirective, { descendants: true })\r\n], OrderableDirective.prototype, \"draggables\", void 0);\r\nOrderableDirective = __decorate([ __param(1, Inject(DOCUMENT))\r\n], OrderableDirective);\r\n\r\nlet LongPressDirective = class LongPressDirective {\r\n    constructor() {\r\n        this.pressEnabled = true;\r\n        this.duration = 500;\r\n        this.longPressStart = new EventEmitter();\r\n        this.longPressing = new EventEmitter();\r\n        this.longPressEnd = new EventEmitter();\r\n        this.mouseX = 0;\r\n        this.mouseY = 0;\r\n    }\r\n    get press() {\r\n        return this.pressing;\r\n    }\r\n    get isLongPress() {\r\n        return this.isLongPressing;\r\n    }\r\n    onMouseDown(event) {\r\n        // don't do right/middle clicks\r\n        if (event.which !== 1 || !this.pressEnabled)\r\n            return;\r\n        // don't start drag if its on resize handle\r\n        const target = event.target;\r\n        if (target.classList.contains('resize-handle'))\r\n            return;\r\n        this.mouseX = event.clientX;\r\n        this.mouseY = event.clientY;\r\n        this.pressing = true;\r\n        this.isLongPressing = false;\r\n        const mouseup = fromEvent(document, 'mouseup');\r\n        this.subscription = mouseup.subscribe((ev) => this.onMouseup());\r\n        this.timeout = setTimeout(() => {\r\n            this.isLongPressing = true;\r\n            this.longPressStart.emit({\r\n                event,\r\n                model: this.pressModel\r\n            });\r\n            this.subscription.add(fromEvent(document, 'mousemove')\r\n                .pipe(takeUntil(mouseup))\r\n                .subscribe((mouseEvent) => this.onMouseMove(mouseEvent)));\r\n            this.loop(event);\r\n        }, this.duration);\r\n        this.loop(event);\r\n    }\r\n    onMouseMove(event) {\r\n        if (this.pressing && !this.isLongPressing) {\r\n            const xThres = Math.abs(event.clientX - this.mouseX) > 10;\r\n            const yThres = Math.abs(event.clientY - this.mouseY) > 10;\r\n            if (xThres || yThres) {\r\n                this.endPress();\r\n            }\r\n        }\r\n    }\r\n    loop(event) {\r\n        if (this.isLongPressing) {\r\n            this.timeout = setTimeout(() => {\r\n                this.longPressing.emit({\r\n                    event,\r\n                    model: this.pressModel\r\n                });\r\n                this.loop(event);\r\n            }, 50);\r\n        }\r\n    }\r\n    endPress() {\r\n        clearTimeout(this.timeout);\r\n        this.isLongPressing = false;\r\n        this.pressing = false;\r\n        this._destroySubscription();\r\n        this.longPressEnd.emit({\r\n            model: this.pressModel\r\n        });\r\n    }\r\n    onMouseup() {\r\n        this.endPress();\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroySubscription();\r\n    }\r\n    _destroySubscription() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = undefined;\r\n        }\r\n    }\r\n};\r\nLongPressDirective.ɵfac = function LongPressDirective_Factory(t) { return new (t || LongPressDirective)(); };\r\nLongPressDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LongPressDirective, selectors: [[\"\", \"long-press\", \"\"]], hostVars: 4, hostBindings: function LongPressDirective_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"mousedown\", function LongPressDirective_mousedown_HostBindingHandler($event) { return ctx.onMouseDown($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"press\", ctx.press)(\"longpress\", ctx.isLongPress);\r\n    } }, inputs: { pressEnabled: \"pressEnabled\", duration: \"duration\", pressModel: \"pressModel\" }, outputs: { longPressStart: \"longPressStart\", longPressing: \"longPressing\", longPressEnd: \"longPressEnd\" } });\r\n__decorate([\r\n    Input()\r\n], LongPressDirective.prototype, \"pressEnabled\", void 0);\r\n__decorate([\r\n    Input()\r\n], LongPressDirective.prototype, \"pressModel\", void 0);\r\n__decorate([\r\n    Input()\r\n], LongPressDirective.prototype, \"duration\", void 0);\r\n__decorate([\r\n    Output()\r\n], LongPressDirective.prototype, \"longPressStart\", void 0);\r\n__decorate([\r\n    Output()\r\n], LongPressDirective.prototype, \"longPressing\", void 0);\r\n__decorate([\r\n    Output()\r\n], LongPressDirective.prototype, \"longPressEnd\", void 0);\r\n__decorate([\r\n    HostBinding('class.press')\r\n], LongPressDirective.prototype, \"press\", null);\r\n__decorate([\r\n    HostBinding('class.longpress')\r\n], LongPressDirective.prototype, \"isLongPress\", null);\r\n__decorate([\r\n    HostListener('mousedown', ['$event'])\r\n], LongPressDirective.prototype, \"onMouseDown\", null);\r\n\r\nlet ScrollerComponent = class ScrollerComponent {\r\n    constructor(ngZone, element, renderer) {\r\n        this.ngZone = ngZone;\r\n        this.renderer = renderer;\r\n        this.scrollbarV = false;\r\n        this.scrollbarH = false;\r\n        this.scroll = new EventEmitter();\r\n        this.scrollYPos = 0;\r\n        this.scrollXPos = 0;\r\n        this.prevScrollYPos = 0;\r\n        this.prevScrollXPos = 0;\r\n        this._scrollEventListener = null;\r\n        this.element = element.nativeElement;\r\n    }\r\n    ngOnInit() {\r\n        // manual bind so we don't always listen\r\n        if (this.scrollbarV || this.scrollbarH) {\r\n            const renderer = this.renderer;\r\n            this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\r\n            this._scrollEventListener = this.onScrolled.bind(this);\r\n            this.parentElement.addEventListener('scroll', this._scrollEventListener);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this._scrollEventListener) {\r\n            this.parentElement.removeEventListener('scroll', this._scrollEventListener);\r\n            this._scrollEventListener = null;\r\n        }\r\n    }\r\n    setOffset(offsetY) {\r\n        if (this.parentElement) {\r\n            this.parentElement.scrollTop = offsetY;\r\n        }\r\n    }\r\n    onScrolled(event) {\r\n        const dom = event.currentTarget;\r\n        requestAnimationFrame(() => {\r\n            this.scrollYPos = dom.scrollTop;\r\n            this.scrollXPos = dom.scrollLeft;\r\n            this.updateOffset();\r\n        });\r\n    }\r\n    updateOffset() {\r\n        let direction;\r\n        if (this.scrollYPos < this.prevScrollYPos) {\r\n            direction = 'down';\r\n        }\r\n        else if (this.scrollYPos > this.prevScrollYPos) {\r\n            direction = 'up';\r\n        }\r\n        this.scroll.emit({\r\n            direction,\r\n            scrollYPos: this.scrollYPos,\r\n            scrollXPos: this.scrollXPos\r\n        });\r\n        this.prevScrollYPos = this.scrollYPos;\r\n        this.prevScrollXPos = this.scrollXPos;\r\n    }\r\n};\r\nScrollerComponent.ɵfac = function ScrollerComponent_Factory(t) { return new (t || ScrollerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\r\nScrollerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ScrollerComponent, selectors: [[\"datatable-scroller\"]], hostAttrs: [1, \"datatable-scroll\"], hostVars: 4, hostBindings: function ScrollerComponent_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx.scrollHeight, \"px\")(\"width\", ctx.scrollWidth, \"px\");\r\n    } }, inputs: { scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", scrollHeight: \"scrollHeight\", scrollWidth: \"scrollWidth\" }, outputs: { scroll: \"scroll\" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ScrollerComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef();\r\n        ɵngcc0.ɵɵprojection(0);\r\n    } }, encapsulation: 2, changeDetection: 0 });\r\nScrollerComponent.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: ElementRef },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    Input()\r\n], ScrollerComponent.prototype, \"scrollbarV\", void 0);\r\n__decorate([\r\n    Input()\r\n], ScrollerComponent.prototype, \"scrollbarH\", void 0);\r\n__decorate([\r\n    HostBinding('style.height.px'),\r\n    Input()\r\n], ScrollerComponent.prototype, \"scrollHeight\", void 0);\r\n__decorate([\r\n    HostBinding('style.width.px'),\r\n    Input()\r\n], ScrollerComponent.prototype, \"scrollWidth\", void 0);\r\n__decorate([\r\n    Output()\r\n], ScrollerComponent.prototype, \"scroll\", void 0);\r\n\r\nlet DatatableGroupHeaderTemplateDirective = class DatatableGroupHeaderTemplateDirective {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n};\r\nDatatableGroupHeaderTemplateDirective.ɵfac = function DatatableGroupHeaderTemplateDirective_Factory(t) { return new (t || DatatableGroupHeaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nDatatableGroupHeaderTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DatatableGroupHeaderTemplateDirective, selectors: [[\"\", \"ngx-datatable-group-header-template\", \"\"]] });\r\nDatatableGroupHeaderTemplateDirective.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n\r\nlet DatatableGroupHeaderDirective = class DatatableGroupHeaderDirective {\r\n    constructor() {\r\n        /**\r\n         * Row height is required when virtual scroll is enabled.\r\n         */\r\n        this.rowHeight = 0;\r\n        /**\r\n         * Track toggling of group visibility\r\n         */\r\n        this.toggle = new EventEmitter();\r\n    }\r\n    get template() {\r\n        return this._templateInput || this._templateQuery;\r\n    }\r\n    /**\r\n     * Toggle the expansion of a group\r\n     */\r\n    toggleExpandGroup(group) {\r\n        this.toggle.emit({\r\n            type: 'group',\r\n            value: group\r\n        });\r\n    }\r\n    /**\r\n     * Expand all groups\r\n     */\r\n    expandAllGroups() {\r\n        this.toggle.emit({\r\n            type: 'all',\r\n            value: true\r\n        });\r\n    }\r\n    /**\r\n     * Collapse all groups\r\n     */\r\n    collapseAllGroups() {\r\n        this.toggle.emit({\r\n            type: 'all',\r\n            value: false\r\n        });\r\n    }\r\n};\r\nDatatableGroupHeaderDirective.ɵfac = function DatatableGroupHeaderDirective_Factory(t) { return new (t || DatatableGroupHeaderDirective)(); };\r\nDatatableGroupHeaderDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DatatableGroupHeaderDirective, selectors: [[\"ngx-datatable-group-header\"]], contentQueries: function DatatableGroupHeaderDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableGroupHeaderTemplateDirective, 7, TemplateRef);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\r\n    } }, inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" } });\r\n__decorate([\r\n    Input()\r\n], DatatableGroupHeaderDirective.prototype, \"rowHeight\", void 0);\r\n__decorate([\r\n    Input('template')\r\n], DatatableGroupHeaderDirective.prototype, \"_templateInput\", void 0);\r\n__decorate([\r\n    ContentChild(DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true })\r\n], DatatableGroupHeaderDirective.prototype, \"_templateQuery\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableGroupHeaderDirective.prototype, \"toggle\", void 0);\r\n\r\n/**\r\n * Always returns the empty string ''\r\n */\r\nfunction emptyStringGetter() {\r\n    return '';\r\n}\r\n/**\r\n * Returns the appropriate getter function for this kind of prop.\r\n * If prop == null, returns the emptyStringGetter.\r\n */\r\nfunction getterForProp(prop) {\r\n    if (prop == null) {\r\n        return emptyStringGetter;\r\n    }\r\n    if (typeof prop === 'number') {\r\n        return numericIndexGetter;\r\n    }\r\n    else {\r\n        // deep or simple\r\n        if (prop.indexOf('.') !== -1) {\r\n            return deepValueGetter;\r\n        }\r\n        else {\r\n            return shallowValueGetter;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the value at this numeric index.\r\n * @param row array of values\r\n * @param index numeric index\r\n * @returns any or '' if invalid index\r\n */\r\nfunction numericIndexGetter(row, index) {\r\n    if (row == null) {\r\n        return '';\r\n    }\r\n    // mimic behavior of deepValueGetter\r\n    if (!row || index == null) {\r\n        return row;\r\n    }\r\n    const value = row[index];\r\n    if (value == null) {\r\n        return '';\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns the value of a field.\r\n * (more efficient than deepValueGetter)\r\n * @param obj object containing the field\r\n * @param fieldName field name string\r\n */\r\nfunction shallowValueGetter(obj, fieldName) {\r\n    if (obj == null) {\r\n        return '';\r\n    }\r\n    if (!obj || !fieldName) {\r\n        return obj;\r\n    }\r\n    const value = obj[fieldName];\r\n    if (value == null) {\r\n        return '';\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns a deep object given a string. zoo['animal.type']\r\n */\r\nfunction deepValueGetter(obj, path) {\r\n    if (obj == null) {\r\n        return '';\r\n    }\r\n    if (!obj || !path) {\r\n        return obj;\r\n    }\r\n    // check if path matches a root-level field\r\n    // { \"a.b.c\": 123 }\r\n    let current = obj[path];\r\n    if (current !== undefined) {\r\n        return current;\r\n    }\r\n    current = obj;\r\n    const split = path.split('.');\r\n    if (split.length) {\r\n        for (let i = 0; i < split.length; i++) {\r\n            current = current[split[i]];\r\n            // if found undefined, return empty string\r\n            if (current === undefined || current === null) {\r\n                return '';\r\n            }\r\n        }\r\n    }\r\n    return current;\r\n}\r\n\r\nfunction optionalGetterForProp(prop) {\r\n    return prop && (row => getterForProp(prop)(row, prop));\r\n}\r\n/**\r\n * This functions rearrange items by their parents\r\n * Also sets the level value to each of the items\r\n *\r\n * Note: Expecting each item has a property called parentId\r\n * Note: This algorithm will fail if a list has two or more items with same ID\r\n * NOTE: This algorithm will fail if there is a deadlock of relationship\r\n *\r\n * For example,\r\n *\r\n * Input\r\n *\r\n * id -> parent\r\n * 1  -> 0\r\n * 2  -> 0\r\n * 3  -> 1\r\n * 4  -> 1\r\n * 5  -> 2\r\n * 7  -> 8\r\n * 6  -> 3\r\n *\r\n *\r\n * Output\r\n * id -> level\r\n * 1      -> 0\r\n * --3    -> 1\r\n * ----6  -> 2\r\n * --4    -> 1\r\n * 2      -> 0\r\n * --5    -> 1\r\n * 7     -> 8\r\n *\r\n *\r\n * @param rows\r\n *\r\n */\r\nfunction groupRowsByParents(rows, from, to) {\r\n    if (from && to) {\r\n        const nodeById = {};\r\n        const l = rows.length;\r\n        let node = null;\r\n        nodeById[0] = new TreeNode(); // that's the root node\r\n        const uniqIDs = rows.reduce((arr, item) => {\r\n            const toValue = to(item);\r\n            if (arr.indexOf(toValue) === -1) {\r\n                arr.push(toValue);\r\n            }\r\n            return arr;\r\n        }, []);\r\n        for (let i = 0; i < l; i++) {\r\n            // make TreeNode objects for each item\r\n            nodeById[to(rows[i])] = new TreeNode(rows[i]);\r\n        }\r\n        for (let i = 0; i < l; i++) {\r\n            // link all TreeNode objects\r\n            node = nodeById[to(rows[i])];\r\n            let parent = 0;\r\n            const fromValue = from(node.row);\r\n            if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\r\n                parent = fromValue;\r\n            }\r\n            node.parent = nodeById[parent];\r\n            node.row['level'] = node.parent.row['level'] + 1;\r\n            node.parent.children.push(node);\r\n        }\r\n        let resolvedRows = [];\r\n        nodeById[0].flatten(function () {\r\n            resolvedRows = [...resolvedRows, this.row];\r\n        }, true);\r\n        return resolvedRows;\r\n    }\r\n    else {\r\n        return rows;\r\n    }\r\n}\r\nclass TreeNode {\r\n    constructor(row = null) {\r\n        if (!row) {\r\n            row = {\r\n                level: -1,\r\n                treeStatus: 'expanded'\r\n            };\r\n        }\r\n        this.row = row;\r\n        this.parent = null;\r\n        this.children = [];\r\n    }\r\n    flatten(f, recursive) {\r\n        if (this.row['treeStatus'] === 'expanded') {\r\n            for (let i = 0, l = this.children.length; i < l; i++) {\r\n                const child = this.children[i];\r\n                f.apply(child, Array.prototype.slice.call(arguments, 2));\r\n                if (recursive)\r\n                    child.flatten.apply(child, arguments);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Converts strings from something to camel case\r\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\r\n */\r\nfunction camelCase(str) {\r\n    // Replace special characters with a space\r\n    str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\r\n    // put a space before an uppercase letter\r\n    str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\r\n    // Lower case first character and some other stuff\r\n    str = str\r\n        .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\r\n        .trim()\r\n        .toLowerCase();\r\n    // uppercase characters preceded by a space or number\r\n    str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\r\n        return b.trim() + c.toUpperCase();\r\n    });\r\n    return str;\r\n}\r\n/**\r\n * Converts strings from camel case to words\r\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\r\n */\r\nfunction deCamelCase(str) {\r\n    return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\r\n}\r\n\r\n/**\r\n * Creates a unique object id.\r\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n */\r\nfunction id() {\r\n    return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n}\r\n\r\n/**\r\n * Sets the column defaults\r\n */\r\nfunction setColumnDefaults(columns) {\r\n    if (!columns)\r\n        return;\r\n    // Only one column should hold the tree view\r\n    // Thus if multiple columns are provided with\r\n    // isTreeColumn as true we take only the first one\r\n    let treeColumnFound = false;\r\n    for (const column of columns) {\r\n        if (!column.$$id) {\r\n            column.$$id = id();\r\n        }\r\n        // prop can be numeric; zero is valid not a missing prop\r\n        // translate name => prop\r\n        if (isNullOrUndefined(column.prop) && column.name) {\r\n            column.prop = camelCase(column.name);\r\n        }\r\n        if (!column.$$valueGetter) {\r\n            column.$$valueGetter = getterForProp(column.prop);\r\n        }\r\n        // format props if no name passed\r\n        if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n            column.name = deCamelCase(String(column.prop));\r\n        }\r\n        if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\r\n            column.name = ''; // Fixes IE and Edge displaying `null`\r\n        }\r\n        if (!column.hasOwnProperty('resizeable')) {\r\n            column.resizeable = true;\r\n        }\r\n        if (!column.hasOwnProperty('sortable')) {\r\n            column.sortable = true;\r\n        }\r\n        if (!column.hasOwnProperty('draggable')) {\r\n            column.draggable = true;\r\n        }\r\n        if (!column.hasOwnProperty('canAutoResize')) {\r\n            column.canAutoResize = true;\r\n        }\r\n        if (!column.hasOwnProperty('width')) {\r\n            column.width = 150;\r\n        }\r\n        if (!column.hasOwnProperty('isTreeColumn')) {\r\n            column.isTreeColumn = false;\r\n        }\r\n        else {\r\n            if (column.isTreeColumn && !treeColumnFound) {\r\n                // If the first column with isTreeColumn is true found\r\n                // we mark that treeCoulmn is found\r\n                treeColumnFound = true;\r\n            }\r\n            else {\r\n                // After that isTreeColumn property for any other column\r\n                // will be set as false\r\n                column.isTreeColumn = false;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\n/**\r\n * Translates templates definitions to objects\r\n */\r\nfunction translateTemplates(templates) {\r\n    const result = [];\r\n    for (const temp of templates) {\r\n        const col = {};\r\n        const props = Object.getOwnPropertyNames(temp);\r\n        for (const prop of props) {\r\n            col[prop] = temp[prop];\r\n        }\r\n        if (temp.headerTemplate) {\r\n            col.headerTemplate = temp.headerTemplate;\r\n        }\r\n        if (temp.cellTemplate) {\r\n            col.cellTemplate = temp.cellTemplate;\r\n        }\r\n        if (temp.summaryFunc) {\r\n            col.summaryFunc = temp.summaryFunc;\r\n        }\r\n        if (temp.summaryTemplate) {\r\n            col.summaryTemplate = temp.summaryTemplate;\r\n        }\r\n        result.push(col);\r\n    }\r\n    return result;\r\n}\r\n\r\nvar ColumnMode;\r\n(function (ColumnMode) {\r\n    ColumnMode[\"standard\"] = \"standard\";\r\n    ColumnMode[\"flex\"] = \"flex\";\r\n    ColumnMode[\"force\"] = \"force\";\r\n})(ColumnMode || (ColumnMode = {}));\r\n\r\nvar SelectionType;\r\n(function (SelectionType) {\r\n    SelectionType[\"single\"] = \"single\";\r\n    SelectionType[\"multi\"] = \"multi\";\r\n    SelectionType[\"multiClick\"] = \"multiClick\";\r\n    SelectionType[\"cell\"] = \"cell\";\r\n    SelectionType[\"checkbox\"] = \"checkbox\";\r\n})(SelectionType || (SelectionType = {}));\r\n\r\nvar SortType;\r\n(function (SortType) {\r\n    SortType[\"single\"] = \"single\";\r\n    SortType[\"multi\"] = \"multi\";\r\n})(SortType || (SortType = {}));\r\n\r\nvar ContextmenuType;\r\n(function (ContextmenuType) {\r\n    ContextmenuType[\"header\"] = \"header\";\r\n    ContextmenuType[\"body\"] = \"body\";\r\n})(ContextmenuType || (ContextmenuType = {}));\r\n\r\nlet DataTableColumnHeaderDirective = class DataTableColumnHeaderDirective {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n};\r\nDataTableColumnHeaderDirective.ɵfac = function DataTableColumnHeaderDirective_Factory(t) { return new (t || DataTableColumnHeaderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nDataTableColumnHeaderDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnHeaderDirective, selectors: [[\"\", \"ngx-datatable-header-template\", \"\"]] });\r\nDataTableColumnHeaderDirective.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n\r\nlet DataTableColumnCellDirective = class DataTableColumnCellDirective {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n};\r\nDataTableColumnCellDirective.ɵfac = function DataTableColumnCellDirective_Factory(t) { return new (t || DataTableColumnCellDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nDataTableColumnCellDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnCellDirective, selectors: [[\"\", \"ngx-datatable-cell-template\", \"\"]] });\r\nDataTableColumnCellDirective.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n\r\nlet DataTableColumnCellTreeToggle = class DataTableColumnCellTreeToggle {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n};\r\nDataTableColumnCellTreeToggle.ɵfac = function DataTableColumnCellTreeToggle_Factory(t) { return new (t || DataTableColumnCellTreeToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nDataTableColumnCellTreeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnCellTreeToggle, selectors: [[\"\", \"ngx-datatable-tree-toggle\", \"\"]] });\r\nDataTableColumnCellTreeToggle.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n\r\nlet DataTableColumnDirective = class DataTableColumnDirective {\r\n    constructor(columnChangesService) {\r\n        this.columnChangesService = columnChangesService;\r\n        this.isFirstChange = true;\r\n    }\r\n    get cellTemplate() {\r\n        return this._cellTemplateInput || this._cellTemplateQuery;\r\n    }\r\n    get headerTemplate() {\r\n        return this._headerTemplateInput || this._headerTemplateQuery;\r\n    }\r\n    get treeToggleTemplate() {\r\n        return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\r\n    }\r\n    ngOnChanges() {\r\n        if (this.isFirstChange) {\r\n            this.isFirstChange = false;\r\n        }\r\n        else {\r\n            this.columnChangesService.onInputChange();\r\n        }\r\n    }\r\n};\r\nDataTableColumnDirective.ɵfac = function DataTableColumnDirective_Factory(t) { return new (t || DataTableColumnDirective)(ɵngcc0.ɵɵdirectiveInject(ColumnChangesService)); };\r\nDataTableColumnDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnDirective, selectors: [[\"ngx-datatable-column\"]], contentQueries: function DataTableColumnDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DataTableColumnCellDirective, 7, TemplateRef);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DataTableColumnHeaderDirective, 7, TemplateRef);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DataTableColumnCellTreeToggle, 7, TemplateRef);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._cellTemplateQuery = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerTemplateQuery = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._treeToggleTemplateQuery = _t.first);\r\n    } }, inputs: { name: \"name\", prop: \"prop\", frozenLeft: \"frozenLeft\", frozenRight: \"frozenRight\", flexGrow: \"flexGrow\", resizeable: \"resizeable\", comparator: \"comparator\", pipe: \"pipe\", sortable: \"sortable\", draggable: \"draggable\", canAutoResize: \"canAutoResize\", minWidth: \"minWidth\", width: \"width\", maxWidth: \"maxWidth\", checkboxable: \"checkboxable\", headerCheckboxable: \"headerCheckboxable\", headerClass: \"headerClass\", cellClass: \"cellClass\", isTreeColumn: \"isTreeColumn\", treeLevelIndent: \"treeLevelIndent\", summaryFunc: \"summaryFunc\", summaryTemplate: \"summaryTemplate\", _cellTemplateInput: [\"cellTemplate\", \"_cellTemplateInput\"], _headerTemplateInput: [\"headerTemplate\", \"_headerTemplateInput\"], _treeToggleTemplateInput: [\"treeToggleTemplate\", \"_treeToggleTemplateInput\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nDataTableColumnDirective.ctorParameters = () => [\r\n    { type: ColumnChangesService }\r\n];\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"name\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"prop\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"frozenLeft\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"frozenRight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"flexGrow\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"resizeable\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"comparator\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"pipe\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"sortable\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"draggable\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"canAutoResize\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"minWidth\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"width\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"maxWidth\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"checkboxable\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"headerCheckboxable\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"headerClass\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"cellClass\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"isTreeColumn\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"treeLevelIndent\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"summaryFunc\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableColumnDirective.prototype, \"summaryTemplate\", void 0);\r\n__decorate([\r\n    Input('cellTemplate')\r\n], DataTableColumnDirective.prototype, \"_cellTemplateInput\", void 0);\r\n__decorate([\r\n    ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })\r\n], DataTableColumnDirective.prototype, \"_cellTemplateQuery\", void 0);\r\n__decorate([\r\n    Input('headerTemplate')\r\n], DataTableColumnDirective.prototype, \"_headerTemplateInput\", void 0);\r\n__decorate([\r\n    ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })\r\n], DataTableColumnDirective.prototype, \"_headerTemplateQuery\", void 0);\r\n__decorate([\r\n    Input('treeToggleTemplate')\r\n], DataTableColumnDirective.prototype, \"_treeToggleTemplateInput\", void 0);\r\n__decorate([\r\n    ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })\r\n], DataTableColumnDirective.prototype, \"_treeToggleTemplateQuery\", void 0);\r\n\r\nlet DatatableRowDetailTemplateDirective = class DatatableRowDetailTemplateDirective {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n};\r\nDatatableRowDetailTemplateDirective.ɵfac = function DatatableRowDetailTemplateDirective_Factory(t) { return new (t || DatatableRowDetailTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nDatatableRowDetailTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DatatableRowDetailTemplateDirective, selectors: [[\"\", \"ngx-datatable-row-detail-template\", \"\"]] });\r\nDatatableRowDetailTemplateDirective.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n\r\nlet DatatableRowDetailDirective = class DatatableRowDetailDirective {\r\n    constructor() {\r\n        /**\r\n         * The detail row height is required especially\r\n         * when virtual scroll is enabled.\r\n         */\r\n        this.rowHeight = 0;\r\n        /**\r\n         * Row detail row visbility was toggled.\r\n         */\r\n        this.toggle = new EventEmitter();\r\n    }\r\n    get template() {\r\n        return this._templateInput || this._templateQuery;\r\n    }\r\n    /**\r\n     * Toggle the expansion of the row\r\n     */\r\n    toggleExpandRow(row) {\r\n        this.toggle.emit({\r\n            type: 'row',\r\n            value: row\r\n        });\r\n    }\r\n    /**\r\n     * API method to expand all the rows.\r\n     */\r\n    expandAllRows() {\r\n        this.toggle.emit({\r\n            type: 'all',\r\n            value: true\r\n        });\r\n    }\r\n    /**\r\n     * API method to collapse all the rows.\r\n     */\r\n    collapseAllRows() {\r\n        this.toggle.emit({\r\n            type: 'all',\r\n            value: false\r\n        });\r\n    }\r\n};\r\nDatatableRowDetailDirective.ɵfac = function DatatableRowDetailDirective_Factory(t) { return new (t || DatatableRowDetailDirective)(); };\r\nDatatableRowDetailDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DatatableRowDetailDirective, selectors: [[\"ngx-datatable-row-detail\"]], contentQueries: function DatatableRowDetailDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableRowDetailTemplateDirective, 7, TemplateRef);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\r\n    } }, inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" } });\r\n__decorate([\r\n    Input()\r\n], DatatableRowDetailDirective.prototype, \"rowHeight\", void 0);\r\n__decorate([\r\n    Input('template')\r\n], DatatableRowDetailDirective.prototype, \"_templateInput\", void 0);\r\n__decorate([\r\n    ContentChild(DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true })\r\n], DatatableRowDetailDirective.prototype, \"_templateQuery\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableRowDetailDirective.prototype, \"toggle\", void 0);\r\n\r\nlet DatatableFooterDirective = class DatatableFooterDirective {\r\n    get template() {\r\n        return this._templateInput || this._templateQuery;\r\n    }\r\n};\r\nDatatableFooterDirective.ɵfac = function DatatableFooterDirective_Factory(t) { return new (t || DatatableFooterDirective)(); };\r\nDatatableFooterDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DatatableFooterDirective, selectors: [[\"ngx-datatable-footer\"]], contentQueries: function DatatableFooterDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DataTableFooterTemplateDirective, 5, TemplateRef);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\r\n    } }, inputs: { footerHeight: \"footerHeight\", totalMessage: \"totalMessage\", selectedMessage: \"selectedMessage\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", _templateInput: [\"template\", \"_templateInput\"] } });\r\n__decorate([\r\n    Input()\r\n], DatatableFooterDirective.prototype, \"footerHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableFooterDirective.prototype, \"totalMessage\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableFooterDirective.prototype, \"selectedMessage\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableFooterDirective.prototype, \"pagerLeftArrowIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableFooterDirective.prototype, \"pagerRightArrowIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableFooterDirective.prototype, \"pagerPreviousIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableFooterDirective.prototype, \"pagerNextIcon\", void 0);\r\n__decorate([\r\n    Input('template')\r\n], DatatableFooterDirective.prototype, \"_templateInput\", void 0);\r\n__decorate([\r\n    ContentChild(DataTableFooterTemplateDirective, { read: TemplateRef })\r\n], DatatableFooterDirective.prototype, \"_templateQuery\", void 0);\r\n\r\n/**\r\n * Returns the columns by pin.\r\n */\r\nfunction columnsByPin(cols) {\r\n    const ret = {\r\n        left: [],\r\n        center: [],\r\n        right: []\r\n    };\r\n    if (cols) {\r\n        for (const col of cols) {\r\n            if (col.frozenLeft) {\r\n                ret.left.push(col);\r\n            }\r\n            else if (col.frozenRight) {\r\n                ret.right.push(col);\r\n            }\r\n            else {\r\n                ret.center.push(col);\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * Returns the widths of all group sets of a column\r\n */\r\nfunction columnGroupWidths(groups, all) {\r\n    return {\r\n        left: columnTotalWidth(groups.left),\r\n        center: columnTotalWidth(groups.center),\r\n        right: columnTotalWidth(groups.right),\r\n        total: Math.floor(columnTotalWidth(all))\r\n    };\r\n}\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nfunction columnTotalWidth(columns, prop) {\r\n    let totalWidth = 0;\r\n    if (columns) {\r\n        for (const c of columns) {\r\n            const has = prop && c[prop];\r\n            const width = has ? c[prop] : c.width;\r\n            totalWidth = totalWidth + parseFloat(width);\r\n        }\r\n    }\r\n    return totalWidth;\r\n}\r\n/**\r\n * Calculates the total width of all columns and their groups\r\n */\r\nfunction columnsTotalWidth(columns, prop) {\r\n    let totalWidth = 0;\r\n    for (const column of columns) {\r\n        const has = prop && column[prop];\r\n        totalWidth = totalWidth + (has ? column[prop] : column.width);\r\n    }\r\n    return totalWidth;\r\n}\r\nfunction columnsByPinArr(val) {\r\n    const colsByPinArr = [];\r\n    const colsByPin = columnsByPin(val);\r\n    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\r\n    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\r\n    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\r\n    return colsByPinArr;\r\n}\r\n\r\n/**\r\n * This object contains the cache of the various row heights that are present inside\r\n * the data table.   Its based on Fenwick tree data structure that helps with\r\n * querying sums that have time complexity of log n.\r\n *\r\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\r\n * https://github.com/mikolalysenko/fenwick-tree\r\n *\r\n */\r\nclass RowHeightCache {\r\n    constructor() {\r\n        /**\r\n         * Tree Array stores the cumulative information of the row heights to perform efficient\r\n         * range queries and updates.  Currently the tree is initialized to the base row\r\n         * height instead of the detail row height.\r\n         */\r\n        this.treeArray = [];\r\n    }\r\n    /**\r\n     * Clear the Tree array.\r\n     */\r\n    clearCache() {\r\n        this.treeArray = [];\r\n    }\r\n    /**\r\n     * Initialize the Fenwick tree with row Heights.\r\n     *\r\n     * @param rows The array of rows which contain the expanded status.\r\n     * @param rowHeight The row height.\r\n     * @param detailRowHeight The detail row height.\r\n     */\r\n    initCache(details) {\r\n        const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\r\n        const isFn = typeof rowHeight === 'function';\r\n        const isDetailFn = typeof detailRowHeight === 'function';\r\n        if (!isFn && isNaN(rowHeight)) {\r\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\r\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\r\n        }\r\n        // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\r\n        if (!isDetailFn && isNaN(detailRowHeight)) {\r\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\r\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\r\n        }\r\n        const n = externalVirtual ? rowCount : rows.length;\r\n        this.treeArray = new Array(n);\r\n        for (let i = 0; i < n; ++i) {\r\n            this.treeArray[i] = 0;\r\n        }\r\n        for (let i = 0; i < n; ++i) {\r\n            const row = rows[i];\r\n            let currentRowHeight = rowHeight;\r\n            if (isFn) {\r\n                currentRowHeight = rowHeight(row);\r\n            }\r\n            // Add the detail row height to the already expanded rows.\r\n            // This is useful for the table that goes through a filter or sort.\r\n            const expanded = rowExpansions.has(row);\r\n            if (row && expanded) {\r\n                if (isDetailFn) {\r\n                    const index = rowIndexes.get(row);\r\n                    currentRowHeight += detailRowHeight(row, index);\r\n                }\r\n                else {\r\n                    currentRowHeight += detailRowHeight;\r\n                }\r\n            }\r\n            this.update(i, currentRowHeight);\r\n        }\r\n    }\r\n    /**\r\n     * Given the ScrollY position i.e. sum, provide the rowIndex\r\n     * that is present in the current view port.  Below handles edge cases.\r\n     */\r\n    getRowIndex(scrollY) {\r\n        if (scrollY === 0)\r\n            return 0;\r\n        return this.calcRowIndex(scrollY);\r\n    }\r\n    /**\r\n     * When a row is expanded or rowHeight is changed, update the height.  This can\r\n     * be utilized in future when Angular Data table supports dynamic row heights.\r\n     */\r\n    update(atRowIndex, byRowHeight) {\r\n        if (!this.treeArray.length) {\r\n            throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\r\n        Row Height cache not initialized.`);\r\n        }\r\n        const n = this.treeArray.length;\r\n        atRowIndex |= 0;\r\n        while (atRowIndex < n) {\r\n            this.treeArray[atRowIndex] += byRowHeight;\r\n            atRowIndex |= atRowIndex + 1;\r\n        }\r\n    }\r\n    /**\r\n     * Range Sum query from 1 to the rowIndex\r\n     */\r\n    query(atIndex) {\r\n        if (!this.treeArray.length) {\r\n            throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\r\n        }\r\n        let sum = 0;\r\n        atIndex |= 0;\r\n        while (atIndex >= 0) {\r\n            sum += this.treeArray[atIndex];\r\n            atIndex = (atIndex & (atIndex + 1)) - 1;\r\n        }\r\n        return sum;\r\n    }\r\n    /**\r\n     * Find the total height between 2 row indexes\r\n     */\r\n    queryBetween(atIndexA, atIndexB) {\r\n        return this.query(atIndexB) - this.query(atIndexA - 1);\r\n    }\r\n    /**\r\n     * Given the ScrollY position i.e. sum, provide the rowIndex\r\n     * that is present in the current view port.\r\n     */\r\n    calcRowIndex(sum) {\r\n        if (!this.treeArray.length)\r\n            return 0;\r\n        let pos = -1;\r\n        const dataLength = this.treeArray.length;\r\n        // Get the highest bit for the block size.\r\n        const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\r\n        for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\r\n            const nextPos = pos + blockSize;\r\n            if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\r\n                sum -= this.treeArray[nextPos];\r\n                pos = nextPos;\r\n            }\r\n        }\r\n        return pos + 1;\r\n    }\r\n}\r\n\r\nconst cache = {};\r\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\r\nconst ɵ0 = function () {\r\n    const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\r\n    const match = typeof styles !== 'undefined'\r\n        ? Array.prototype.slice\r\n            .call(styles)\r\n            .join('')\r\n            .match(/-(moz|webkit|ms)-/)\r\n        : null;\r\n    const pre = match !== null ? match[1] : undefined;\r\n    // tslint:disable-next-line: tsr-detect-non-literal-regexp\r\n    const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\r\n    return dom\r\n        ? {\r\n            dom,\r\n            lowercase: pre,\r\n            css: `-${pre}-`,\r\n            js: pre[0].toUpperCase() + pre.substr(1)\r\n        }\r\n        : undefined;\r\n};\r\n// Get Prefix\r\n// http://davidwalsh.name/vendor-prefix\r\nconst prefix = (ɵ0)();\r\nfunction getVendorPrefixedName(property) {\r\n    const name = camelCase(property);\r\n    if (!cache[name]) {\r\n        if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\r\n            cache[name] = prefix.css + property;\r\n        }\r\n        else if (testStyle[property] !== undefined) {\r\n            cache[name] = property;\r\n        }\r\n    }\r\n    return cache[name];\r\n}\r\n\r\n// browser detection and prefixing tools\r\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\r\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\r\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\r\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\r\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\r\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\r\nfunction translateXY(styles, x, y) {\r\n    if (typeof transform !== 'undefined' && hasCSSTransforms) {\r\n        if (!isSafari && hasCSS3DTransforms) {\r\n            styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\r\n            styles[backfaceVisibility] = 'hidden';\r\n        }\r\n        else {\r\n            styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\r\n        }\r\n    }\r\n    else {\r\n        styles.top = `${y}px`;\r\n        styles.left = `${x}px`;\r\n    }\r\n}\r\n\r\nlet DataTableBodyComponent = class DataTableBodyComponent {\r\n    /**\r\n     * Creates an instance of DataTableBodyComponent.\r\n     */\r\n    constructor(cd) {\r\n        this.cd = cd;\r\n        this.selected = [];\r\n        this.scroll = new EventEmitter();\r\n        this.page = new EventEmitter();\r\n        this.activate = new EventEmitter();\r\n        this.select = new EventEmitter();\r\n        this.detailToggle = new EventEmitter();\r\n        this.rowContextmenu = new EventEmitter(false);\r\n        this.treeAction = new EventEmitter();\r\n        this.rowHeightsCache = new RowHeightCache();\r\n        this.temp = [];\r\n        this.offsetY = 0;\r\n        this.indexes = {};\r\n        this.rowIndexes = new WeakMap();\r\n        this.rowExpansions = [];\r\n        /**\r\n         * Get the height of the detail row.\r\n         */\r\n        this.getDetailRowHeight = (row, index) => {\r\n            if (!this.rowDetail) {\r\n                return 0;\r\n            }\r\n            const rowHeight = this.rowDetail.rowHeight;\r\n            return typeof rowHeight === 'function' ? rowHeight(row, index) : rowHeight;\r\n        };\r\n        // declare fn here so we can get access to the `this` property\r\n        this.rowTrackingFn = (index, row) => {\r\n            const idx = this.getRowIndex(row);\r\n            if (this.trackByProp) {\r\n                return row[this.trackByProp];\r\n            }\r\n            else {\r\n                return idx;\r\n            }\r\n        };\r\n    }\r\n    set pageSize(val) {\r\n        this._pageSize = val;\r\n        this.recalcLayout();\r\n    }\r\n    get pageSize() {\r\n        return this._pageSize;\r\n    }\r\n    set rows(val) {\r\n        this._rows = val;\r\n        this.recalcLayout();\r\n    }\r\n    get rows() {\r\n        return this._rows;\r\n    }\r\n    set columns(val) {\r\n        this._columns = val;\r\n        const colsByPin = columnsByPin(val);\r\n        this.columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n    }\r\n    get columns() {\r\n        return this._columns;\r\n    }\r\n    set offset(val) {\r\n        this._offset = val;\r\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization))\r\n            this.recalcLayout();\r\n    }\r\n    get offset() {\r\n        return this._offset;\r\n    }\r\n    set rowCount(val) {\r\n        this._rowCount = val;\r\n        this.recalcLayout();\r\n    }\r\n    get rowCount() {\r\n        return this._rowCount;\r\n    }\r\n    get bodyWidth() {\r\n        if (this.scrollbarH) {\r\n            return this.innerWidth + 'px';\r\n        }\r\n        else {\r\n            return '100%';\r\n        }\r\n    }\r\n    set bodyHeight(val) {\r\n        if (this.scrollbarV) {\r\n            this._bodyHeight = val + 'px';\r\n        }\r\n        else {\r\n            this._bodyHeight = 'auto';\r\n        }\r\n        this.recalcLayout();\r\n    }\r\n    get bodyHeight() {\r\n        return this._bodyHeight;\r\n    }\r\n    /**\r\n     * Returns if selection is enabled.\r\n     */\r\n    get selectEnabled() {\r\n        return !!this.selectionType;\r\n    }\r\n    /**\r\n     * Property that would calculate the height of scroll bar\r\n     * based on the row heights cache for virtual scroll and virtualization. Other scenarios\r\n     * calculate scroll height automatically (as height will be undefined).\r\n     */\r\n    get scrollHeight() {\r\n        if (this.scrollbarV && this.virtualization && this.rowCount) {\r\n            return this.rowHeightsCache.query(this.rowCount - 1);\r\n        }\r\n        // avoid TS7030: Not all code paths return a value.\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Called after the constructor, initializing input properties\r\n     */\r\n    ngOnInit() {\r\n        if (this.rowDetail) {\r\n            this.listener = this.rowDetail.toggle.subscribe(({ type, value }) => {\r\n                if (type === 'row') {\r\n                    this.toggleRowExpansion(value);\r\n                }\r\n                if (type === 'all') {\r\n                    this.toggleAllRows(value);\r\n                }\r\n                // Refresh rows after toggle\r\n                // Fixes #883\r\n                this.updateIndexes();\r\n                this.updateRows();\r\n                this.cd.markForCheck();\r\n            });\r\n        }\r\n        if (this.groupHeader) {\r\n            this.listener = this.groupHeader.toggle.subscribe(({ type, value }) => {\r\n                if (type === 'group') {\r\n                    this.toggleRowExpansion(value);\r\n                }\r\n                if (type === 'all') {\r\n                    this.toggleAllRows(value);\r\n                }\r\n                // Refresh rows after toggle\r\n                // Fixes #883\r\n                this.updateIndexes();\r\n                this.updateRows();\r\n                this.cd.markForCheck();\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Called once, before the instance is destroyed.\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.rowDetail || this.groupHeader) {\r\n            this.listener.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * Updates the Y offset given a new offset.\r\n     */\r\n    updateOffsetY(offset) {\r\n        // scroller is missing on empty table\r\n        if (!this.scroller) {\r\n            return;\r\n        }\r\n        if (this.scrollbarV && this.virtualization && offset) {\r\n            // First get the row Index that we need to move to.\r\n            const rowIndex = this.pageSize * offset;\r\n            offset = this.rowHeightsCache.query(rowIndex - 1);\r\n        }\r\n        else if (this.scrollbarV && !this.virtualization) {\r\n            offset = 0;\r\n        }\r\n        this.scroller.setOffset(offset || 0);\r\n    }\r\n    /**\r\n     * Body was scrolled, this is mainly useful for\r\n     * when a user is server-side pagination via virtual scroll.\r\n     */\r\n    onBodyScroll(event) {\r\n        const scrollYPos = event.scrollYPos;\r\n        const scrollXPos = event.scrollXPos;\r\n        // if scroll change, trigger update\r\n        // this is mainly used for header cell positions\r\n        if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\r\n            this.scroll.emit({\r\n                offsetY: scrollYPos,\r\n                offsetX: scrollXPos\r\n            });\r\n        }\r\n        this.offsetY = scrollYPos;\r\n        this.offsetX = scrollXPos;\r\n        this.updateIndexes();\r\n        this.updatePage(event.direction);\r\n        this.updateRows();\r\n    }\r\n    /**\r\n     * Updates the page given a direction.\r\n     */\r\n    updatePage(direction) {\r\n        let offset = this.indexes.first / this.pageSize;\r\n        if (direction === 'up') {\r\n            offset = Math.ceil(offset);\r\n        }\r\n        else if (direction === 'down') {\r\n            offset = Math.floor(offset);\r\n        }\r\n        if (direction !== undefined && !isNaN(offset)) {\r\n            this.page.emit({ offset });\r\n        }\r\n    }\r\n    /**\r\n     * Updates the rows in the view port\r\n     */\r\n    updateRows() {\r\n        const { first, last } = this.indexes;\r\n        let rowIndex = first;\r\n        let idx = 0;\r\n        const temp = [];\r\n        // if grouprowsby has been specified treat row paging\r\n        // parameters as group paging parameters ie if limit 10 has been\r\n        // specified treat it as 10 groups rather than 10 rows\r\n        if (this.groupedRows) {\r\n            let maxRowsPerGroup = 3;\r\n            // if there is only one group set the maximum number of\r\n            // rows per group the same as the total number of rows\r\n            if (this.groupedRows.length === 1) {\r\n                maxRowsPerGroup = this.groupedRows[0].value.length;\r\n            }\r\n            while (rowIndex < last && rowIndex < this.groupedRows.length) {\r\n                // Add the groups into this page\r\n                const group = this.groupedRows[rowIndex];\r\n                this.rowIndexes.set(group, rowIndex);\r\n                if (group.value) {\r\n                    // add indexes for each group item\r\n                    group.value.forEach((g, i) => {\r\n                        const _idx = `${rowIndex}-${i}`;\r\n                        this.rowIndexes.set(g, _idx);\r\n                    });\r\n                }\r\n                temp[idx] = group;\r\n                idx++;\r\n                // Group index in this context\r\n                rowIndex++;\r\n            }\r\n        }\r\n        else {\r\n            while (rowIndex < last && rowIndex < this.rowCount) {\r\n                const row = this.rows[rowIndex];\r\n                if (row) {\r\n                    // add indexes for each row\r\n                    this.rowIndexes.set(row, rowIndex);\r\n                    temp[idx] = row;\r\n                }\r\n                idx++;\r\n                rowIndex++;\r\n            }\r\n        }\r\n        this.temp = temp;\r\n    }\r\n    /**\r\n     * Get the row height\r\n     */\r\n    getRowHeight(row) {\r\n        // if its a function return it\r\n        if (typeof this.rowHeight === 'function') {\r\n            return this.rowHeight(row);\r\n        }\r\n        return this.rowHeight;\r\n    }\r\n    /**\r\n     * @param group the group with all rows\r\n     */\r\n    getGroupHeight(group) {\r\n        let rowHeight = 0;\r\n        if (group.value) {\r\n            for (let index = 0; index < group.value.length; index++) {\r\n                rowHeight += this.getRowAndDetailHeight(group.value[index]);\r\n            }\r\n        }\r\n        return rowHeight;\r\n    }\r\n    /**\r\n     * Calculate row height based on the expanded state of the row.\r\n     */\r\n    getRowAndDetailHeight(row) {\r\n        let rowHeight = this.getRowHeight(row);\r\n        const expanded = this.getRowExpanded(row);\r\n        // Adding detail row height if its expanded.\r\n        if (expanded) {\r\n            rowHeight += this.getDetailRowHeight(row);\r\n        }\r\n        return rowHeight;\r\n    }\r\n    /**\r\n     * Calculates the styles for the row so that the rows can be moved in 2D space\r\n     * during virtual scroll inside the DOM.   In the below case the Y position is\r\n     * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\r\n     * 100 px then following styles are generated:\r\n     *\r\n     * transform: translate3d(0px, 0px, 0px);    ->  row0\r\n     * transform: translate3d(0px, 30px, 0px);   ->  row1\r\n     * transform: translate3d(0px, 130px, 0px);  ->  row2\r\n     *\r\n     * Row heights have to be calculated based on the row heights cache as we wont\r\n     * be able to determine which row is of what height before hand.  In the above\r\n     * case the positionY of the translate3d for row2 would be the sum of all the\r\n     * heights of the rows before it (i.e. row0 and row1).\r\n     *\r\n     * @param rows the row that needs to be placed in the 2D space.\r\n     * @returns the CSS3 style to be applied\r\n     *\r\n     * @memberOf DataTableBodyComponent\r\n     */\r\n    getRowsStyles(rows) {\r\n        const styles = {};\r\n        // only add styles for the group if there is a group\r\n        if (this.groupedRows) {\r\n            styles.width = this.columnGroupWidths.total;\r\n        }\r\n        if (this.scrollbarV && this.virtualization) {\r\n            let idx = 0;\r\n            if (this.groupedRows) {\r\n                // Get the latest row rowindex in a group\r\n                const row = rows[rows.length - 1];\r\n                idx = row ? this.getRowIndex(row) : 0;\r\n            }\r\n            else {\r\n                idx = this.getRowIndex(rows);\r\n            }\r\n            // const pos = idx * rowHeight;\r\n            // The position of this row would be the sum of all row heights\r\n            // until the previous row position.\r\n            const pos = this.rowHeightsCache.query(idx - 1);\r\n            translateXY(styles, 0, pos);\r\n        }\r\n        return styles;\r\n    }\r\n    /**\r\n     * Calculate bottom summary row offset for scrollbar mode.\r\n     * For more information about cache and offset calculation\r\n     * see description for `getRowsStyles` method\r\n     *\r\n     * @returns the CSS3 style to be applied\r\n     *\r\n     * @memberOf DataTableBodyComponent\r\n     */\r\n    getBottomSummaryRowStyles() {\r\n        if (!this.scrollbarV || !this.rows || !this.rows.length) {\r\n            return null;\r\n        }\r\n        const styles = { position: 'absolute' };\r\n        const pos = this.rowHeightsCache.query(this.rows.length - 1);\r\n        translateXY(styles, 0, pos);\r\n        return styles;\r\n    }\r\n    /**\r\n     * Hides the loading indicator\r\n     */\r\n    hideIndicator() {\r\n        setTimeout(() => (this.loadingIndicator = false), 500);\r\n    }\r\n    /**\r\n     * Updates the index of the rows in the viewport\r\n     */\r\n    updateIndexes() {\r\n        let first = 0;\r\n        let last = 0;\r\n        if (this.scrollbarV) {\r\n            if (this.virtualization) {\r\n                // Calculation of the first and last indexes will be based on where the\r\n                // scrollY position would be at.  The last index would be the one\r\n                // that shows up inside the view port the last.\r\n                const height = parseInt(this.bodyHeight, 0);\r\n                first = this.rowHeightsCache.getRowIndex(this.offsetY);\r\n                last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\r\n            }\r\n            else {\r\n                // If virtual rows are not needed\r\n                // We render all in one go\r\n                first = 0;\r\n                last = this.rowCount;\r\n            }\r\n        }\r\n        else {\r\n            // The server is handling paging and will pass an array that begins with the\r\n            // element at a specified offset.  first should always be 0 with external paging.\r\n            if (!this.externalPaging) {\r\n                first = Math.max(this.offset * this.pageSize, 0);\r\n            }\r\n            last = Math.min(first + this.pageSize, this.rowCount);\r\n        }\r\n        this.indexes = { first, last };\r\n    }\r\n    /**\r\n     * Refreshes the full Row Height cache.  Should be used\r\n     * when the entire row array state has changed.\r\n     */\r\n    refreshRowHeightCache() {\r\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\r\n            return;\r\n        }\r\n        // clear the previous row height cache if already present.\r\n        // this is useful during sorts, filters where the state of the\r\n        // rows array is changed.\r\n        this.rowHeightsCache.clearCache();\r\n        // Initialize the tree only if there are rows inside the tree.\r\n        if (this.rows && this.rows.length) {\r\n            const rowExpansions = new Set();\r\n            for (const row of this.rows) {\r\n                if (this.getRowExpanded(row)) {\r\n                    rowExpansions.add(row);\r\n                }\r\n            }\r\n            this.rowHeightsCache.initCache({\r\n                rows: this.rows,\r\n                rowHeight: this.rowHeight,\r\n                detailRowHeight: this.getDetailRowHeight,\r\n                externalVirtual: this.scrollbarV && this.externalPaging,\r\n                rowCount: this.rowCount,\r\n                rowIndexes: this.rowIndexes,\r\n                rowExpansions\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Gets the index for the view port\r\n     */\r\n    getAdjustedViewPortIndex() {\r\n        // Capture the row index of the first row that is visible on the viewport.\r\n        // If the scroll bar is just below the row which is highlighted then make that as the\r\n        // first index.\r\n        const viewPortFirstRowIndex = this.indexes.first;\r\n        if (this.scrollbarV && this.virtualization) {\r\n            const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\r\n            return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\r\n        }\r\n        return viewPortFirstRowIndex;\r\n    }\r\n    /**\r\n     * Toggle the Expansion of the row i.e. if the row is expanded then it will\r\n     * collapse and vice versa.   Note that the expanded status is stored as\r\n     * a part of the row object itself as we have to preserve the expanded row\r\n     * status in case of sorting and filtering of the row set.\r\n     */\r\n    toggleRowExpansion(row) {\r\n        // Capture the row index of the first row that is visible on the viewport.\r\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n        const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\r\n        const expanded = rowExpandedIdx > -1;\r\n        // If the detailRowHeight is auto --> only in case of non-virtualized scroll\r\n        if (this.scrollbarV && this.virtualization) {\r\n            const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\r\n            // const idx = this.rowIndexes.get(row) || 0;\r\n            const idx = this.getRowIndex(row);\r\n            this.rowHeightsCache.update(idx, detailRowHeight);\r\n        }\r\n        // Update the toggled row and update thive nevere heights in the cache.\r\n        if (expanded) {\r\n            this.rowExpansions.splice(rowExpandedIdx, 1);\r\n        }\r\n        else {\r\n            this.rowExpansions.push(row);\r\n        }\r\n        this.detailToggle.emit({\r\n            rows: [row],\r\n            currentIndex: viewPortFirstRowIndex\r\n        });\r\n    }\r\n    /**\r\n     * Expand/Collapse all the rows no matter what their state is.\r\n     */\r\n    toggleAllRows(expanded) {\r\n        // clear prev expansions\r\n        this.rowExpansions = [];\r\n        // Capture the row index of the first row that is visible on the viewport.\r\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\r\n        if (expanded) {\r\n            for (const row of this.rows) {\r\n                this.rowExpansions.push(row);\r\n            }\r\n        }\r\n        if (this.scrollbarV) {\r\n            // Refresh the full row heights cache since every row was affected.\r\n            this.recalcLayout();\r\n        }\r\n        // Emit all rows that have been expanded.\r\n        this.detailToggle.emit({\r\n            rows: this.rows,\r\n            currentIndex: viewPortFirstRowIndex\r\n        });\r\n    }\r\n    /**\r\n     * Recalculates the table\r\n     */\r\n    recalcLayout() {\r\n        this.refreshRowHeightCache();\r\n        this.updateIndexes();\r\n        this.updateRows();\r\n    }\r\n    /**\r\n     * Tracks the column\r\n     */\r\n    columnTrackingFn(index, column) {\r\n        return column.$$id;\r\n    }\r\n    /**\r\n     * Gets the row pinning group styles\r\n     */\r\n    stylesByGroup(group) {\r\n        const widths = this.columnGroupWidths;\r\n        const offsetX = this.offsetX;\r\n        const styles = {\r\n            width: `${widths[group]}px`\r\n        };\r\n        if (group === 'left') {\r\n            translateXY(styles, offsetX, 0);\r\n        }\r\n        else if (group === 'right') {\r\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n            const totalDiff = widths.total - bodyWidth;\r\n            const offsetDiff = totalDiff - offsetX;\r\n            const offset = offsetDiff * -1;\r\n            translateXY(styles, offset, 0);\r\n        }\r\n        return styles;\r\n    }\r\n    /**\r\n     * Returns if the row was expanded and set default row expansion when row expansion is empty\r\n     */\r\n    getRowExpanded(row) {\r\n        if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\r\n            for (const group of this.groupedRows) {\r\n                this.rowExpansions.push(group);\r\n            }\r\n        }\r\n        return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\r\n    }\r\n    getRowExpandedIdx(row, expanded) {\r\n        if (!expanded || !expanded.length)\r\n            return -1;\r\n        const rowId = this.rowIdentity(row);\r\n        return expanded.findIndex(r => {\r\n            const id = this.rowIdentity(r);\r\n            return id === rowId;\r\n        });\r\n    }\r\n    /**\r\n     * Gets the row index given a row\r\n     */\r\n    getRowIndex(row) {\r\n        return this.rowIndexes.get(row) || 0;\r\n    }\r\n    onTreeAction(row) {\r\n        this.treeAction.emit({ row });\r\n    }\r\n};\r\nDataTableBodyComponent.ɵfac = function DataTableBodyComponent_Factory(t) { return new (t || DataTableBodyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\r\nDataTableBodyComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableBodyComponent, selectors: [[\"datatable-body\"]], viewQuery: function DataTableBodyComponent_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(ScrollerComponent, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\r\n    } }, hostAttrs: [1, \"datatable-body\"], hostVars: 4, hostBindings: function DataTableBodyComponent_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.bodyWidth)(\"height\", ctx.bodyHeight);\r\n    } }, inputs: { selected: \"selected\", pageSize: \"pageSize\", rows: \"rows\", columns: \"columns\", offset: \"offset\", rowCount: \"rowCount\", bodyHeight: \"bodyHeight\", offsetX: \"offsetX\", loadingIndicator: \"loadingIndicator\", scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", externalPaging: \"externalPaging\", rowHeight: \"rowHeight\", emptyMessage: \"emptyMessage\", selectionType: \"selectionType\", rowIdentity: \"rowIdentity\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", trackByProp: \"trackByProp\", rowClass: \"rowClass\", groupedRows: \"groupedRows\", groupExpansionDefault: \"groupExpansionDefault\", innerWidth: \"innerWidth\", groupRowsBy: \"groupRowsBy\", virtualization: \"virtualization\", summaryRow: \"summaryRow\", summaryPosition: \"summaryPosition\", summaryHeight: \"summaryHeight\" }, outputs: { scroll: \"scroll\", page: \"page\", activate: \"activate\", select: \"select\", detailToggle: \"detailToggle\", rowContextmenu: \"rowContextmenu\", treeAction: \"treeAction\" }, decls: 5, vars: 9, consts: [[4, \"ngIf\"], [3, \"selected\", \"rows\", \"selectCheck\", \"selectEnabled\", \"selectionType\", \"rowIdentity\", \"select\", \"activate\"], [\"selector\", \"\"], [3, \"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\", \"scroll\", 4, \"ngIf\"], [\"class\", \"empty-row\", 3, \"innerHTML\", 4, \"ngIf\"], [3, \"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\", \"scroll\"], [3, \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\", 4, \"ngIf\"], [3, \"groupedRows\", \"innerWidth\", \"ngStyle\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"expanded\", \"rowIndex\", \"rowContextmenu\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\", \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\", 4, \"ngIf\"], [3, \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\"], [3, \"groupedRows\", \"innerWidth\", \"ngStyle\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"expanded\", \"rowIndex\", \"rowContextmenu\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", \"expanded\", \"rowClass\", \"displayCheck\", \"treeStatus\", \"treeAction\", \"activate\", 4, \"ngIf\", \"ngIfElse\"], [\"groupedRowsTemplate\", \"\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", \"expanded\", \"rowClass\", \"displayCheck\", \"treeStatus\", \"treeAction\", \"activate\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"group\", \"rowIndex\", \"expanded\", \"rowClass\", \"activate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"group\", \"rowIndex\", \"expanded\", \"rowClass\", \"activate\"], [3, \"ngStyle\", \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\"], [1, \"empty-row\", 3, \"innerHTML\"]], template: function DataTableBodyComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵtemplate(0, DataTableBodyComponent_datatable_progress_0_Template, 1, 0, \"datatable-progress\", 0);\r\n        ɵngcc0.ɵɵelementStart(1, \"datatable-selection\", 1, 2);\r\n        ɵngcc0.ɵɵlistener(\"select\", function DataTableBodyComponent_Template_datatable_selection_select_1_listener($event) { return ctx.select.emit($event); })(\"activate\", function DataTableBodyComponent_Template_datatable_selection_activate_1_listener($event) { return ctx.activate.emit($event); });\r\n        ɵngcc0.ɵɵtemplate(3, DataTableBodyComponent_datatable_scroller_3_Template, 4, 8, \"datatable-scroller\", 3);\r\n        ɵngcc0.ɵɵtemplate(4, DataTableBodyComponent_div_4_Template, 1, 1, \"div\", 4);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.loadingIndicator);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"selected\", ctx.selected)(\"rows\", ctx.rows)(\"selectCheck\", ctx.selectCheck)(\"selectEnabled\", ctx.selectEnabled)(\"selectionType\", ctx.selectionType)(\"rowIdentity\", ctx.rowIdentity);\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.rows == null ? null : ctx.rows.length);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", !(ctx.rows == null ? null : ctx.rows.length) && !ctx.loadingIndicator);\r\n    } }, directives: function () { return [ɵngcc1.NgIf, DataTableSelectionComponent, ProgressBarComponent, ScrollerComponent, ɵngcc1.NgForOf, DataTableSummaryRowComponent, DataTableRowWrapperComponent, ɵngcc1.NgStyle, DataTableBodyRowComponent]; }, encapsulation: 2, changeDetection: 0 });\r\nDataTableBodyComponent.ctorParameters = () => [\r\n    { type: ChangeDetectorRef }\r\n];\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"scrollbarV\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"scrollbarH\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"loadingIndicator\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"externalPaging\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"rowHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"offsetX\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"emptyMessage\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"selectionType\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"selected\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"rowIdentity\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"rowDetail\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"groupHeader\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"selectCheck\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"displayCheck\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"trackByProp\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"rowClass\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"groupedRows\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"groupExpansionDefault\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"innerWidth\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"groupRowsBy\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"virtualization\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"summaryRow\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"summaryPosition\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"summaryHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"pageSize\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"rows\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"columns\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"offset\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyComponent.prototype, \"rowCount\", null);\r\n__decorate([\r\n    HostBinding('style.width')\r\n], DataTableBodyComponent.prototype, \"bodyWidth\", null);\r\n__decorate([\r\n    Input(),\r\n    HostBinding('style.height')\r\n], DataTableBodyComponent.prototype, \"bodyHeight\", null);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyComponent.prototype, \"scroll\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyComponent.prototype, \"page\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyComponent.prototype, \"activate\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyComponent.prototype, \"select\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyComponent.prototype, \"detailToggle\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyComponent.prototype, \"rowContextmenu\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyComponent.prototype, \"treeAction\", void 0);\r\n__decorate([\r\n    ViewChild(ScrollerComponent)\r\n], DataTableBodyComponent.prototype, \"scroller\", void 0);\r\n\r\nlet DataTableHeaderComponent = class DataTableHeaderComponent {\r\n    constructor(cd) {\r\n        this.cd = cd;\r\n        this.sort = new EventEmitter();\r\n        this.reorder = new EventEmitter();\r\n        this.resize = new EventEmitter();\r\n        this.select = new EventEmitter();\r\n        this.columnContextmenu = new EventEmitter(false);\r\n        this._columnGroupWidths = {\r\n            total: 100\r\n        };\r\n        this._styleByGroup = {\r\n            left: {},\r\n            center: {},\r\n            right: {}\r\n        };\r\n        this.destroyed = false;\r\n    }\r\n    set innerWidth(val) {\r\n        this._innerWidth = val;\r\n        setTimeout(() => {\r\n            if (this._columns) {\r\n                const colByPin = columnsByPin(this._columns);\r\n                this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n                this.setStylesByGroup();\r\n            }\r\n        });\r\n    }\r\n    get innerWidth() {\r\n        return this._innerWidth;\r\n    }\r\n    set headerHeight(val) {\r\n        if (val !== 'auto') {\r\n            this._headerHeight = `${val}px`;\r\n        }\r\n        else {\r\n            this._headerHeight = val;\r\n        }\r\n    }\r\n    get headerHeight() {\r\n        return this._headerHeight;\r\n    }\r\n    set columns(val) {\r\n        this._columns = val;\r\n        const colsByPin = columnsByPin(val);\r\n        this._columnsByPin = columnsByPinArr(val);\r\n        setTimeout(() => {\r\n            this._columnGroupWidths = columnGroupWidths(colsByPin, val);\r\n            this.setStylesByGroup();\r\n        });\r\n    }\r\n    get columns() {\r\n        return this._columns;\r\n    }\r\n    set offsetX(val) {\r\n        this._offsetX = val;\r\n        this.setStylesByGroup();\r\n    }\r\n    get offsetX() {\r\n        return this._offsetX;\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroyed = true;\r\n    }\r\n    onLongPressStart({ event, model }) {\r\n        model.dragging = true;\r\n        this.dragEventTarget = event;\r\n    }\r\n    onLongPressEnd({ event, model }) {\r\n        this.dragEventTarget = event;\r\n        // delay resetting so sort can be\r\n        // prevented if we were dragging\r\n        setTimeout(() => {\r\n            // datatable component creates copies from columns on reorder\r\n            // set dragging to false on new objects\r\n            const column = this._columns.find(c => c.$$id === model.$$id);\r\n            if (column) {\r\n                column.dragging = false;\r\n            }\r\n        }, 5);\r\n    }\r\n    get headerWidth() {\r\n        if (this.scrollbarH) {\r\n            return this.innerWidth + 'px';\r\n        }\r\n        return '100%';\r\n    }\r\n    trackByGroups(index, colGroup) {\r\n        return colGroup.type;\r\n    }\r\n    columnTrackingFn(index, column) {\r\n        return column.$$id;\r\n    }\r\n    onColumnResized(width, column) {\r\n        if (width <= column.minWidth) {\r\n            width = column.minWidth;\r\n        }\r\n        else if (width >= column.maxWidth) {\r\n            width = column.maxWidth;\r\n        }\r\n        this.resize.emit({\r\n            column,\r\n            prevValue: column.width,\r\n            newValue: width\r\n        });\r\n    }\r\n    onColumnReordered({ prevIndex, newIndex, model }) {\r\n        const column = this.getColumn(newIndex);\r\n        column.isTarget = false;\r\n        column.targetMarkerContext = undefined;\r\n        this.reorder.emit({\r\n            column: model,\r\n            prevValue: prevIndex,\r\n            newValue: newIndex\r\n        });\r\n    }\r\n    onTargetChanged({ prevIndex, newIndex, initialIndex }) {\r\n        if (prevIndex || prevIndex === 0) {\r\n            const oldColumn = this.getColumn(prevIndex);\r\n            oldColumn.isTarget = false;\r\n            oldColumn.targetMarkerContext = undefined;\r\n        }\r\n        if (newIndex || newIndex === 0) {\r\n            const newColumn = this.getColumn(newIndex);\r\n            newColumn.isTarget = true;\r\n            if (initialIndex !== newIndex) {\r\n                newColumn.targetMarkerContext = {\r\n                    class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\r\n                };\r\n            }\r\n        }\r\n    }\r\n    getColumn(index) {\r\n        const leftColumnCount = this._columnsByPin[0].columns.length;\r\n        if (index < leftColumnCount) {\r\n            return this._columnsByPin[0].columns[index];\r\n        }\r\n        const centerColumnCount = this._columnsByPin[1].columns.length;\r\n        if (index < leftColumnCount + centerColumnCount) {\r\n            return this._columnsByPin[1].columns[index - leftColumnCount];\r\n        }\r\n        return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\r\n    }\r\n    onSort({ column, prevValue, newValue }) {\r\n        // if we are dragging don't sort!\r\n        if (column.dragging) {\r\n            return;\r\n        }\r\n        const sorts = this.calcNewSorts(column, prevValue, newValue);\r\n        this.sort.emit({\r\n            sorts,\r\n            column,\r\n            prevValue,\r\n            newValue\r\n        });\r\n    }\r\n    calcNewSorts(column, prevValue, newValue) {\r\n        let idx = 0;\r\n        if (!this.sorts) {\r\n            this.sorts = [];\r\n        }\r\n        const sorts = this.sorts.map((s, i) => {\r\n            s = Object.assign({}, s);\r\n            if (s.prop === column.prop) {\r\n                idx = i;\r\n            }\r\n            return s;\r\n        });\r\n        if (newValue === undefined) {\r\n            sorts.splice(idx, 1);\r\n        }\r\n        else if (prevValue) {\r\n            sorts[idx].dir = newValue;\r\n        }\r\n        else {\r\n            if (this.sortType === SortType.single) {\r\n                sorts.splice(0, this.sorts.length);\r\n            }\r\n            sorts.push({ dir: newValue, prop: column.prop });\r\n        }\r\n        return sorts;\r\n    }\r\n    setStylesByGroup() {\r\n        this._styleByGroup.left = this.calcStylesByGroup('left');\r\n        this._styleByGroup.center = this.calcStylesByGroup('center');\r\n        this._styleByGroup.right = this.calcStylesByGroup('right');\r\n        if (!this.destroyed) {\r\n            this.cd.detectChanges();\r\n        }\r\n    }\r\n    calcStylesByGroup(group) {\r\n        const widths = this._columnGroupWidths;\r\n        const offsetX = this.offsetX;\r\n        const styles = {\r\n            width: `${widths[group]}px`\r\n        };\r\n        if (group === 'center') {\r\n            translateXY(styles, offsetX * -1, 0);\r\n        }\r\n        else if (group === 'right') {\r\n            const totalDiff = widths.total - this.innerWidth;\r\n            const offset = totalDiff * -1;\r\n            translateXY(styles, offset, 0);\r\n        }\r\n        return styles;\r\n    }\r\n};\r\nDataTableHeaderComponent.ɵfac = function DataTableHeaderComponent_Factory(t) { return new (t || DataTableHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\r\nDataTableHeaderComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableHeaderComponent, selectors: [[\"datatable-header\"]], hostAttrs: [1, \"datatable-header\"], hostVars: 4, hostBindings: function DataTableHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx.headerHeight)(\"width\", ctx.headerWidth);\r\n    } }, inputs: { innerWidth: \"innerWidth\", headerHeight: \"headerHeight\", columns: \"columns\", offsetX: \"offsetX\", sorts: \"sorts\", sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", scrollbarH: \"scrollbarH\", dealsWithGroup: \"dealsWithGroup\", targetMarkerTemplate: \"targetMarkerTemplate\", sortType: \"sortType\", allRowsSelected: \"allRowsSelected\", selectionType: \"selectionType\", reorderable: \"reorderable\" }, outputs: { sort: \"sort\", reorder: \"reorder\", resize: \"resize\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, decls: 2, vars: 4, consts: [[\"orderable\", \"\", 1, \"datatable-header-inner\", 3, \"reorder\", \"targetChanged\"], [3, \"class\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\"], [\"resizeable\", \"\", \"long-press\", \"\", \"draggable\", \"\", 3, \"resizeEnabled\", \"pressModel\", \"pressEnabled\", \"dragX\", \"dragY\", \"dragModel\", \"dragEventTarget\", \"headerHeight\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"column\", \"sortType\", \"sorts\", \"selectionType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"allRowsSelected\", \"resize\", \"longPressStart\", \"longPressEnd\", \"sort\", \"select\", \"columnContextmenu\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"resizeable\", \"\", \"long-press\", \"\", \"draggable\", \"\", 3, \"resizeEnabled\", \"pressModel\", \"pressEnabled\", \"dragX\", \"dragY\", \"dragModel\", \"dragEventTarget\", \"headerHeight\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"column\", \"sortType\", \"sorts\", \"selectionType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"allRowsSelected\", \"resize\", \"longPressStart\", \"longPressEnd\", \"sort\", \"select\", \"columnContextmenu\"]], template: function DataTableHeaderComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\r\n        ɵngcc0.ɵɵlistener(\"reorder\", function DataTableHeaderComponent_Template_div_reorder_0_listener($event) { return ctx.onColumnReordered($event); })(\"targetChanged\", function DataTableHeaderComponent_Template_div_targetChanged_0_listener($event) { return ctx.onTargetChanged($event); });\r\n        ɵngcc0.ɵɵtemplate(1, DataTableHeaderComponent_div_1_Template, 2, 5, \"div\", 1);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._columnGroupWidths.total, \"px\");\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._columnsByPin)(\"ngForTrackBy\", ctx.trackByGroups);\r\n    } }, directives: function () { return [OrderableDirective, ɵngcc1.NgForOf, ɵngcc1.NgStyle, DataTableHeaderCellComponent, ResizeableDirective, LongPressDirective, DraggableDirective]; }, encapsulation: 2, changeDetection: 0 });\r\nDataTableHeaderComponent.ctorParameters = () => [\r\n    { type: ChangeDetectorRef }\r\n];\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"sortAscendingIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"sortDescendingIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"scrollbarH\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"dealsWithGroup\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"targetMarkerTemplate\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"innerWidth\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"sorts\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"sortType\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"allRowsSelected\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"selectionType\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"reorderable\", void 0);\r\n__decorate([\r\n    HostBinding('style.height'),\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"headerHeight\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"columns\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderComponent.prototype, \"offsetX\", null);\r\n__decorate([\r\n    Output()\r\n], DataTableHeaderComponent.prototype, \"sort\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableHeaderComponent.prototype, \"reorder\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableHeaderComponent.prototype, \"resize\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableHeaderComponent.prototype, \"select\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableHeaderComponent.prototype, \"columnContextmenu\", void 0);\r\n__decorate([\r\n    HostBinding('style.width')\r\n], DataTableHeaderComponent.prototype, \"headerWidth\", null);\r\n\r\n/**\r\n * Throttle a function\r\n */\r\nfunction throttle(func, wait, options) {\r\n    options = options || {};\r\n    let context;\r\n    let args;\r\n    let result;\r\n    let timeout = null;\r\n    let previous = 0;\r\n    function later() {\r\n        previous = options.leading === false ? 0 : +new Date();\r\n        timeout = null;\r\n        result = func.apply(context, args);\r\n    }\r\n    return function () {\r\n        const now = +new Date();\r\n        if (!previous && options.leading === false) {\r\n            previous = now;\r\n        }\r\n        const remaining = wait - (now - previous);\r\n        context = this;\r\n        args = arguments;\r\n        if (remaining <= 0) {\r\n            clearTimeout(timeout);\r\n            timeout = null;\r\n            previous = now;\r\n            result = func.apply(context, args);\r\n        }\r\n        else if (!timeout && options.trailing !== false) {\r\n            timeout = setTimeout(later, remaining);\r\n        }\r\n        return result;\r\n    };\r\n}\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nfunction throttleable(duration, options) {\r\n    return function innerDecorator(target, key, descriptor) {\r\n        return {\r\n            configurable: true,\r\n            enumerable: descriptor.enumerable,\r\n            get: function getter() {\r\n                Object.defineProperty(this, key, {\r\n                    configurable: true,\r\n                    enumerable: descriptor.enumerable,\r\n                    value: throttle(descriptor.value, duration, options)\r\n                });\r\n                return this[key];\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n * Calculates the Total Flex Grow\r\n */\r\nfunction getTotalFlexGrow(columns) {\r\n    let totalFlexGrow = 0;\r\n    for (const c of columns) {\r\n        totalFlexGrow += c.flexGrow || 0;\r\n    }\r\n    return totalFlexGrow;\r\n}\r\n/**\r\n * Adjusts the column widths.\r\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\r\n */\r\nfunction adjustColumnWidths(allColumns, expectedWidth) {\r\n    const columnsWidth = columnsTotalWidth(allColumns);\r\n    const totalFlexGrow = getTotalFlexGrow(allColumns);\r\n    const colsByGroup = columnsByPin(allColumns);\r\n    if (columnsWidth !== expectedWidth) {\r\n        scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\r\n    }\r\n}\r\n/**\r\n * Resizes columns based on the flexGrow property, while respecting manually set widths\r\n */\r\nfunction scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {\r\n    // calculate total width and flexgrow points for coulumns that can be resized\r\n    for (const attr in colsByGroup) {\r\n        for (const column of colsByGroup[attr]) {\r\n            if (!column.canAutoResize) {\r\n                maxWidth -= column.width;\r\n                totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\r\n            }\r\n            else {\r\n                column.width = 0;\r\n            }\r\n        }\r\n    }\r\n    const hasMinWidth = {};\r\n    let remainingWidth = maxWidth;\r\n    // resize columns until no width is left to be distributed\r\n    do {\r\n        const widthPerFlexPoint = remainingWidth / totalFlexGrow;\r\n        remainingWidth = 0;\r\n        for (const attr in colsByGroup) {\r\n            for (const column of colsByGroup[attr]) {\r\n                // if the column can be resize and it hasn't reached its minimum width yet\r\n                if (column.canAutoResize && !hasMinWidth[column.prop]) {\r\n                    const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\r\n                    if (column.minWidth !== undefined && newWidth < column.minWidth) {\r\n                        remainingWidth += newWidth - column.minWidth;\r\n                        column.width = column.minWidth;\r\n                        hasMinWidth[column.prop] = true;\r\n                    }\r\n                    else {\r\n                        column.width = newWidth;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } while (remainingWidth !== 0);\r\n}\r\n/**\r\n * Forces the width of the columns to\r\n * distribute equally but overflowing when necessary\r\n *\r\n * Rules:\r\n *\r\n *  - If combined withs are less than the total width of the grid,\r\n *    proportion the widths given the min / max / normal widths to fill the width.\r\n *\r\n *  - If the combined widths, exceed the total width of the grid,\r\n *    use the standard widths.\r\n *\r\n *  - If a column is resized, it should always use that width\r\n *\r\n *  - The proportional widths should never fall below min size if specified.\r\n *\r\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\r\n *    the width should use the original width; not the newly proportioned widths.\r\n */\r\nfunction forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth = 300) {\r\n    const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\r\n        return c.canAutoResize !== false;\r\n    });\r\n    for (const column of columnsToResize) {\r\n        if (!column.$$oldWidth) {\r\n            column.$$oldWidth = column.width;\r\n        }\r\n    }\r\n    let additionWidthPerColumn = 0;\r\n    let exceedsWindow = false;\r\n    let contentWidth = getContentWidth(allColumns, defaultColWidth);\r\n    let remainingWidth = expectedWidth - contentWidth;\r\n    const columnsProcessed = [];\r\n    const remainingWidthLimit = 1; // when to stop\r\n    // This loop takes care of the\r\n    do {\r\n        additionWidthPerColumn = remainingWidth / columnsToResize.length;\r\n        exceedsWindow = contentWidth >= expectedWidth;\r\n        for (const column of columnsToResize) {\r\n            if (exceedsWindow && allowBleed) {\r\n                column.width = column.$$oldWidth || column.width || defaultColWidth;\r\n            }\r\n            else {\r\n                const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\r\n                if (column.minWidth && newSize < column.minWidth) {\r\n                    column.width = column.minWidth;\r\n                    columnsProcessed.push(column);\r\n                }\r\n                else if (column.maxWidth && newSize > column.maxWidth) {\r\n                    column.width = column.maxWidth;\r\n                    columnsProcessed.push(column);\r\n                }\r\n                else {\r\n                    column.width = newSize;\r\n                }\r\n            }\r\n            column.width = Math.max(0, column.width);\r\n        }\r\n        contentWidth = getContentWidth(allColumns);\r\n        remainingWidth = expectedWidth - contentWidth;\r\n        removeProcessedColumns(columnsToResize, columnsProcessed);\r\n    } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\r\n}\r\n/**\r\n * Remove the processed columns from the current active columns.\r\n */\r\nfunction removeProcessedColumns(columnsToResize, columnsProcessed) {\r\n    for (const column of columnsProcessed) {\r\n        const index = columnsToResize.indexOf(column);\r\n        columnsToResize.splice(index, 1);\r\n    }\r\n}\r\n/**\r\n * Gets the width of the columns\r\n */\r\nfunction getContentWidth(allColumns, defaultColWidth = 300) {\r\n    let contentWidth = 0;\r\n    for (const column of allColumns) {\r\n        contentWidth += column.width || defaultColWidth;\r\n    }\r\n    return contentWidth;\r\n}\r\n\r\nvar SortDirection;\r\n(function (SortDirection) {\r\n    SortDirection[\"asc\"] = \"asc\";\r\n    SortDirection[\"desc\"] = \"desc\";\r\n})(SortDirection || (SortDirection = {}));\r\n\r\n/**\r\n * Gets the next sort direction\r\n */\r\nfunction nextSortDir(sortType, current) {\r\n    if (sortType === SortType.single) {\r\n        if (current === SortDirection.asc) {\r\n            return SortDirection.desc;\r\n        }\r\n        else {\r\n            return SortDirection.asc;\r\n        }\r\n    }\r\n    else {\r\n        if (!current) {\r\n            return SortDirection.asc;\r\n        }\r\n        else if (current === SortDirection.asc) {\r\n            return SortDirection.desc;\r\n        }\r\n        else if (current === SortDirection.desc) {\r\n            return undefined;\r\n        }\r\n        // avoid TS7030: Not all code paths return a value.\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Adapted from fueld-ui on 6/216\r\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\r\n */\r\nfunction orderByComparator(a, b) {\r\n    if (a === null || typeof a === 'undefined')\r\n        a = 0;\r\n    if (b === null || typeof b === 'undefined')\r\n        b = 0;\r\n    if (a instanceof Date && b instanceof Date) {\r\n        if (a < b)\r\n            return -1;\r\n        if (a > b)\r\n            return 1;\r\n    }\r\n    else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\r\n        // Convert to string in case of a=0 or b=0\r\n        a = String(a);\r\n        b = String(b);\r\n        // Isn't a number so lowercase the string to properly compare\r\n        if (a.toLowerCase() < b.toLowerCase())\r\n            return -1;\r\n        if (a.toLowerCase() > b.toLowerCase())\r\n            return 1;\r\n    }\r\n    else {\r\n        // Parse strings as numbers to compare properly\r\n        if (parseFloat(a) < parseFloat(b))\r\n            return -1;\r\n        if (parseFloat(a) > parseFloat(b))\r\n            return 1;\r\n    }\r\n    // equal each other\r\n    return 0;\r\n}\r\n/**\r\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\r\n * does not sort the `rows` argument in place\r\n */\r\nfunction sortRows(rows, columns, dirs) {\r\n    if (!rows)\r\n        return [];\r\n    if (!dirs || !dirs.length || !columns)\r\n        return [...rows];\r\n    /**\r\n     * record the row ordering of results from prior sort operations (if applicable)\r\n     * this is necessary to guarantee stable sorting behavior\r\n     */\r\n    const rowToIndexMap = new Map();\r\n    rows.forEach((row, index) => rowToIndexMap.set(row, index));\r\n    const temp = [...rows];\r\n    const cols = columns.reduce((obj, col) => {\r\n        if (col.comparator && typeof col.comparator === 'function') {\r\n            obj[col.prop] = col.comparator;\r\n        }\r\n        return obj;\r\n    }, {});\r\n    // cache valueGetter and compareFn so that they\r\n    // do not need to be looked-up in the sort function body\r\n    const cachedDirs = dirs.map(dir => {\r\n        const prop = dir.prop;\r\n        return {\r\n            prop,\r\n            dir: dir.dir,\r\n            valueGetter: getterForProp(prop),\r\n            compareFn: cols[prop] || orderByComparator\r\n        };\r\n    });\r\n    return temp.sort(function (rowA, rowB) {\r\n        for (const cachedDir of cachedDirs) {\r\n            // Get property and valuegetters for column to be sorted\r\n            const { prop, valueGetter } = cachedDir;\r\n            // Get A and B cell values from rows based on properties of the columns\r\n            const propA = valueGetter(rowA, prop);\r\n            const propB = valueGetter(rowB, prop);\r\n            // Compare function gets five parameters:\r\n            // Two cell values to be compared as propA and propB\r\n            // Two rows corresponding to the cells as rowA and rowB\r\n            // Direction of the sort for this column as SortDirection\r\n            // Compare can be a standard JS comparison function (a,b) => -1|0|1\r\n            // as additional parameters are silently ignored. The whole row and sort\r\n            // direction enable more complex sort logic.\r\n            const comparison = cachedDir.dir !== SortDirection.desc\r\n                ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\r\n                : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\r\n            // Don't return 0 yet in case of needing to sort by next property\r\n            if (comparison !== 0)\r\n                return comparison;\r\n        }\r\n        if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB)))\r\n            return 0;\r\n        /**\r\n         * all else being equal, preserve original order of the rows (stable sort)\r\n         */\r\n        return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\r\n    });\r\n}\r\n\r\nlet DatatableComponent = class DatatableComponent {\r\n    constructor(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {\r\n        this.scrollbarHelper = scrollbarHelper;\r\n        this.dimensionsHelper = dimensionsHelper;\r\n        this.cd = cd;\r\n        this.columnChangesService = columnChangesService;\r\n        this.configuration = configuration;\r\n        /**\r\n         * List of row objects that should be\r\n         * represented as selected in the grid.\r\n         * Default value: `[]`\r\n         */\r\n        this.selected = [];\r\n        /**\r\n         * Enable vertical scrollbars\r\n         */\r\n        this.scrollbarV = false;\r\n        /**\r\n         * Enable horz scrollbars\r\n         */\r\n        this.scrollbarH = false;\r\n        /**\r\n         * The row height; which is necessary\r\n         * to calculate the height for the lazy rendering.\r\n         */\r\n        this.rowHeight = 30;\r\n        /**\r\n         * Type of column width distribution formula.\r\n         * Example: flex, force, standard\r\n         */\r\n        this.columnMode = ColumnMode.standard;\r\n        /**\r\n         * The minimum header height in pixels.\r\n         * Pass a falsey for no header\r\n         */\r\n        this.headerHeight = 30;\r\n        /**\r\n         * The minimum footer height in pixels.\r\n         * Pass falsey for no footer\r\n         */\r\n        this.footerHeight = 0;\r\n        /**\r\n         * If the table should use external paging\r\n         * otherwise its assumed that all data is preloaded.\r\n         */\r\n        this.externalPaging = false;\r\n        /**\r\n         * If the table should use external sorting or\r\n         * the built-in basic sorting.\r\n         */\r\n        this.externalSorting = false;\r\n        /**\r\n         * Show the linear loading bar.\r\n         * Default value: `false`\r\n         */\r\n        this.loadingIndicator = false;\r\n        /**\r\n         * Enable/Disable ability to re-order columns\r\n         * by dragging them.\r\n         */\r\n        this.reorderable = true;\r\n        /**\r\n         * Swap columns on re-order columns or\r\n         * move them.\r\n         */\r\n        this.swapColumns = true;\r\n        /**\r\n         * The type of sorting\r\n         */\r\n        this.sortType = SortType.single;\r\n        /**\r\n         * Array of sorted columns by property and type.\r\n         * Default value: `[]`\r\n         */\r\n        this.sorts = [];\r\n        /**\r\n         * Css class overrides\r\n         */\r\n        this.cssClasses = {\r\n            sortAscending: 'datatable-icon-up',\r\n            sortDescending: 'datatable-icon-down',\r\n            pagerLeftArrow: 'datatable-icon-left',\r\n            pagerRightArrow: 'datatable-icon-right',\r\n            pagerPrevious: 'datatable-icon-prev',\r\n            pagerNext: 'datatable-icon-skip'\r\n        };\r\n        /**\r\n         * Message overrides for localization\r\n         *\r\n         * emptyMessage     [default] = 'No data to display'\r\n         * totalMessage     [default] = 'total'\r\n         * selectedMessage  [default] = 'selected'\r\n         */\r\n        this.messages = {\r\n            // Message to show when array is presented\r\n            // but contains no values\r\n            emptyMessage: 'No data to display',\r\n            // Footer total message\r\n            totalMessage: 'total',\r\n            // Footer selected message\r\n            selectedMessage: 'selected'\r\n        };\r\n        /**\r\n         * A boolean you can use to set the detault behaviour of rows and groups\r\n         * whether they will start expanded or not. If ommited the default is NOT expanded.\r\n         *\r\n         */\r\n        this.groupExpansionDefault = false;\r\n        /**\r\n         * Property to which you can use for determining select all\r\n         * rows on current page or not.\r\n         *\r\n         * @memberOf DatatableComponent\r\n         */\r\n        this.selectAllRowsOnPage = false;\r\n        /**\r\n         * A flag for row virtualization on / off\r\n         */\r\n        this.virtualization = true;\r\n        /**\r\n         * A flag for switching summary row on / off\r\n         */\r\n        this.summaryRow = false;\r\n        /**\r\n         * A height of summary row\r\n         */\r\n        this.summaryHeight = 30;\r\n        /**\r\n         * A property holds a summary row position: top/bottom\r\n         */\r\n        this.summaryPosition = 'top';\r\n        /**\r\n         * Body was scrolled typically in a `scrollbarV:true` scenario.\r\n         */\r\n        this.scroll = new EventEmitter();\r\n        /**\r\n         * A cell or row was focused via keyboard or mouse click.\r\n         */\r\n        this.activate = new EventEmitter();\r\n        /**\r\n         * A cell or row was selected.\r\n         */\r\n        this.select = new EventEmitter();\r\n        /**\r\n         * Column sort was invoked.\r\n         */\r\n        this.sort = new EventEmitter();\r\n        /**\r\n         * The table was paged either triggered by the pager or the body scroll.\r\n         */\r\n        this.page = new EventEmitter();\r\n        /**\r\n         * Columns were re-ordered.\r\n         */\r\n        this.reorder = new EventEmitter();\r\n        /**\r\n         * Column was resized.\r\n         */\r\n        this.resize = new EventEmitter();\r\n        /**\r\n         * The context menu was invoked on the table.\r\n         * type indicates whether the header or the body was clicked.\r\n         * content contains either the column or the row that was clicked.\r\n         */\r\n        this.tableContextmenu = new EventEmitter(false);\r\n        /**\r\n         * A row was expanded ot collapsed for tree\r\n         */\r\n        this.treeAction = new EventEmitter();\r\n        this.rowCount = 0;\r\n        this._offsetX = new BehaviorSubject(0);\r\n        this._count = 0;\r\n        this._offset = 0;\r\n        this._subscriptions = [];\r\n        /**\r\n         * This will be used when displaying or selecting rows.\r\n         * when tracking/comparing them, we'll use the value of this fn,\r\n         *\r\n         * (`fn(x) === fn(y)` instead of `x === y`)\r\n         */\r\n        this.rowIdentity = (x) => {\r\n            if (this._groupRowsBy) {\r\n                // each group in groupedRows are stored as {key, value: [rows]},\r\n                // where key is the groupRowsBy index\r\n                return x.key;\r\n            }\r\n            else {\r\n                return x;\r\n            }\r\n        };\r\n        // get ref to elm for measuring\r\n        this.element = element.nativeElement;\r\n        this.rowDiffer = differs.find({}).create();\r\n        // apply global settings from Module.forRoot\r\n        if (this.configuration && this.configuration.messages) {\r\n            this.messages = Object.assign({}, this.configuration.messages);\r\n        }\r\n    }\r\n    /**\r\n     * Rows that are displayed in the table.\r\n     */\r\n    set rows(val) {\r\n        this._rows = val;\r\n        if (val) {\r\n            this._internalRows = [...val];\r\n        }\r\n        // auto sort on new updates\r\n        if (!this.externalSorting) {\r\n            this.sortInternalRows();\r\n        }\r\n        // auto group by parent on new update\r\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\r\n        // recalculate sizes/etc\r\n        this.recalculate();\r\n        if (this._rows && this._groupRowsBy) {\r\n            // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\r\n            this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\r\n        }\r\n        this.cd.markForCheck();\r\n    }\r\n    /**\r\n     * Gets the rows.\r\n     */\r\n    get rows() {\r\n        return this._rows;\r\n    }\r\n    /**\r\n     * This attribute allows the user to set the name of the column to group the data with\r\n     */\r\n    set groupRowsBy(val) {\r\n        if (val) {\r\n            this._groupRowsBy = val;\r\n            if (this._rows && this._groupRowsBy) {\r\n                // cretes a new array with the data grouped\r\n                this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\r\n            }\r\n        }\r\n    }\r\n    get groupRowsBy() {\r\n        return this._groupRowsBy;\r\n    }\r\n    /**\r\n     * Columns to be displayed.\r\n     */\r\n    set columns(val) {\r\n        if (val) {\r\n            this._internalColumns = [...val];\r\n            setColumnDefaults(this._internalColumns);\r\n            this.recalculateColumns();\r\n        }\r\n        this._columns = val;\r\n    }\r\n    /**\r\n     * Get the columns.\r\n     */\r\n    get columns() {\r\n        return this._columns;\r\n    }\r\n    /**\r\n     * The page size to be shown.\r\n     * Default value: `undefined`\r\n     */\r\n    set limit(val) {\r\n        this._limit = val;\r\n        // recalculate sizes/etc\r\n        this.recalculate();\r\n    }\r\n    /**\r\n     * Gets the limit.\r\n     */\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n    /**\r\n     * The total count of all rows.\r\n     * Default value: `0`\r\n     */\r\n    set count(val) {\r\n        this._count = val;\r\n        // recalculate sizes/etc\r\n        this.recalculate();\r\n    }\r\n    /**\r\n     * Gets the count.\r\n     */\r\n    get count() {\r\n        return this._count;\r\n    }\r\n    /**\r\n     * The current offset ( page - 1 ) shown.\r\n     * Default value: `0`\r\n     */\r\n    set offset(val) {\r\n        this._offset = val;\r\n    }\r\n    get offset() {\r\n        return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\r\n    }\r\n    /**\r\n     * CSS class applied if the header height if fixed height.\r\n     */\r\n    get isFixedHeader() {\r\n        const headerHeight = this.headerHeight;\r\n        return typeof headerHeight === 'string' ? headerHeight !== 'auto' : true;\r\n    }\r\n    /**\r\n     * CSS class applied to the root element if\r\n     * the row heights are fixed heights.\r\n     */\r\n    get isFixedRow() {\r\n        return this.rowHeight !== 'auto';\r\n    }\r\n    /**\r\n     * CSS class applied to root element if\r\n     * vertical scrolling is enabled.\r\n     */\r\n    get isVertScroll() {\r\n        return this.scrollbarV;\r\n    }\r\n    /**\r\n     * CSS class applied to root element if\r\n     * virtualization is enabled.\r\n     */\r\n    get isVirtualized() {\r\n        return this.virtualization;\r\n    }\r\n    /**\r\n     * CSS class applied to the root element\r\n     * if the horziontal scrolling is enabled.\r\n     */\r\n    get isHorScroll() {\r\n        return this.scrollbarH;\r\n    }\r\n    /**\r\n     * CSS class applied to root element is selectable.\r\n     */\r\n    get isSelectable() {\r\n        return this.selectionType !== undefined;\r\n    }\r\n    /**\r\n     * CSS class applied to root is checkbox selection.\r\n     */\r\n    get isCheckboxSelection() {\r\n        return this.selectionType === SelectionType.checkbox;\r\n    }\r\n    /**\r\n     * CSS class applied to root if cell selection.\r\n     */\r\n    get isCellSelection() {\r\n        return this.selectionType === SelectionType.cell;\r\n    }\r\n    /**\r\n     * CSS class applied to root if single select.\r\n     */\r\n    get isSingleSelection() {\r\n        return this.selectionType === SelectionType.single;\r\n    }\r\n    /**\r\n     * CSS class added to root element if mulit select\r\n     */\r\n    get isMultiSelection() {\r\n        return this.selectionType === SelectionType.multi;\r\n    }\r\n    /**\r\n     * CSS class added to root element if mulit click select\r\n     */\r\n    get isMultiClickSelection() {\r\n        return this.selectionType === SelectionType.multiClick;\r\n    }\r\n    /**\r\n     * Column templates gathered from `ContentChildren`\r\n     * if described in your markup.\r\n     */\r\n    set columnTemplates(val) {\r\n        this._columnTemplates = val;\r\n        this.translateColumns(val);\r\n    }\r\n    /**\r\n     * Returns the column templates.\r\n     */\r\n    get columnTemplates() {\r\n        return this._columnTemplates;\r\n    }\r\n    /**\r\n     * Returns if all rows are selected.\r\n     */\r\n    get allRowsSelected() {\r\n        let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\r\n        if (this.bodyComponent && this.selectAllRowsOnPage) {\r\n            const indexes = this.bodyComponent.indexes;\r\n            const rowsOnPage = indexes.last - indexes.first;\r\n            allRowsSelected = this.selected.length === rowsOnPage;\r\n        }\r\n        return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\r\n    }\r\n    /**\r\n     * Lifecycle hook that is called after data-bound\r\n     * properties of a directive are initialized.\r\n     */\r\n    ngOnInit() {\r\n        // need to call this immediatly to size\r\n        // if the table is hidden the visibility\r\n        // listener will invoke this itself upon show\r\n        this.recalculate();\r\n    }\r\n    /**\r\n     * Lifecycle hook that is called after a component's\r\n     * view has been fully initialized.\r\n     */\r\n    ngAfterViewInit() {\r\n        if (!this.externalSorting) {\r\n            this.sortInternalRows();\r\n        }\r\n        // this has to be done to prevent the change detection\r\n        // tree from freaking out because we are readjusting\r\n        if (typeof requestAnimationFrame === 'undefined') {\r\n            return;\r\n        }\r\n        requestAnimationFrame(() => {\r\n            this.recalculate();\r\n            // emit page for virtual server-side kickoff\r\n            if (this.externalPaging && this.scrollbarV) {\r\n                this.page.emit({\r\n                    count: this.count,\r\n                    pageSize: this.pageSize,\r\n                    limit: this.limit,\r\n                    offset: 0\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Lifecycle hook that is called after a component's\r\n     * content has been fully initialized.\r\n     */\r\n    ngAfterContentInit() {\r\n        this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\r\n        this.listenForColumnInputChanges();\r\n    }\r\n    /**\r\n     * Translates the templates to the column objects\r\n     */\r\n    translateColumns(val) {\r\n        if (val) {\r\n            const arr = val.toArray();\r\n            if (arr.length) {\r\n                this._internalColumns = translateTemplates(arr);\r\n                setColumnDefaults(this._internalColumns);\r\n                this.recalculateColumns();\r\n                this.sortInternalRows();\r\n                this.cd.markForCheck();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Creates a map with the data grouped by the user choice of grouping index\r\n     *\r\n     * @param originalArray the original array passed via parameter\r\n     * @param groupByIndex  the index of the column to group the data by\r\n     */\r\n    groupArrayBy(originalArray, groupBy) {\r\n        // create a map to hold groups with their corresponding results\r\n        const map = new Map();\r\n        let i = 0;\r\n        originalArray.forEach((item) => {\r\n            const key = item[groupBy];\r\n            if (!map.has(key)) {\r\n                map.set(key, [item]);\r\n            }\r\n            else {\r\n                map.get(key).push(item);\r\n            }\r\n            i++;\r\n        });\r\n        const addGroup = (key, value) => {\r\n            return { key, value };\r\n        };\r\n        // convert map back to a simple array of objects\r\n        return Array.from(map, x => addGroup(x[0], x[1]));\r\n    }\r\n    /*\r\n     * Lifecycle hook that is called when Angular dirty checks a directive.\r\n     */\r\n    ngDoCheck() {\r\n        if (this.rowDiffer.diff(this.rows)) {\r\n            if (!this.externalSorting) {\r\n                this.sortInternalRows();\r\n            }\r\n            else {\r\n                this._internalRows = [...this.rows];\r\n            }\r\n            // auto group by parent on new update\r\n            this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\r\n            this.recalculatePages();\r\n            this.cd.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Recalc's the sizes of the grid.\r\n     *\r\n     * Updated automatically on changes to:\r\n     *\r\n     *  - Columns\r\n     *  - Rows\r\n     *  - Paging related\r\n     *\r\n     * Also can be manually invoked or upon window resize.\r\n     */\r\n    recalculate() {\r\n        this.recalculateDims();\r\n        this.recalculateColumns();\r\n        this.cd.markForCheck();\r\n    }\r\n    /**\r\n     * Window resize handler to update sizes.\r\n     */\r\n    onWindowResize() {\r\n        this.recalculate();\r\n    }\r\n    /**\r\n     * Recalulcates the column widths based on column width\r\n     * distribution mode and scrollbar offsets.\r\n     */\r\n    recalculateColumns(columns = this._internalColumns, forceIdx = -1, allowBleed = this.scrollbarH) {\r\n        if (!columns)\r\n            return undefined;\r\n        let width = this._innerWidth;\r\n        if (this.scrollbarV) {\r\n            width = width - this.scrollbarHelper.width;\r\n        }\r\n        if (this.columnMode === ColumnMode.force) {\r\n            forceFillColumnWidths(columns, width, forceIdx, allowBleed);\r\n        }\r\n        else if (this.columnMode === ColumnMode.flex) {\r\n            adjustColumnWidths(columns, width);\r\n        }\r\n        return columns;\r\n    }\r\n    /**\r\n     * Recalculates the dimensions of the table size.\r\n     * Internally calls the page size and row count calcs too.\r\n     *\r\n     */\r\n    recalculateDims() {\r\n        const dims = this.dimensionsHelper.getDimensions(this.element);\r\n        this._innerWidth = Math.floor(dims.width);\r\n        if (this.scrollbarV) {\r\n            let height = dims.height;\r\n            if (this.headerHeight)\r\n                height = height - this.headerHeight;\r\n            if (this.footerHeight)\r\n                height = height - this.footerHeight;\r\n            this.bodyHeight = height;\r\n        }\r\n        this.recalculatePages();\r\n    }\r\n    /**\r\n     * Recalculates the pages after a update.\r\n     */\r\n    recalculatePages() {\r\n        this.pageSize = this.calcPageSize();\r\n        this.rowCount = this.calcRowCount();\r\n    }\r\n    /**\r\n     * Body triggered a page event.\r\n     */\r\n    onBodyPage({ offset }) {\r\n        // Avoid pagination caming from body events like scroll when the table\r\n        // has no virtualization and the external paging is enable.\r\n        // This means, let's the developer handle pagination by my him(her) self\r\n        if (this.externalPaging && !this.virtualization) {\r\n            return;\r\n        }\r\n        this.offset = offset;\r\n        this.page.emit({\r\n            count: this.count,\r\n            pageSize: this.pageSize,\r\n            limit: this.limit,\r\n            offset: this.offset\r\n        });\r\n    }\r\n    /**\r\n     * The body triggered a scroll event.\r\n     */\r\n    onBodyScroll(event) {\r\n        this._offsetX.next(event.offsetX);\r\n        this.scroll.emit(event);\r\n        this.cd.detectChanges();\r\n    }\r\n    /**\r\n     * The footer triggered a page event.\r\n     */\r\n    onFooterPage(event) {\r\n        this.offset = event.page - 1;\r\n        this.bodyComponent.updateOffsetY(this.offset);\r\n        this.page.emit({\r\n            count: this.count,\r\n            pageSize: this.pageSize,\r\n            limit: this.limit,\r\n            offset: this.offset\r\n        });\r\n        if (this.selectAllRowsOnPage) {\r\n            this.selected = [];\r\n            this.select.emit({\r\n                selected: this.selected\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Recalculates the sizes of the page\r\n     */\r\n    calcPageSize(val = this.rows) {\r\n        // Keep the page size constant even if the row has been expanded.\r\n        // This is because an expanded row is still considered to be a child of\r\n        // the original row.  Hence calculation would use rowHeight only.\r\n        if (this.scrollbarV && this.virtualization) {\r\n            const size = Math.ceil(this.bodyHeight / this.rowHeight);\r\n            return Math.max(size, 0);\r\n        }\r\n        // if limit is passed, we are paging\r\n        if (this.limit !== undefined) {\r\n            return this.limit;\r\n        }\r\n        // otherwise use row length\r\n        if (val) {\r\n            return val.length;\r\n        }\r\n        // other empty :(\r\n        return 0;\r\n    }\r\n    /**\r\n     * Calculates the row count.\r\n     */\r\n    calcRowCount(val = this.rows) {\r\n        if (!this.externalPaging) {\r\n            if (!val)\r\n                return 0;\r\n            if (this.groupedRows) {\r\n                return this.groupedRows.length;\r\n            }\r\n            else if (this.treeFromRelation != null && this.treeToRelation != null) {\r\n                return this._internalRows.length;\r\n            }\r\n            else {\r\n                return val.length;\r\n            }\r\n        }\r\n        return this.count;\r\n    }\r\n    /**\r\n     * The header triggered a contextmenu event.\r\n     */\r\n    onColumnContextmenu({ event, column }) {\r\n        this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\r\n    }\r\n    /**\r\n     * The body triggered a contextmenu event.\r\n     */\r\n    onRowContextmenu({ event, row }) {\r\n        this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\r\n    }\r\n    /**\r\n     * The header triggered a column resize event.\r\n     */\r\n    onColumnResize({ column, newValue }) {\r\n        /* Safari/iOS 10.2 workaround */\r\n        if (column === undefined) {\r\n            return;\r\n        }\r\n        let idx;\r\n        const cols = this._internalColumns.map((c, i) => {\r\n            c = Object.assign({}, c);\r\n            if (c.$$id === column.$$id) {\r\n                idx = i;\r\n                c.width = newValue;\r\n                // set this so we can force the column\r\n                // width distribution to be to this value\r\n                c.$$oldWidth = newValue;\r\n            }\r\n            return c;\r\n        });\r\n        this.recalculateColumns(cols, idx);\r\n        this._internalColumns = cols;\r\n        this.resize.emit({\r\n            column,\r\n            newValue\r\n        });\r\n    }\r\n    /**\r\n     * The header triggered a column re-order event.\r\n     */\r\n    onColumnReorder({ column, newValue, prevValue }) {\r\n        const cols = this._internalColumns.map(c => {\r\n            return Object.assign({}, c);\r\n        });\r\n        if (this.swapColumns) {\r\n            const prevCol = cols[newValue];\r\n            cols[newValue] = column;\r\n            cols[prevValue] = prevCol;\r\n        }\r\n        else {\r\n            if (newValue > prevValue) {\r\n                const movedCol = cols[prevValue];\r\n                for (let i = prevValue; i < newValue; i++) {\r\n                    cols[i] = cols[i + 1];\r\n                }\r\n                cols[newValue] = movedCol;\r\n            }\r\n            else {\r\n                const movedCol = cols[prevValue];\r\n                for (let i = prevValue; i > newValue; i--) {\r\n                    cols[i] = cols[i - 1];\r\n                }\r\n                cols[newValue] = movedCol;\r\n            }\r\n        }\r\n        this._internalColumns = cols;\r\n        this.reorder.emit({\r\n            column,\r\n            newValue,\r\n            prevValue\r\n        });\r\n    }\r\n    /**\r\n     * The header triggered a column sort event.\r\n     */\r\n    onColumnSort(event) {\r\n        // clean selected rows\r\n        if (this.selectAllRowsOnPage) {\r\n            this.selected = [];\r\n            this.select.emit({\r\n                selected: this.selected\r\n            });\r\n        }\r\n        this.sorts = event.sorts;\r\n        // this could be optimized better since it will resort\r\n        // the rows again on the 'push' detection...\r\n        if (this.externalSorting === false) {\r\n            // don't use normal setter so we don't resort\r\n            this.sortInternalRows();\r\n        }\r\n        // auto group by parent on new update\r\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\r\n        // Always go to first page when sorting to see the newly sorted data\r\n        this.offset = 0;\r\n        this.bodyComponent.updateOffsetY(this.offset);\r\n        this.sort.emit(event);\r\n    }\r\n    /**\r\n     * Toggle all row selection\r\n     */\r\n    onHeaderSelect(event) {\r\n        if (this.bodyComponent && this.selectAllRowsOnPage) {\r\n            // before we splice, chk if we currently have all selected\r\n            const first = this.bodyComponent.indexes.first;\r\n            const last = this.bodyComponent.indexes.last;\r\n            const allSelected = this.selected.length === last - first;\r\n            // remove all existing either way\r\n            this.selected = [];\r\n            // do the opposite here\r\n            if (!allSelected) {\r\n                this.selected.push(...this._internalRows.slice(first, last));\r\n            }\r\n        }\r\n        else {\r\n            // before we splice, chk if we currently have all selected\r\n            const allSelected = this.selected.length === this.rows.length;\r\n            // remove all existing either way\r\n            this.selected = [];\r\n            // do the opposite here\r\n            if (!allSelected) {\r\n                this.selected.push(...this.rows);\r\n            }\r\n        }\r\n        this.select.emit({\r\n            selected: this.selected\r\n        });\r\n    }\r\n    /**\r\n     * A row was selected from body\r\n     */\r\n    onBodySelect(event) {\r\n        this.select.emit(event);\r\n    }\r\n    /**\r\n     * A row was expanded or collapsed for tree\r\n     */\r\n    onTreeAction(event) {\r\n        const row = event.row;\r\n        // TODO: For duplicated items this will not work\r\n        const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\r\n        this.treeAction.emit({ row, rowIndex });\r\n    }\r\n    ngOnDestroy() {\r\n        this._subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n    /**\r\n     * listen for changes to input bindings of all DataTableColumnDirective and\r\n     * trigger the columnTemplates.changes observable to emit\r\n     */\r\n    listenForColumnInputChanges() {\r\n        this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe(() => {\r\n            if (this.columnTemplates) {\r\n                this.columnTemplates.notifyOnChanges();\r\n            }\r\n        }));\r\n    }\r\n    sortInternalRows() {\r\n        this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\r\n    }\r\n};\r\nDatatableComponent.ɵfac = function DatatableComponent_Factory(t) { return new (t || DatatableComponent)(ɵngcc0.ɵɵdirectiveInject(ScrollbarHelper, 4), ɵngcc0.ɵɵdirectiveInject(DimensionsHelper, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ColumnChangesService), ɵngcc0.ɵɵdirectiveInject('configuration', 8)); };\r\nDatatableComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DatatableComponent, selectors: [[\"ngx-datatable\"]], contentQueries: function DatatableComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableRowDetailDirective, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableGroupHeaderDirective, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableFooterDirective, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DataTableColumnDirective, 4);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rowDetail = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupHeader = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footer = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnTemplates = _t);\r\n    } }, viewQuery: function DatatableComponent_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(DataTableBodyComponent, 5);\r\n        ɵngcc0.ɵɵviewQuery(DataTableHeaderComponent, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.bodyComponent = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerComponent = _t.first);\r\n    } }, hostAttrs: [1, \"ngx-datatable\"], hostVars: 22, hostBindings: function DatatableComponent_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"resize\", function DatatableComponent_resize_HostBindingHandler() { return ctx.onWindowResize(); }, false, ɵngcc0.ɵɵresolveWindow);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"fixed-header\", ctx.isFixedHeader)(\"fixed-row\", ctx.isFixedRow)(\"scroll-vertical\", ctx.isVertScroll)(\"virtualized\", ctx.isVirtualized)(\"scroll-horz\", ctx.isHorScroll)(\"selectable\", ctx.isSelectable)(\"checkbox-selection\", ctx.isCheckboxSelection)(\"cell-selection\", ctx.isCellSelection)(\"single-selection\", ctx.isSingleSelection)(\"multi-selection\", ctx.isMultiSelection)(\"multi-click-selection\", ctx.isMultiClickSelection);\r\n    } }, inputs: { selected: \"selected\", scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", rowHeight: \"rowHeight\", columnMode: \"columnMode\", headerHeight: \"headerHeight\", footerHeight: \"footerHeight\", externalPaging: \"externalPaging\", externalSorting: \"externalSorting\", loadingIndicator: \"loadingIndicator\", reorderable: \"reorderable\", swapColumns: \"swapColumns\", sortType: \"sortType\", sorts: \"sorts\", cssClasses: \"cssClasses\", messages: \"messages\", groupExpansionDefault: \"groupExpansionDefault\", selectAllRowsOnPage: \"selectAllRowsOnPage\", virtualization: \"virtualization\", summaryRow: \"summaryRow\", summaryHeight: \"summaryHeight\", summaryPosition: \"summaryPosition\", rowIdentity: \"rowIdentity\", rows: \"rows\", groupedRows: \"groupedRows\", groupRowsBy: \"groupRowsBy\", columns: \"columns\", limit: \"limit\", count: \"count\", offset: \"offset\", targetMarkerTemplate: \"targetMarkerTemplate\", selectionType: \"selectionType\", rowClass: \"rowClass\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", trackByProp: \"trackByProp\", treeFromRelation: \"treeFromRelation\", treeToRelation: \"treeToRelation\" }, outputs: { scroll: \"scroll\", activate: \"activate\", select: \"select\", sort: \"sort\", page: \"page\", reorder: \"reorder\", resize: \"resize\", tableContextmenu: \"tableContextmenu\", treeAction: \"treeAction\" }, decls: 5, vars: 34, consts: [[\"visibilityObserver\", \"\", 3, \"visible\"], [3, \"sorts\", \"sortType\", \"scrollbarH\", \"innerWidth\", \"offsetX\", \"dealsWithGroup\", \"columns\", \"headerHeight\", \"reorderable\", \"targetMarkerTemplate\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"allRowsSelected\", \"selectionType\", \"sort\", \"resize\", \"reorder\", \"select\", \"columnContextmenu\", 4, \"ngIf\"], [3, \"groupRowsBy\", \"groupedRows\", \"rows\", \"groupExpansionDefault\", \"scrollbarV\", \"scrollbarH\", \"virtualization\", \"loadingIndicator\", \"externalPaging\", \"rowHeight\", \"rowCount\", \"offset\", \"trackByProp\", \"columns\", \"pageSize\", \"offsetX\", \"rowDetail\", \"groupHeader\", \"selected\", \"innerWidth\", \"bodyHeight\", \"selectionType\", \"emptyMessage\", \"rowIdentity\", \"rowClass\", \"selectCheck\", \"displayCheck\", \"summaryRow\", \"summaryHeight\", \"summaryPosition\", \"page\", \"activate\", \"rowContextmenu\", \"select\", \"scroll\", \"treeAction\"], [3, \"rowCount\", \"pageSize\", \"offset\", \"footerHeight\", \"footerTemplate\", \"totalMessage\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"selectedCount\", \"selectedMessage\", \"pagerNextIcon\", \"page\", 4, \"ngIf\"], [3, \"sorts\", \"sortType\", \"scrollbarH\", \"innerWidth\", \"offsetX\", \"dealsWithGroup\", \"columns\", \"headerHeight\", \"reorderable\", \"targetMarkerTemplate\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"allRowsSelected\", \"selectionType\", \"sort\", \"resize\", \"reorder\", \"select\", \"columnContextmenu\"], [3, \"rowCount\", \"pageSize\", \"offset\", \"footerHeight\", \"footerTemplate\", \"totalMessage\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"selectedCount\", \"selectedMessage\", \"pagerNextIcon\", \"page\"]], template: function DatatableComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\r\n        ɵngcc0.ɵɵlistener(\"visible\", function DatatableComponent_Template_div_visible_0_listener() { return ctx.recalculate(); });\r\n        ɵngcc0.ɵɵtemplate(1, DatatableComponent_datatable_header_1_Template, 2, 16, \"datatable-header\", 1);\r\n        ɵngcc0.ɵɵelementStart(2, \"datatable-body\", 2);\r\n        ɵngcc0.ɵɵlistener(\"page\", function DatatableComponent_Template_datatable_body_page_2_listener($event) { return ctx.onBodyPage($event); })(\"activate\", function DatatableComponent_Template_datatable_body_activate_2_listener($event) { return ctx.activate.emit($event); })(\"rowContextmenu\", function DatatableComponent_Template_datatable_body_rowContextmenu_2_listener($event) { return ctx.onRowContextmenu($event); })(\"select\", function DatatableComponent_Template_datatable_body_select_2_listener($event) { return ctx.onBodySelect($event); })(\"scroll\", function DatatableComponent_Template_datatable_body_scroll_2_listener($event) { return ctx.onBodyScroll($event); })(\"treeAction\", function DatatableComponent_Template_datatable_body_treeAction_2_listener($event) { return ctx.onTreeAction($event); });\r\n        ɵngcc0.ɵɵpipe(3, \"async\");\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵtemplate(4, DatatableComponent_datatable_footer_4_Template, 1, 12, \"datatable-footer\", 3);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.headerHeight);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"groupRowsBy\", ctx.groupRowsBy)(\"groupedRows\", ctx.groupedRows)(\"rows\", ctx._internalRows)(\"groupExpansionDefault\", ctx.groupExpansionDefault)(\"scrollbarV\", ctx.scrollbarV)(\"scrollbarH\", ctx.scrollbarH)(\"virtualization\", ctx.virtualization)(\"loadingIndicator\", ctx.loadingIndicator)(\"externalPaging\", ctx.externalPaging)(\"rowHeight\", ctx.rowHeight)(\"rowCount\", ctx.rowCount)(\"offset\", ctx.offset)(\"trackByProp\", ctx.trackByProp)(\"columns\", ctx._internalColumns)(\"pageSize\", ctx.pageSize)(\"offsetX\", ɵngcc0.ɵɵpipeBind1(3, 32, ctx._offsetX))(\"rowDetail\", ctx.rowDetail)(\"groupHeader\", ctx.groupHeader)(\"selected\", ctx.selected)(\"innerWidth\", ctx._innerWidth)(\"bodyHeight\", ctx.bodyHeight)(\"selectionType\", ctx.selectionType)(\"emptyMessage\", ctx.messages.emptyMessage)(\"rowIdentity\", ctx.rowIdentity)(\"rowClass\", ctx.rowClass)(\"selectCheck\", ctx.selectCheck)(\"displayCheck\", ctx.displayCheck)(\"summaryRow\", ctx.summaryRow)(\"summaryHeight\", ctx.summaryHeight)(\"summaryPosition\", ctx.summaryPosition);\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.footerHeight);\r\n    } }, directives: function () { return [VisibilityDirective, ɵngcc1.NgIf, DataTableBodyComponent, DataTableHeaderComponent, DataTableFooterComponent]; }, pipes: function () { return [ɵngcc1.AsyncPipe]; }, styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;transform:translate3d(0,0,0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:0}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:0}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:0}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\"], encapsulation: 2, changeDetection: 0 });\r\nDatatableComponent.ctorParameters = () => [\r\n    { type: ScrollbarHelper, decorators: [{ type: SkipSelf }] },\r\n    { type: DimensionsHelper, decorators: [{ type: SkipSelf }] },\r\n    { type: ChangeDetectorRef },\r\n    { type: ElementRef },\r\n    { type: KeyValueDiffers },\r\n    { type: ColumnChangesService },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['configuration',] }] }\r\n];\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"targetMarkerTemplate\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"rows\", null);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"groupRowsBy\", null);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"groupedRows\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"columns\", null);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"selected\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"scrollbarV\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"scrollbarH\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"rowHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"columnMode\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"headerHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"footerHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"externalPaging\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"externalSorting\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"limit\", null);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"count\", null);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"offset\", null);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"loadingIndicator\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"selectionType\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"reorderable\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"swapColumns\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"sortType\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"sorts\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"cssClasses\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"messages\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"rowClass\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"selectCheck\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"displayCheck\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"groupExpansionDefault\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"trackByProp\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"selectAllRowsOnPage\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"virtualization\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"treeFromRelation\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"treeToRelation\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"summaryRow\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"summaryHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"summaryPosition\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"scroll\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"activate\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"select\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"sort\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"page\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"reorder\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"resize\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"tableContextmenu\", void 0);\r\n__decorate([\r\n    Output()\r\n], DatatableComponent.prototype, \"treeAction\", void 0);\r\n__decorate([\r\n    HostBinding('class.fixed-header')\r\n], DatatableComponent.prototype, \"isFixedHeader\", null);\r\n__decorate([\r\n    HostBinding('class.fixed-row')\r\n], DatatableComponent.prototype, \"isFixedRow\", null);\r\n__decorate([\r\n    HostBinding('class.scroll-vertical')\r\n], DatatableComponent.prototype, \"isVertScroll\", null);\r\n__decorate([\r\n    HostBinding('class.virtualized')\r\n], DatatableComponent.prototype, \"isVirtualized\", null);\r\n__decorate([\r\n    HostBinding('class.scroll-horz')\r\n], DatatableComponent.prototype, \"isHorScroll\", null);\r\n__decorate([\r\n    HostBinding('class.selectable')\r\n], DatatableComponent.prototype, \"isSelectable\", null);\r\n__decorate([\r\n    HostBinding('class.checkbox-selection')\r\n], DatatableComponent.prototype, \"isCheckboxSelection\", null);\r\n__decorate([\r\n    HostBinding('class.cell-selection')\r\n], DatatableComponent.prototype, \"isCellSelection\", null);\r\n__decorate([\r\n    HostBinding('class.single-selection')\r\n], DatatableComponent.prototype, \"isSingleSelection\", null);\r\n__decorate([\r\n    HostBinding('class.multi-selection')\r\n], DatatableComponent.prototype, \"isMultiSelection\", null);\r\n__decorate([\r\n    HostBinding('class.multi-click-selection')\r\n], DatatableComponent.prototype, \"isMultiClickSelection\", null);\r\n__decorate([\r\n    ContentChildren(DataTableColumnDirective)\r\n], DatatableComponent.prototype, \"columnTemplates\", null);\r\n__decorate([\r\n    ContentChild(DatatableRowDetailDirective)\r\n], DatatableComponent.prototype, \"rowDetail\", void 0);\r\n__decorate([\r\n    ContentChild(DatatableGroupHeaderDirective)\r\n], DatatableComponent.prototype, \"groupHeader\", void 0);\r\n__decorate([\r\n    ContentChild(DatatableFooterDirective)\r\n], DatatableComponent.prototype, \"footer\", void 0);\r\n__decorate([\r\n    ViewChild(DataTableBodyComponent)\r\n], DatatableComponent.prototype, \"bodyComponent\", void 0);\r\n__decorate([\r\n    ViewChild(DataTableHeaderComponent)\r\n], DatatableComponent.prototype, \"headerComponent\", void 0);\r\n__decorate([\r\n    Input()\r\n], DatatableComponent.prototype, \"rowIdentity\", void 0);\r\n__decorate([\r\n    HostListener('window:resize'),\r\n    throttleable(5)\r\n], DatatableComponent.prototype, \"onWindowResize\", null);\r\nDatatableComponent = __decorate([ __param(0, SkipSelf()),\r\n    __param(1, SkipSelf()),\r\n    __param(6, Optional()), __param(6, Inject('configuration'))\r\n], DatatableComponent);\r\n\r\nlet DataTableHeaderCellComponent = class DataTableHeaderCellComponent {\r\n    constructor(cd) {\r\n        this.cd = cd;\r\n        this.sort = new EventEmitter();\r\n        this.select = new EventEmitter();\r\n        this.columnContextmenu = new EventEmitter(false);\r\n        this.sortFn = this.onSort.bind(this);\r\n        this.selectFn = this.select.emit.bind(this.select);\r\n        this.cellContext = {\r\n            column: this.column,\r\n            sortDir: this.sortDir,\r\n            sortFn: this.sortFn,\r\n            allRowsSelected: this.allRowsSelected,\r\n            selectFn: this.selectFn\r\n        };\r\n    }\r\n    set allRowsSelected(value) {\r\n        this._allRowsSelected = value;\r\n        this.cellContext.allRowsSelected = value;\r\n    }\r\n    get allRowsSelected() {\r\n        return this._allRowsSelected;\r\n    }\r\n    set column(column) {\r\n        this._column = column;\r\n        this.cellContext.column = column;\r\n        this.cd.markForCheck();\r\n    }\r\n    get column() {\r\n        return this._column;\r\n    }\r\n    set sorts(val) {\r\n        this._sorts = val;\r\n        this.sortDir = this.calcSortDir(val);\r\n        this.cellContext.sortDir = this.sortDir;\r\n        this.sortClass = this.calcSortClass(this.sortDir);\r\n        this.cd.markForCheck();\r\n    }\r\n    get sorts() {\r\n        return this._sorts;\r\n    }\r\n    get columnCssClasses() {\r\n        let cls = 'datatable-header-cell';\r\n        if (this.column.sortable)\r\n            cls += ' sortable';\r\n        if (this.column.resizeable)\r\n            cls += ' resizeable';\r\n        if (this.column.headerClass) {\r\n            if (typeof this.column.headerClass === 'string') {\r\n                cls += ' ' + this.column.headerClass;\r\n            }\r\n            else if (typeof this.column.headerClass === 'function') {\r\n                const res = this.column.headerClass({\r\n                    column: this.column\r\n                });\r\n                if (typeof res === 'string') {\r\n                    cls += res;\r\n                }\r\n                else if (typeof res === 'object') {\r\n                    const keys = Object.keys(res);\r\n                    for (const k of keys) {\r\n                        if (res[k] === true)\r\n                            cls += ` ${k}`;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const sortDir = this.sortDir;\r\n        if (sortDir) {\r\n            cls += ` sort-active sort-${sortDir}`;\r\n        }\r\n        return cls;\r\n    }\r\n    get name() {\r\n        // guaranteed to have a value by setColumnDefaults() in column-helper.ts\r\n        return this.column.headerTemplate === undefined ? this.column.name : undefined;\r\n    }\r\n    get minWidth() {\r\n        return this.column.minWidth;\r\n    }\r\n    get maxWidth() {\r\n        return this.column.maxWidth;\r\n    }\r\n    get width() {\r\n        return this.column.width;\r\n    }\r\n    get isCheckboxable() {\r\n        return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\r\n    }\r\n    onContextmenu($event) {\r\n        this.columnContextmenu.emit({ event: $event, column: this.column });\r\n    }\r\n    calcSortDir(sorts) {\r\n        if (sorts && this.column) {\r\n            const sort = sorts.find((s) => {\r\n                return s.prop === this.column.prop;\r\n            });\r\n            if (sort)\r\n                return sort.dir;\r\n        }\r\n    }\r\n    onSort() {\r\n        if (!this.column.sortable)\r\n            return;\r\n        const newValue = nextSortDir(this.sortType, this.sortDir);\r\n        this.sort.emit({\r\n            column: this.column,\r\n            prevValue: this.sortDir,\r\n            newValue\r\n        });\r\n    }\r\n    calcSortClass(sortDir) {\r\n        if (sortDir === SortDirection.asc) {\r\n            return `sort-btn sort-asc ${this.sortAscendingIcon}`;\r\n        }\r\n        else if (sortDir === SortDirection.desc) {\r\n            return `sort-btn sort-desc ${this.sortDescendingIcon}`;\r\n        }\r\n        else {\r\n            return `sort-btn`;\r\n        }\r\n    }\r\n};\r\nDataTableHeaderCellComponent.ɵfac = function DataTableHeaderCellComponent_Factory(t) { return new (t || DataTableHeaderCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\r\nDataTableHeaderCellComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableHeaderCellComponent, selectors: [[\"datatable-header-cell\"]], hostAttrs: [1, \"datatable-header-cell\"], hostVars: 11, hostBindings: function DataTableHeaderCellComponent_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"contextmenu\", function DataTableHeaderCellComponent_contextmenu_HostBindingHandler($event) { return ctx.onContextmenu($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"title\", ctx.name);\r\n        ɵngcc0.ɵɵclassMap(ctx.columnCssClasses);\r\n        ɵngcc0.ɵɵstyleProp(\"min-width\", ctx.minWidth, \"px\")(\"max-width\", ctx.maxWidth, \"px\")(\"width\", ctx.width, \"px\")(\"height\", ctx.headerHeight, \"px\");\r\n    } }, inputs: { allRowsSelected: \"allRowsSelected\", column: \"column\", sorts: \"sorts\", sortType: \"sortType\", sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", isTarget: \"isTarget\", targetMarkerTemplate: \"targetMarkerTemplate\", targetMarkerContext: \"targetMarkerContext\", selectionType: \"selectionType\", headerHeight: \"headerHeight\" }, outputs: { sort: \"sort\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, decls: 6, vars: 6, consts: [[1, \"datatable-header-cell-template-wrap\"], [4, \"ngIf\"], [\"class\", \"datatable-checkbox\", 4, \"ngIf\"], [\"class\", \"datatable-header-cell-wrapper\", 4, \"ngIf\"], [3, \"click\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"datatable-checkbox\"], [\"type\", \"checkbox\", 3, \"checked\", \"change\"], [1, \"datatable-header-cell-wrapper\"], [1, \"datatable-header-cell-label\", \"draggable\", 3, \"innerHTML\", \"click\"]], template: function DataTableHeaderCellComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, DataTableHeaderCellComponent_1_Template, 1, 2, undefined, 1);\r\n        ɵngcc0.ɵɵtemplate(2, DataTableHeaderCellComponent_label_2_Template, 2, 1, \"label\", 2);\r\n        ɵngcc0.ɵɵtemplate(3, DataTableHeaderCellComponent_span_3_Template, 2, 1, \"span\", 3);\r\n        ɵngcc0.ɵɵtemplate(4, DataTableHeaderCellComponent_4_Template, 1, 2, undefined, 1);\r\n        ɵngcc0.ɵɵelementStart(5, \"span\", 4);\r\n        ɵngcc0.ɵɵlistener(\"click\", function DataTableHeaderCellComponent_Template_span_click_5_listener() { return ctx.onSort(); });\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isTarget);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isCheckboxable);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.column.headerTemplate);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.column.headerTemplate);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵclassMap(ctx.sortClass);\r\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\r\nDataTableHeaderCellComponent.ctorParameters = () => [\r\n    { type: ChangeDetectorRef }\r\n];\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"sortType\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"sortAscendingIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"sortDescendingIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"isTarget\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"targetMarkerTemplate\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"targetMarkerContext\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"allRowsSelected\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"selectionType\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"column\", null);\r\n__decorate([\r\n    HostBinding('style.height.px'),\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"headerHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableHeaderCellComponent.prototype, \"sorts\", null);\r\n__decorate([\r\n    Output()\r\n], DataTableHeaderCellComponent.prototype, \"sort\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableHeaderCellComponent.prototype, \"select\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableHeaderCellComponent.prototype, \"columnContextmenu\", void 0);\r\n__decorate([\r\n    HostBinding('class')\r\n], DataTableHeaderCellComponent.prototype, \"columnCssClasses\", null);\r\n__decorate([\r\n    HostBinding('attr.title')\r\n], DataTableHeaderCellComponent.prototype, \"name\", null);\r\n__decorate([\r\n    HostBinding('style.minWidth.px')\r\n], DataTableHeaderCellComponent.prototype, \"minWidth\", null);\r\n__decorate([\r\n    HostBinding('style.maxWidth.px')\r\n], DataTableHeaderCellComponent.prototype, \"maxWidth\", null);\r\n__decorate([\r\n    HostBinding('style.width.px')\r\n], DataTableHeaderCellComponent.prototype, \"width\", null);\r\n__decorate([\r\n    HostListener('contextmenu', ['$event'])\r\n], DataTableHeaderCellComponent.prototype, \"onContextmenu\", null);\r\n\r\nlet DataTableFooterComponent = class DataTableFooterComponent {\r\n    constructor() {\r\n        this.selectedCount = 0;\r\n        this.page = new EventEmitter();\r\n    }\r\n    get isVisible() {\r\n        return this.rowCount / this.pageSize > 1;\r\n    }\r\n    get curPage() {\r\n        return this.offset + 1;\r\n    }\r\n};\r\nDataTableFooterComponent.ɵfac = function DataTableFooterComponent_Factory(t) { return new (t || DataTableFooterComponent)(); };\r\nDataTableFooterComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableFooterComponent, selectors: [[\"datatable-footer\"]], hostAttrs: [1, \"datatable-footer\"], inputs: { selectedCount: \"selectedCount\", footerHeight: \"footerHeight\", rowCount: \"rowCount\", pageSize: \"pageSize\", offset: \"offset\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", totalMessage: \"totalMessage\", footerTemplate: \"footerTemplate\", selectedMessage: \"selectedMessage\" }, outputs: { page: \"page\" }, decls: 4, vars: 8, consts: [[1, \"datatable-footer-inner\", 3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"page-count\", 4, \"ngIf\"], [3, \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"page\", \"size\", \"count\", \"hidden\", \"change\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"page-count\"], [3, \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"page\", \"size\", \"count\", \"hidden\", \"change\"]], template: function DataTableFooterComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, DataTableFooterComponent_1_Template, 1, 8, undefined, 1);\r\n        ɵngcc0.ɵɵtemplate(2, DataTableFooterComponent_div_2_Template, 3, 3, \"div\", 2);\r\n        ɵngcc0.ɵɵtemplate(3, DataTableFooterComponent_datatable_pager_3_Template, 1, 8, \"datatable-pager\", 3);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx.footerHeight, \"px\");\r\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(6, _c2, ctx.selectedMessage));\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.footerTemplate);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.footerTemplate);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.footerTemplate);\r\n    } }, directives: function () { return [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, DataTablePagerComponent]; }, encapsulation: 2, changeDetection: 0 });\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"footerHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"rowCount\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"pageSize\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"offset\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"pagerLeftArrowIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"pagerRightArrowIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"pagerPreviousIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"pagerNextIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"totalMessage\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"footerTemplate\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"selectedCount\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableFooterComponent.prototype, \"selectedMessage\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableFooterComponent.prototype, \"page\", void 0);\r\n\r\nlet DataTablePagerComponent = class DataTablePagerComponent {\r\n    constructor() {\r\n        this.change = new EventEmitter();\r\n        this._count = 0;\r\n        this._page = 1;\r\n        this._size = 0;\r\n    }\r\n    set size(val) {\r\n        this._size = val;\r\n        this.pages = this.calcPages();\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    set count(val) {\r\n        this._count = val;\r\n        this.pages = this.calcPages();\r\n    }\r\n    get count() {\r\n        return this._count;\r\n    }\r\n    set page(val) {\r\n        this._page = val;\r\n        this.pages = this.calcPages();\r\n    }\r\n    get page() {\r\n        return this._page;\r\n    }\r\n    get totalPages() {\r\n        const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\r\n        return Math.max(count || 0, 1);\r\n    }\r\n    canPrevious() {\r\n        return this.page > 1;\r\n    }\r\n    canNext() {\r\n        return this.page < this.totalPages;\r\n    }\r\n    prevPage() {\r\n        this.selectPage(this.page - 1);\r\n    }\r\n    nextPage() {\r\n        this.selectPage(this.page + 1);\r\n    }\r\n    selectPage(page) {\r\n        if (page > 0 && page <= this.totalPages && page !== this.page) {\r\n            this.page = page;\r\n            this.change.emit({\r\n                page\r\n            });\r\n        }\r\n    }\r\n    calcPages(page) {\r\n        const pages = [];\r\n        let startPage = 1;\r\n        let endPage = this.totalPages;\r\n        const maxSize = 5;\r\n        const isMaxSized = maxSize < this.totalPages;\r\n        page = page || this.page;\r\n        if (isMaxSized) {\r\n            startPage = page - Math.floor(maxSize / 2);\r\n            endPage = page + Math.floor(maxSize / 2);\r\n            if (startPage < 1) {\r\n                startPage = 1;\r\n                endPage = Math.min(startPage + maxSize - 1, this.totalPages);\r\n            }\r\n            else if (endPage > this.totalPages) {\r\n                startPage = Math.max(this.totalPages - maxSize + 1, 1);\r\n                endPage = this.totalPages;\r\n            }\r\n        }\r\n        for (let num = startPage; num <= endPage; num++) {\r\n            pages.push({\r\n                number: num,\r\n                text: num\r\n            });\r\n        }\r\n        return pages;\r\n    }\r\n};\r\nDataTablePagerComponent.ɵfac = function DataTablePagerComponent_Factory(t) { return new (t || DataTablePagerComponent)(); };\r\nDataTablePagerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTablePagerComponent, selectors: [[\"datatable-pager\"]], hostAttrs: [1, \"datatable-pager\"], inputs: { size: \"size\", count: \"count\", page: \"page\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\" }, outputs: { change: \"change\" }, decls: 14, vars: 21, consts: [[1, \"pager\"], [\"role\", \"button\", \"aria-label\", \"go to first page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"aria-label\", \"go to previous page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"class\", \"pages\", 3, \"active\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"button\", \"aria-label\", \"go to next page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"aria-label\", \"go to last page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", 1, \"pages\"], [\"href\", \"javascript:void(0)\", 3, \"click\"]], template: function DataTablePagerComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\r\n        ɵngcc0.ɵɵelementStart(1, \"li\");\r\n        ɵngcc0.ɵɵelementStart(2, \"a\", 1);\r\n        ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_2_listener() { return ctx.selectPage(1); });\r\n        ɵngcc0.ɵɵelement(3, \"i\");\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementStart(4, \"li\");\r\n        ɵngcc0.ɵɵelementStart(5, \"a\", 2);\r\n        ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_5_listener() { return ctx.prevPage(); });\r\n        ɵngcc0.ɵɵelement(6, \"i\");\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵtemplate(7, DataTablePagerComponent_li_7_Template, 3, 4, \"li\", 3);\r\n        ɵngcc0.ɵɵelementStart(8, \"li\");\r\n        ɵngcc0.ɵɵelementStart(9, \"a\", 4);\r\n        ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_9_listener() { return ctx.nextPage(); });\r\n        ɵngcc0.ɵɵelement(10, \"i\");\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementStart(11, \"li\");\r\n        ɵngcc0.ɵɵelementStart(12, \"a\", 5);\r\n        ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_12_listener() { return ctx.selectPage(ctx.totalPages); });\r\n        ɵngcc0.ɵɵelement(13, \"i\");\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canPrevious());\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵclassMap(ctx.pagerPreviousIcon);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canPrevious());\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵclassMap(ctx.pagerLeftArrowIcon);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.pages);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canNext());\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵclassMap(ctx.pagerRightArrowIcon);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canNext());\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵclassMap(ctx.pagerNextIcon);\r\n    } }, directives: [ɵngcc1.NgForOf], encapsulation: 2, changeDetection: 0 });\r\n__decorate([\r\n    Input()\r\n], DataTablePagerComponent.prototype, \"pagerLeftArrowIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTablePagerComponent.prototype, \"pagerRightArrowIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTablePagerComponent.prototype, \"pagerPreviousIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTablePagerComponent.prototype, \"pagerNextIcon\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTablePagerComponent.prototype, \"size\", null);\r\n__decorate([\r\n    Input()\r\n], DataTablePagerComponent.prototype, \"count\", null);\r\n__decorate([\r\n    Input()\r\n], DataTablePagerComponent.prototype, \"page\", null);\r\n__decorate([\r\n    Output()\r\n], DataTablePagerComponent.prototype, \"change\", void 0);\r\n\r\nlet ProgressBarComponent = class ProgressBarComponent {\r\n};\r\nProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) { return new (t || ProgressBarComponent)(); };\r\nProgressBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ProgressBarComponent, selectors: [[\"datatable-progress\"]], decls: 3, vars: 0, consts: [[\"role\", \"progressbar\", 1, \"progress-linear\"], [1, \"container\"], [1, \"bar\"]], template: function ProgressBarComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\r\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\r\n        ɵngcc0.ɵɵelement(2, \"div\", 2);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } }, encapsulation: 2, changeDetection: 0 });\r\n\r\nvar Keys;\r\n(function (Keys) {\r\n    Keys[Keys[\"up\"] = 38] = \"up\";\r\n    Keys[Keys[\"down\"] = 40] = \"down\";\r\n    Keys[Keys[\"return\"] = 13] = \"return\";\r\n    Keys[Keys[\"escape\"] = 27] = \"escape\";\r\n    Keys[Keys[\"left\"] = 37] = \"left\";\r\n    Keys[Keys[\"right\"] = 39] = \"right\";\r\n})(Keys || (Keys = {}));\r\n\r\nlet DataTableBodyRowComponent = class DataTableBodyRowComponent {\r\n    constructor(differs, scrollbarHelper, cd, element) {\r\n        this.differs = differs;\r\n        this.scrollbarHelper = scrollbarHelper;\r\n        this.cd = cd;\r\n        this.treeStatus = 'collapsed';\r\n        this.activate = new EventEmitter();\r\n        this.treeAction = new EventEmitter();\r\n        this._groupStyles = {\r\n            left: {},\r\n            center: {},\r\n            right: {}\r\n        };\r\n        this._element = element.nativeElement;\r\n        this._rowDiffer = differs.find({}).create();\r\n    }\r\n    set columns(val) {\r\n        this._columns = val;\r\n        this.recalculateColumns(val);\r\n        this.buildStylesByGroup();\r\n    }\r\n    get columns() {\r\n        return this._columns;\r\n    }\r\n    set innerWidth(val) {\r\n        if (this._columns) {\r\n            const colByPin = columnsByPin(this._columns);\r\n            this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\r\n        }\r\n        this._innerWidth = val;\r\n        this.recalculateColumns();\r\n        this.buildStylesByGroup();\r\n    }\r\n    get innerWidth() {\r\n        return this._innerWidth;\r\n    }\r\n    set offsetX(val) {\r\n        this._offsetX = val;\r\n        this.buildStylesByGroup();\r\n    }\r\n    get offsetX() {\r\n        return this._offsetX;\r\n    }\r\n    get cssClass() {\r\n        let cls = 'datatable-body-row';\r\n        if (this.isSelected) {\r\n            cls += ' active';\r\n        }\r\n        if (this.rowIndex % 2 !== 0) {\r\n            cls += ' datatable-row-odd';\r\n        }\r\n        if (this.rowIndex % 2 === 0) {\r\n            cls += ' datatable-row-even';\r\n        }\r\n        if (this.rowClass) {\r\n            const res = this.rowClass(this.row);\r\n            if (typeof res === 'string') {\r\n                cls += ` ${res}`;\r\n            }\r\n            else if (typeof res === 'object') {\r\n                const keys = Object.keys(res);\r\n                for (const k of keys) {\r\n                    if (res[k] === true) {\r\n                        cls += ` ${k}`;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return cls;\r\n    }\r\n    get columnsTotalWidths() {\r\n        return this._columnGroupWidths.total;\r\n    }\r\n    ngDoCheck() {\r\n        if (this._rowDiffer.diff(this.row)) {\r\n            this.cd.markForCheck();\r\n        }\r\n    }\r\n    trackByGroups(index, colGroup) {\r\n        return colGroup.type;\r\n    }\r\n    columnTrackingFn(index, column) {\r\n        return column.$$id;\r\n    }\r\n    buildStylesByGroup() {\r\n        this._groupStyles.left = this.calcStylesByGroup('left');\r\n        this._groupStyles.center = this.calcStylesByGroup('center');\r\n        this._groupStyles.right = this.calcStylesByGroup('right');\r\n        this.cd.markForCheck();\r\n    }\r\n    calcStylesByGroup(group) {\r\n        const widths = this._columnGroupWidths;\r\n        const offsetX = this.offsetX;\r\n        const styles = {\r\n            width: `${widths[group]}px`\r\n        };\r\n        if (group === 'left') {\r\n            translateXY(styles, offsetX, 0);\r\n        }\r\n        else if (group === 'right') {\r\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\r\n            const totalDiff = widths.total - bodyWidth;\r\n            const offsetDiff = totalDiff - offsetX;\r\n            const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\r\n            translateXY(styles, offset, 0);\r\n        }\r\n        return styles;\r\n    }\r\n    onActivate(event, index) {\r\n        event.cellIndex = index;\r\n        event.rowElement = this._element;\r\n        this.activate.emit(event);\r\n    }\r\n    onKeyDown(event) {\r\n        const keyCode = event.keyCode;\r\n        const isTargetRow = event.target === this._element;\r\n        const isAction = keyCode === Keys.return ||\r\n            keyCode === Keys.down ||\r\n            keyCode === Keys.up ||\r\n            keyCode === Keys.left ||\r\n            keyCode === Keys.right;\r\n        if (isAction && isTargetRow) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.activate.emit({\r\n                type: 'keydown',\r\n                event,\r\n                row: this.row,\r\n                rowElement: this._element\r\n            });\r\n        }\r\n    }\r\n    onMouseenter(event) {\r\n        this.activate.emit({\r\n            type: 'mouseenter',\r\n            event,\r\n            row: this.row,\r\n            rowElement: this._element\r\n        });\r\n    }\r\n    recalculateColumns(val = this.columns) {\r\n        this._columns = val;\r\n        const colsByPin = columnsByPin(this._columns);\r\n        this._columnsByPin = columnsByPinArr(this._columns);\r\n        this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\r\n    }\r\n    onTreeAction() {\r\n        this.treeAction.emit();\r\n    }\r\n};\r\nDataTableBodyRowComponent.ɵfac = function DataTableBodyRowComponent_Factory(t) { return new (t || DataTableBodyRowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ScrollbarHelper, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nDataTableBodyRowComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableBodyRowComponent, selectors: [[\"datatable-body-row\"]], hostVars: 6, hostBindings: function DataTableBodyRowComponent_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"keydown\", function DataTableBodyRowComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); })(\"mouseenter\", function DataTableBodyRowComponent_mouseenter_HostBindingHandler($event) { return ctx.onMouseenter($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵclassMap(ctx.cssClass);\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.columnsTotalWidths, \"px\")(\"height\", ctx.rowHeight, \"px\");\r\n    } }, inputs: { treeStatus: \"treeStatus\", columns: \"columns\", innerWidth: \"innerWidth\", offsetX: \"offsetX\", expanded: \"expanded\", rowClass: \"rowClass\", row: \"row\", group: \"group\", isSelected: \"isSelected\", rowIndex: \"rowIndex\", displayCheck: \"displayCheck\", rowHeight: \"rowHeight\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, decls: 1, vars: 2, consts: [[3, \"class\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\"], [\"tabindex\", \"-1\", 3, \"row\", \"group\", \"expanded\", \"isSelected\", \"rowIndex\", \"column\", \"rowHeight\", \"displayCheck\", \"treeStatus\", \"activate\", \"treeAction\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"tabindex\", \"-1\", 3, \"row\", \"group\", \"expanded\", \"isSelected\", \"rowIndex\", \"column\", \"rowHeight\", \"displayCheck\", \"treeStatus\", \"activate\", \"treeAction\"]], template: function DataTableBodyRowComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵtemplate(0, DataTableBodyRowComponent_div_0_Template, 2, 6, \"div\", 0);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._columnsByPin)(\"ngForTrackBy\", ctx.trackByGroups);\r\n    } }, directives: function () { return [ɵngcc1.NgForOf, ɵngcc1.NgStyle, DataTableBodyCellComponent]; }, encapsulation: 2, changeDetection: 0 });\r\nDataTableBodyRowComponent.ctorParameters = () => [\r\n    { type: KeyValueDiffers },\r\n    { type: ScrollbarHelper, decorators: [{ type: SkipSelf }] },\r\n    { type: ChangeDetectorRef },\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"columns\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"innerWidth\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"expanded\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"rowClass\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"row\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"group\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"isSelected\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"rowIndex\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"displayCheck\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"treeStatus\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"offsetX\", null);\r\n__decorate([\r\n    HostBinding('class')\r\n], DataTableBodyRowComponent.prototype, \"cssClass\", null);\r\n__decorate([\r\n    HostBinding('style.height.px'),\r\n    Input()\r\n], DataTableBodyRowComponent.prototype, \"rowHeight\", void 0);\r\n__decorate([\r\n    HostBinding('style.width.px')\r\n], DataTableBodyRowComponent.prototype, \"columnsTotalWidths\", null);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyRowComponent.prototype, \"activate\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyRowComponent.prototype, \"treeAction\", void 0);\r\n__decorate([\r\n    HostListener('keydown', ['$event'])\r\n], DataTableBodyRowComponent.prototype, \"onKeyDown\", null);\r\n__decorate([\r\n    HostListener('mouseenter', ['$event'])\r\n], DataTableBodyRowComponent.prototype, \"onMouseenter\", null);\r\nDataTableBodyRowComponent = __decorate([ __param(1, SkipSelf())\r\n], DataTableBodyRowComponent);\r\n\r\nlet DataTableRowWrapperComponent = class DataTableRowWrapperComponent {\r\n    constructor(cd, differs) {\r\n        this.cd = cd;\r\n        this.differs = differs;\r\n        this.rowContextmenu = new EventEmitter(false);\r\n        this.groupContext = {\r\n            group: this.row,\r\n            expanded: this.expanded,\r\n            rowIndex: this.rowIndex\r\n        };\r\n        this.rowContext = {\r\n            row: this.row,\r\n            expanded: this.expanded,\r\n            rowIndex: this.rowIndex\r\n        };\r\n        this._expanded = false;\r\n        this.rowDiffer = differs.find({}).create();\r\n    }\r\n    set rowIndex(val) {\r\n        this._rowIndex = val;\r\n        this.rowContext.rowIndex = val;\r\n        this.groupContext.rowIndex = val;\r\n        this.cd.markForCheck();\r\n    }\r\n    get rowIndex() {\r\n        return this._rowIndex;\r\n    }\r\n    set expanded(val) {\r\n        this._expanded = val;\r\n        this.groupContext.expanded = val;\r\n        this.rowContext.expanded = val;\r\n        this.cd.markForCheck();\r\n    }\r\n    get expanded() {\r\n        return this._expanded;\r\n    }\r\n    ngDoCheck() {\r\n        if (this.rowDiffer.diff(this.row)) {\r\n            this.rowContext.row = this.row;\r\n            this.groupContext.group = this.row;\r\n            this.cd.markForCheck();\r\n        }\r\n    }\r\n    onContextmenu($event) {\r\n        this.rowContextmenu.emit({ event: $event, row: this.row });\r\n    }\r\n    getGroupHeaderStyle() {\r\n        const styles = {};\r\n        styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\r\n        styles['backface-visibility'] = 'hidden';\r\n        styles['width'] = this.innerWidth;\r\n        return styles;\r\n    }\r\n};\r\nDataTableRowWrapperComponent.ɵfac = function DataTableRowWrapperComponent_Factory(t) { return new (t || DataTableRowWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers)); };\r\nDataTableRowWrapperComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableRowWrapperComponent, selectors: [[\"datatable-row-wrapper\"]], hostAttrs: [1, \"datatable-row-wrapper\"], hostBindings: function DataTableRowWrapperComponent_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"contextmenu\", function DataTableRowWrapperComponent_contextmenu_HostBindingHandler($event) { return ctx.onContextmenu($event); });\r\n    } }, inputs: { rowIndex: \"rowIndex\", expanded: \"expanded\", innerWidth: \"innerWidth\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", offsetX: \"offsetX\", detailRowHeight: \"detailRowHeight\", row: \"row\", groupedRows: \"groupedRows\" }, outputs: { rowContextmenu: \"rowContextmenu\" }, ngContentSelectors: _c0, decls: 3, vars: 3, consts: [[\"class\", \"datatable-group-header\", 3, \"ngStyle\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"datatable-row-detail\", 3, \"height\", 4, \"ngIf\"], [1, \"datatable-group-header\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"datatable-row-detail\"]], template: function DataTableRowWrapperComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef();\r\n        ɵngcc0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_0_Template, 2, 2, \"div\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, DataTableRowWrapperComponent_ng_content_1_Template, 1, 0, \"ng-content\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, DataTableRowWrapperComponent_div_2_Template, 2, 3, \"div\", 2);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.groupHeader && ctx.groupHeader.template);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.groupHeader && ctx.groupHeader.template && ctx.expanded || !ctx.groupHeader || !ctx.groupHeader.template);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.rowDetail && ctx.rowDetail.template && ctx.expanded);\r\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\r\nDataTableRowWrapperComponent.ctorParameters = () => [\r\n    { type: ChangeDetectorRef },\r\n    { type: KeyValueDiffers }\r\n];\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"innerWidth\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"rowDetail\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"groupHeader\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"offsetX\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"detailRowHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"row\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"groupedRows\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableRowWrapperComponent.prototype, \"rowContextmenu\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"rowIndex\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableRowWrapperComponent.prototype, \"expanded\", null);\r\n__decorate([\r\n    HostListener('contextmenu', ['$event'])\r\n], DataTableRowWrapperComponent.prototype, \"onContextmenu\", null);\r\n\r\nlet DataTableBodyCellComponent = class DataTableBodyCellComponent {\r\n    constructor(element, cd) {\r\n        this.cd = cd;\r\n        this.activate = new EventEmitter();\r\n        this.treeAction = new EventEmitter();\r\n        this.isFocused = false;\r\n        this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);\r\n        this.activateFn = this.activate.emit.bind(this.activate);\r\n        this.cellContext = {\r\n            onCheckboxChangeFn: this.onCheckboxChangeFn,\r\n            activateFn: this.activateFn,\r\n            row: this.row,\r\n            group: this.group,\r\n            value: this.value,\r\n            column: this.column,\r\n            rowHeight: this.rowHeight,\r\n            isSelected: this.isSelected,\r\n            rowIndex: this.rowIndex,\r\n            treeStatus: this.treeStatus,\r\n            onTreeAction: this.onTreeAction.bind(this)\r\n        };\r\n        this._element = element.nativeElement;\r\n    }\r\n    set group(group) {\r\n        this._group = group;\r\n        this.cellContext.group = group;\r\n        this.checkValueUpdates();\r\n        this.cd.markForCheck();\r\n    }\r\n    get group() {\r\n        return this._group;\r\n    }\r\n    set rowHeight(val) {\r\n        this._rowHeight = val;\r\n        this.cellContext.rowHeight = val;\r\n        this.checkValueUpdates();\r\n        this.cd.markForCheck();\r\n    }\r\n    get rowHeight() {\r\n        return this._rowHeight;\r\n    }\r\n    set isSelected(val) {\r\n        this._isSelected = val;\r\n        this.cellContext.isSelected = val;\r\n        this.cd.markForCheck();\r\n    }\r\n    get isSelected() {\r\n        return this._isSelected;\r\n    }\r\n    set expanded(val) {\r\n        this._expanded = val;\r\n        this.cellContext.expanded = val;\r\n        this.cd.markForCheck();\r\n    }\r\n    get expanded() {\r\n        return this._expanded;\r\n    }\r\n    set rowIndex(val) {\r\n        this._rowIndex = val;\r\n        this.cellContext.rowIndex = val;\r\n        this.checkValueUpdates();\r\n        this.cd.markForCheck();\r\n    }\r\n    get rowIndex() {\r\n        return this._rowIndex;\r\n    }\r\n    set column(column) {\r\n        this._column = column;\r\n        this.cellContext.column = column;\r\n        this.checkValueUpdates();\r\n        this.cd.markForCheck();\r\n    }\r\n    get column() {\r\n        return this._column;\r\n    }\r\n    set row(row) {\r\n        this._row = row;\r\n        this.cellContext.row = row;\r\n        this.checkValueUpdates();\r\n        this.cd.markForCheck();\r\n    }\r\n    get row() {\r\n        return this._row;\r\n    }\r\n    set sorts(val) {\r\n        this._sorts = val;\r\n        this.calcSortDir = this.calcSortDir(val);\r\n    }\r\n    get sorts() {\r\n        return this._sorts;\r\n    }\r\n    set treeStatus(status) {\r\n        if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\r\n            this._treeStatus = 'collapsed';\r\n        }\r\n        else {\r\n            this._treeStatus = status;\r\n        }\r\n        this.cellContext.treeStatus = this._treeStatus;\r\n        this.checkValueUpdates();\r\n        this.cd.markForCheck();\r\n    }\r\n    get treeStatus() {\r\n        return this._treeStatus;\r\n    }\r\n    get columnCssClasses() {\r\n        let cls = 'datatable-body-cell';\r\n        if (this.column.cellClass) {\r\n            if (typeof this.column.cellClass === 'string') {\r\n                cls += ' ' + this.column.cellClass;\r\n            }\r\n            else if (typeof this.column.cellClass === 'function') {\r\n                const res = this.column.cellClass({\r\n                    row: this.row,\r\n                    group: this.group,\r\n                    column: this.column,\r\n                    value: this.value,\r\n                    rowHeight: this.rowHeight\r\n                });\r\n                if (typeof res === 'string') {\r\n                    cls += ' ' + res;\r\n                }\r\n                else if (typeof res === 'object') {\r\n                    const keys = Object.keys(res);\r\n                    for (const k of keys) {\r\n                        if (res[k] === true) {\r\n                            cls += ` ${k}`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!this.sortDir) {\r\n            cls += ' sort-active';\r\n        }\r\n        if (this.isFocused) {\r\n            cls += ' active';\r\n        }\r\n        if (this.sortDir === SortDirection.asc) {\r\n            cls += ' sort-asc';\r\n        }\r\n        if (this.sortDir === SortDirection.desc) {\r\n            cls += ' sort-desc';\r\n        }\r\n        return cls;\r\n    }\r\n    get width() {\r\n        return this.column.width;\r\n    }\r\n    get minWidth() {\r\n        return this.column.minWidth;\r\n    }\r\n    get maxWidth() {\r\n        return this.column.maxWidth;\r\n    }\r\n    get height() {\r\n        const height = this.rowHeight;\r\n        if (isNaN(height)) {\r\n            return height;\r\n        }\r\n        return height + 'px';\r\n    }\r\n    ngDoCheck() {\r\n        this.checkValueUpdates();\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.cellTemplate) {\r\n            this.cellTemplate.clear();\r\n        }\r\n    }\r\n    checkValueUpdates() {\r\n        let value = '';\r\n        if (!this.row || !this.column) {\r\n            value = '';\r\n        }\r\n        else {\r\n            const val = this.column.$$valueGetter(this.row, this.column.prop);\r\n            const userPipe = this.column.pipe;\r\n            if (userPipe) {\r\n                value = userPipe.transform(val);\r\n            }\r\n            else if (value !== undefined) {\r\n                value = val;\r\n            }\r\n        }\r\n        if (this.value !== value) {\r\n            this.value = value;\r\n            this.cellContext.value = value;\r\n            this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\r\n            this.cd.markForCheck();\r\n        }\r\n    }\r\n    onFocus() {\r\n        this.isFocused = true;\r\n    }\r\n    onBlur() {\r\n        this.isFocused = false;\r\n    }\r\n    onClick(event) {\r\n        this.activate.emit({\r\n            type: 'click',\r\n            event,\r\n            row: this.row,\r\n            group: this.group,\r\n            rowHeight: this.rowHeight,\r\n            column: this.column,\r\n            value: this.value,\r\n            cellElement: this._element\r\n        });\r\n    }\r\n    onDblClick(event) {\r\n        this.activate.emit({\r\n            type: 'dblclick',\r\n            event,\r\n            row: this.row,\r\n            group: this.group,\r\n            rowHeight: this.rowHeight,\r\n            column: this.column,\r\n            value: this.value,\r\n            cellElement: this._element\r\n        });\r\n    }\r\n    onKeyDown(event) {\r\n        const keyCode = event.keyCode;\r\n        const isTargetCell = event.target === this._element;\r\n        const isAction = keyCode === Keys.return ||\r\n            keyCode === Keys.down ||\r\n            keyCode === Keys.up ||\r\n            keyCode === Keys.left ||\r\n            keyCode === Keys.right;\r\n        if (isAction && isTargetCell) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.activate.emit({\r\n                type: 'keydown',\r\n                event,\r\n                row: this.row,\r\n                group: this.group,\r\n                rowHeight: this.rowHeight,\r\n                column: this.column,\r\n                value: this.value,\r\n                cellElement: this._element\r\n            });\r\n        }\r\n    }\r\n    onCheckboxChange(event) {\r\n        this.activate.emit({\r\n            type: 'checkbox',\r\n            event,\r\n            row: this.row,\r\n            group: this.group,\r\n            rowHeight: this.rowHeight,\r\n            column: this.column,\r\n            value: this.value,\r\n            cellElement: this._element,\r\n            treeStatus: 'collapsed'\r\n        });\r\n    }\r\n    calcSortDir(sorts) {\r\n        if (!sorts) {\r\n            return;\r\n        }\r\n        const sort = sorts.find((s) => {\r\n            return s.prop === this.column.prop;\r\n        });\r\n        if (sort) {\r\n            return sort.dir;\r\n        }\r\n    }\r\n    stripHtml(html) {\r\n        if (!html.replace) {\r\n            return html;\r\n        }\r\n        return html.replace(/<\\/?[^>]+(>|$)/g, '');\r\n    }\r\n    onTreeAction() {\r\n        this.treeAction.emit(this.row);\r\n    }\r\n    calcLeftMargin(column, row) {\r\n        const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\r\n        return column.isTreeColumn ? row.level * levelIndent : 0;\r\n    }\r\n};\r\nDataTableBodyCellComponent.ɵfac = function DataTableBodyCellComponent_Factory(t) { return new (t || DataTableBodyCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\r\nDataTableBodyCellComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableBodyCellComponent, selectors: [[\"datatable-body-cell\"]], viewQuery: function DataTableBodyCellComponent_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(_c3, 7, ViewContainerRef);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);\r\n    } }, hostVars: 10, hostBindings: function DataTableBodyCellComponent_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"focus\", function DataTableBodyCellComponent_focus_HostBindingHandler() { return ctx.onFocus(); })(\"blur\", function DataTableBodyCellComponent_blur_HostBindingHandler() { return ctx.onBlur(); })(\"click\", function DataTableBodyCellComponent_click_HostBindingHandler($event) { return ctx.onClick($event); })(\"dblclick\", function DataTableBodyCellComponent_dblclick_HostBindingHandler($event) { return ctx.onDblClick($event); })(\"keydown\", function DataTableBodyCellComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵclassMap(ctx.columnCssClasses);\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"min-width\", ctx.minWidth, \"px\")(\"max-width\", ctx.maxWidth, \"px\")(\"height\", ctx.height);\r\n    } }, inputs: { group: \"group\", rowHeight: \"rowHeight\", isSelected: \"isSelected\", expanded: \"expanded\", rowIndex: \"rowIndex\", column: \"column\", row: \"row\", sorts: \"sorts\", treeStatus: \"treeStatus\", displayCheck: \"displayCheck\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, decls: 5, vars: 6, consts: [[1, \"datatable-body-cell-label\"], [\"class\", \"datatable-checkbox\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"title\", \"innerHTML\", 4, \"ngIf\"], [1, \"datatable-checkbox\"], [\"type\", \"checkbox\", 3, \"checked\", \"click\"], [\"class\", \"datatable-tree-button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [1, \"datatable-tree-button\", 3, \"disabled\", \"click\"], [\"class\", \"icon datatable-icon-collapse\", 4, \"ngIf\"], [\"class\", \"icon datatable-icon-up\", 4, \"ngIf\"], [\"class\", \"icon datatable-icon-down\", 4, \"ngIf\"], [1, \"icon\", \"datatable-icon-collapse\"], [1, \"icon\", \"datatable-icon-up\"], [1, \"icon\", \"datatable-icon-down\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"title\", \"innerHTML\"], [\"cellTemplate\", \"\"]], template: function DataTableBodyCellComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, DataTableBodyCellComponent_label_1_Template, 2, 1, \"label\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_Template, 3, 2, \"ng-container\", 2);\r\n        ɵngcc0.ɵɵtemplate(3, DataTableBodyCellComponent_span_3_Template, 1, 2, \"span\", 3);\r\n        ɵngcc0.ɵɵtemplate(4, DataTableBodyCellComponent_4_Template, 2, 2, undefined, 2);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx.calcLeftMargin(ctx.column, ctx.row), \"px\");\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.column.checkboxable && (!ctx.displayCheck || ctx.displayCheck(ctx.row, ctx.column, ctx.value)));\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.column.isTreeColumn);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.column.cellTemplate);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.column.cellTemplate);\r\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\r\nDataTableBodyCellComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef }\r\n];\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"displayCheck\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"group\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"rowHeight\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"isSelected\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"expanded\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"rowIndex\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"column\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"row\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"sorts\", null);\r\n__decorate([\r\n    Input()\r\n], DataTableBodyCellComponent.prototype, \"treeStatus\", null);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyCellComponent.prototype, \"activate\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableBodyCellComponent.prototype, \"treeAction\", void 0);\r\n__decorate([\r\n    ViewChild('cellTemplate', { read: ViewContainerRef, static: true })\r\n], DataTableBodyCellComponent.prototype, \"cellTemplate\", void 0);\r\n__decorate([\r\n    HostBinding('class')\r\n], DataTableBodyCellComponent.prototype, \"columnCssClasses\", null);\r\n__decorate([\r\n    HostBinding('style.width.px')\r\n], DataTableBodyCellComponent.prototype, \"width\", null);\r\n__decorate([\r\n    HostBinding('style.minWidth.px')\r\n], DataTableBodyCellComponent.prototype, \"minWidth\", null);\r\n__decorate([\r\n    HostBinding('style.maxWidth.px')\r\n], DataTableBodyCellComponent.prototype, \"maxWidth\", null);\r\n__decorate([\r\n    HostBinding('style.height')\r\n], DataTableBodyCellComponent.prototype, \"height\", null);\r\n__decorate([\r\n    HostListener('focus')\r\n], DataTableBodyCellComponent.prototype, \"onFocus\", null);\r\n__decorate([\r\n    HostListener('blur')\r\n], DataTableBodyCellComponent.prototype, \"onBlur\", null);\r\n__decorate([\r\n    HostListener('click', ['$event'])\r\n], DataTableBodyCellComponent.prototype, \"onClick\", null);\r\n__decorate([\r\n    HostListener('dblclick', ['$event'])\r\n], DataTableBodyCellComponent.prototype, \"onDblClick\", null);\r\n__decorate([\r\n    HostListener('keydown', ['$event'])\r\n], DataTableBodyCellComponent.prototype, \"onKeyDown\", null);\r\n\r\nfunction selectRows(selected, row, comparefn) {\r\n    const selectedIndex = comparefn(row, selected);\r\n    if (selectedIndex > -1) {\r\n        selected.splice(selectedIndex, 1);\r\n    }\r\n    else {\r\n        selected.push(row);\r\n    }\r\n    return selected;\r\n}\r\nfunction selectRowsBetween(selected, rows, index, prevIndex, comparefn) {\r\n    const reverse = index < prevIndex;\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const row = rows[i];\r\n        const greater = i >= prevIndex && i <= index;\r\n        const lesser = i <= prevIndex && i >= index;\r\n        let range = { start: 0, end: 0 };\r\n        if (reverse) {\r\n            range = {\r\n                start: index,\r\n                end: prevIndex\r\n            };\r\n        }\r\n        else {\r\n            range = {\r\n                start: prevIndex,\r\n                end: index + 1\r\n            };\r\n        }\r\n        if ((reverse && lesser) || (!reverse && greater)) {\r\n            // if in the positive range to be added to `selected`, and\r\n            // not already in the selected array, add it\r\n            if (i >= range.start && i <= range.end) {\r\n                selected.push(row);\r\n            }\r\n        }\r\n    }\r\n    return selected;\r\n}\r\n\r\nlet DataTableSelectionComponent = class DataTableSelectionComponent {\r\n    constructor() {\r\n        this.activate = new EventEmitter();\r\n        this.select = new EventEmitter();\r\n    }\r\n    selectRow(event, index, row) {\r\n        if (!this.selectEnabled)\r\n            return;\r\n        const chkbox = this.selectionType === SelectionType.checkbox;\r\n        const multi = this.selectionType === SelectionType.multi;\r\n        const multiClick = this.selectionType === SelectionType.multiClick;\r\n        let selected = [];\r\n        if (multi || chkbox || multiClick) {\r\n            if (event.shiftKey) {\r\n                selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\r\n            }\r\n            else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\r\n                selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\r\n            }\r\n            else {\r\n                selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n            }\r\n        }\r\n        else {\r\n            selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\r\n        }\r\n        if (typeof this.selectCheck === 'function') {\r\n            selected = selected.filter(this.selectCheck.bind(this));\r\n        }\r\n        this.selected.splice(0, this.selected.length);\r\n        this.selected.push(...selected);\r\n        this.prevIndex = index;\r\n        this.select.emit({\r\n            selected\r\n        });\r\n    }\r\n    onActivate(model, index) {\r\n        const { type, event, row } = model;\r\n        const chkbox = this.selectionType === SelectionType.checkbox;\r\n        const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\r\n        if (select) {\r\n            this.selectRow(event, index, row);\r\n        }\r\n        else if (type === 'keydown') {\r\n            if (event.keyCode === Keys.return) {\r\n                this.selectRow(event, index, row);\r\n            }\r\n            else {\r\n                this.onKeyboardFocus(model);\r\n            }\r\n        }\r\n        this.activate.emit(model);\r\n    }\r\n    onKeyboardFocus(model) {\r\n        const { keyCode } = model.event;\r\n        const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\r\n        if (shouldFocus) {\r\n            const isCellSelection = this.selectionType === SelectionType.cell;\r\n            if (!model.cellElement || !isCellSelection) {\r\n                this.focusRow(model.rowElement, keyCode);\r\n            }\r\n            else if (isCellSelection) {\r\n                this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\r\n            }\r\n        }\r\n    }\r\n    focusRow(rowElement, keyCode) {\r\n        const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n        if (nextRowElement)\r\n            nextRowElement.focus();\r\n    }\r\n    getPrevNextRow(rowElement, keyCode) {\r\n        const parentElement = rowElement.parentElement;\r\n        if (parentElement) {\r\n            let focusElement;\r\n            if (keyCode === Keys.up) {\r\n                focusElement = parentElement.previousElementSibling;\r\n            }\r\n            else if (keyCode === Keys.down) {\r\n                focusElement = parentElement.nextElementSibling;\r\n            }\r\n            if (focusElement && focusElement.children.length) {\r\n                return focusElement.children[0];\r\n            }\r\n        }\r\n    }\r\n    focusCell(cellElement, rowElement, keyCode, cellIndex) {\r\n        let nextCellElement;\r\n        if (keyCode === Keys.left) {\r\n            nextCellElement = cellElement.previousElementSibling;\r\n        }\r\n        else if (keyCode === Keys.right) {\r\n            nextCellElement = cellElement.nextElementSibling;\r\n        }\r\n        else if (keyCode === Keys.up || keyCode === Keys.down) {\r\n            const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\r\n            if (nextRowElement) {\r\n                const children = nextRowElement.getElementsByClassName('datatable-body-cell');\r\n                if (children.length)\r\n                    nextCellElement = children[cellIndex];\r\n            }\r\n        }\r\n        if (nextCellElement)\r\n            nextCellElement.focus();\r\n    }\r\n    getRowSelected(row) {\r\n        return this.getRowSelectedIdx(row, this.selected) > -1;\r\n    }\r\n    getRowSelectedIdx(row, selected) {\r\n        if (!selected || !selected.length)\r\n            return -1;\r\n        const rowId = this.rowIdentity(row);\r\n        return selected.findIndex(r => {\r\n            const id = this.rowIdentity(r);\r\n            return id === rowId;\r\n        });\r\n    }\r\n};\r\nDataTableSelectionComponent.ɵfac = function DataTableSelectionComponent_Factory(t) { return new (t || DataTableSelectionComponent)(); };\r\nDataTableSelectionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableSelectionComponent, selectors: [[\"datatable-selection\"]], inputs: { rows: \"rows\", selected: \"selected\", selectEnabled: \"selectEnabled\", selectionType: \"selectionType\", rowIdentity: \"rowIdentity\", selectCheck: \"selectCheck\" }, outputs: { activate: \"activate\", select: \"select\" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DataTableSelectionComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef();\r\n        ɵngcc0.ɵɵprojection(0);\r\n    } }, encapsulation: 2, changeDetection: 0 });\r\n__decorate([\r\n    Input()\r\n], DataTableSelectionComponent.prototype, \"rows\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSelectionComponent.prototype, \"selected\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSelectionComponent.prototype, \"selectEnabled\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSelectionComponent.prototype, \"selectionType\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSelectionComponent.prototype, \"rowIdentity\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSelectionComponent.prototype, \"selectCheck\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableSelectionComponent.prototype, \"activate\", void 0);\r\n__decorate([\r\n    Output()\r\n], DataTableSelectionComponent.prototype, \"select\", void 0);\r\n\r\nfunction defaultSumFunc(cells) {\r\n    const cellsWithValues = cells.filter(cell => !!cell);\r\n    if (!cellsWithValues.length) {\r\n        return null;\r\n    }\r\n    if (cellsWithValues.some(cell => typeof cell !== 'number')) {\r\n        return null;\r\n    }\r\n    return cellsWithValues.reduce((res, cell) => res + cell);\r\n}\r\nfunction noopSumFunc(cells) {\r\n    return null;\r\n}\r\nlet DataTableSummaryRowComponent = class DataTableSummaryRowComponent {\r\n    constructor() {\r\n        this.summaryRow = {};\r\n    }\r\n    ngOnChanges() {\r\n        if (!this.columns || !this.rows) {\r\n            return;\r\n        }\r\n        this.updateInternalColumns();\r\n        this.updateValues();\r\n    }\r\n    updateInternalColumns() {\r\n        this._internalColumns = this.columns.map(col => (Object.assign(Object.assign({}, col), { cellTemplate: col.summaryTemplate })));\r\n    }\r\n    updateValues() {\r\n        this.summaryRow = {};\r\n        this.columns\r\n            .filter(col => !col.summaryTemplate)\r\n            .forEach(col => {\r\n            const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\r\n            const sumFunc = this.getSummaryFunction(col);\r\n            this.summaryRow[col.prop] = col.pipe\r\n                ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\r\n                : sumFunc(cellsFromSingleColumn);\r\n        });\r\n    }\r\n    getSummaryFunction(column) {\r\n        if (column.summaryFunc === undefined) {\r\n            return defaultSumFunc;\r\n        }\r\n        else if (column.summaryFunc === null) {\r\n            return noopSumFunc;\r\n        }\r\n        else {\r\n            return column.summaryFunc;\r\n        }\r\n    }\r\n};\r\nDataTableSummaryRowComponent.ɵfac = function DataTableSummaryRowComponent_Factory(t) { return new (t || DataTableSummaryRowComponent)(); };\r\nDataTableSummaryRowComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DataTableSummaryRowComponent, selectors: [[\"datatable-summary-row\"]], hostAttrs: [1, \"datatable-summary-row\"], inputs: { rows: \"rows\", columns: \"columns\", rowHeight: \"rowHeight\", offsetX: \"offsetX\", innerWidth: \"innerWidth\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[\"tabindex\", \"-1\", 3, \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", 4, \"ngIf\"], [\"tabindex\", \"-1\", 3, \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\"]], template: function DataTableSummaryRowComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵtemplate(0, DataTableSummaryRowComponent_datatable_body_row_0_Template, 1, 6, \"datatable-body-row\", 0);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.summaryRow && ctx._internalColumns);\r\n    } }, directives: [ɵngcc1.NgIf, DataTableBodyRowComponent], encapsulation: 2 });\r\n__decorate([\r\n    Input()\r\n], DataTableSummaryRowComponent.prototype, \"rows\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSummaryRowComponent.prototype, \"columns\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSummaryRowComponent.prototype, \"rowHeight\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSummaryRowComponent.prototype, \"offsetX\", void 0);\r\n__decorate([\r\n    Input()\r\n], DataTableSummaryRowComponent.prototype, \"innerWidth\", void 0);\r\n\r\nvar NgxDatatableModule_1;\r\nlet NgxDatatableModule = NgxDatatableModule_1 = class NgxDatatableModule {\r\n    /**\r\n     * Configure global configuration via INgxDatatableConfig\r\n     * @param configuration\r\n     */\r\n    static forRoot(configuration) {\r\n        return {\r\n            ngModule: NgxDatatableModule_1,\r\n            providers: [{ provide: 'configuration', useValue: configuration }]\r\n        };\r\n    }\r\n};\r\nNgxDatatableModule.ɵfac = function NgxDatatableModule_Factory(t) { return new (t || NgxDatatableModule)(); };\r\nNgxDatatableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxDatatableModule });\r\nNgxDatatableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService], imports: [[CommonModule]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollbarHelper, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DimensionsHelper, [{\r\n        type: Injectable\r\n    }], null, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColumnChangesService, [{\r\n        type: Injectable\r\n    }], function () { return []; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableFooterTemplateDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: '[ngx-datatable-footer-template]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VisibilityDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: '[visibilityObserver]' }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { isVisible: [{\r\n            type: HostBinding,\r\n            args: ['class.visible']\r\n        }], visible: [{\r\n            type: Output\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DraggableDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: '[draggable]' }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { dragX: [{\r\n            type: Input\r\n        }], dragY: [{\r\n            type: Input\r\n        }], dragStart: [{\r\n            type: Output\r\n        }], dragging: [{\r\n            type: Output\r\n        }], dragEnd: [{\r\n            type: Output\r\n        }], dragEventTarget: [{\r\n            type: Input\r\n        }], dragModel: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResizeableDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[resizeable]',\r\n                host: {\r\n                    '[class.resizeable]': 'resizeEnabled'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { resizeEnabled: [{\r\n            type: Input\r\n        }], resize: [{\r\n            type: Output\r\n        }], onMousedown: [{\r\n            type: HostListener,\r\n            args: ['mousedown', ['$event']]\r\n        }], minWidth: [{\r\n            type: Input\r\n        }], maxWidth: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OrderableDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: '[orderable]' }]\r\n    }], function () { return [{ type: ɵngcc0.KeyValueDiffers }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, { reorder: [{\r\n            type: Output\r\n        }], targetChanged: [{\r\n            type: Output\r\n        }], draggables: [{\r\n            type: ContentChildren,\r\n            args: [DraggableDirective, { descendants: true }]\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LongPressDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: '[long-press]' }]\r\n    }], function () { return []; }, { pressEnabled: [{\r\n            type: Input\r\n        }], duration: [{\r\n            type: Input\r\n        }], longPressStart: [{\r\n            type: Output\r\n        }], longPressing: [{\r\n            type: Output\r\n        }], longPressEnd: [{\r\n            type: Output\r\n        }], press: [{\r\n            type: HostBinding,\r\n            args: ['class.press']\r\n        }], isLongPress: [{\r\n            type: HostBinding,\r\n            args: ['class.longpress']\r\n        }], onMouseDown: [{\r\n            type: HostListener,\r\n            args: ['mousedown', ['$event']]\r\n        }], pressModel: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollerComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-scroller',\r\n                template: ` <ng-content></ng-content> `,\r\n                host: {\r\n                    class: 'datatable-scroll'\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { scrollbarV: [{\r\n            type: Input\r\n        }], scrollbarH: [{\r\n            type: Input\r\n        }], scroll: [{\r\n            type: Output\r\n        }], scrollHeight: [{\r\n            type: HostBinding,\r\n            args: ['style.height.px']\r\n        }, {\r\n            type: Input\r\n        }], scrollWidth: [{\r\n            type: HostBinding,\r\n            args: ['style.width.px']\r\n        }, {\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatatableGroupHeaderTemplateDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[ngx-datatable-group-header-template]'\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatatableGroupHeaderDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: 'ngx-datatable-group-header' }]\r\n    }], function () { return []; }, { rowHeight: [{\r\n            type: Input\r\n        }], toggle: [{\r\n            type: Output\r\n        }], _templateInput: [{\r\n            type: Input,\r\n            args: ['template']\r\n        }], _templateQuery: [{\r\n            type: ContentChild,\r\n            args: [DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true }]\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableColumnHeaderDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: '[ngx-datatable-header-template]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableColumnCellDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: '[ngx-datatable-cell-template]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableColumnCellTreeToggle, [{\r\n        type: Directive,\r\n        args: [{ selector: '[ngx-datatable-tree-toggle]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableColumnDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: 'ngx-datatable-column' }]\r\n    }], function () { return [{ type: ColumnChangesService }]; }, { name: [{\r\n            type: Input\r\n        }], prop: [{\r\n            type: Input\r\n        }], frozenLeft: [{\r\n            type: Input\r\n        }], frozenRight: [{\r\n            type: Input\r\n        }], flexGrow: [{\r\n            type: Input\r\n        }], resizeable: [{\r\n            type: Input\r\n        }], comparator: [{\r\n            type: Input\r\n        }], pipe: [{\r\n            type: Input\r\n        }], sortable: [{\r\n            type: Input\r\n        }], draggable: [{\r\n            type: Input\r\n        }], canAutoResize: [{\r\n            type: Input\r\n        }], minWidth: [{\r\n            type: Input\r\n        }], width: [{\r\n            type: Input\r\n        }], maxWidth: [{\r\n            type: Input\r\n        }], checkboxable: [{\r\n            type: Input\r\n        }], headerCheckboxable: [{\r\n            type: Input\r\n        }], headerClass: [{\r\n            type: Input\r\n        }], cellClass: [{\r\n            type: Input\r\n        }], isTreeColumn: [{\r\n            type: Input\r\n        }], treeLevelIndent: [{\r\n            type: Input\r\n        }], summaryFunc: [{\r\n            type: Input\r\n        }], summaryTemplate: [{\r\n            type: Input\r\n        }], _cellTemplateInput: [{\r\n            type: Input,\r\n            args: ['cellTemplate']\r\n        }], _cellTemplateQuery: [{\r\n            type: ContentChild,\r\n            args: [DataTableColumnCellDirective, { read: TemplateRef, static: true }]\r\n        }], _headerTemplateInput: [{\r\n            type: Input,\r\n            args: ['headerTemplate']\r\n        }], _headerTemplateQuery: [{\r\n            type: ContentChild,\r\n            args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true }]\r\n        }], _treeToggleTemplateInput: [{\r\n            type: Input,\r\n            args: ['treeToggleTemplate']\r\n        }], _treeToggleTemplateQuery: [{\r\n            type: ContentChild,\r\n            args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true }]\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatatableRowDetailTemplateDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[ngx-datatable-row-detail-template]'\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatatableRowDetailDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: 'ngx-datatable-row-detail' }]\r\n    }], function () { return []; }, { rowHeight: [{\r\n            type: Input\r\n        }], toggle: [{\r\n            type: Output\r\n        }], _templateInput: [{\r\n            type: Input,\r\n            args: ['template']\r\n        }], _templateQuery: [{\r\n            type: ContentChild,\r\n            args: [DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true }]\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatatableFooterDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: 'ngx-datatable-footer' }]\r\n    }], null, { footerHeight: [{\r\n            type: Input\r\n        }], totalMessage: [{\r\n            type: Input\r\n        }], selectedMessage: [{\r\n            type: Input\r\n        }], pagerLeftArrowIcon: [{\r\n            type: Input\r\n        }], pagerRightArrowIcon: [{\r\n            type: Input\r\n        }], pagerPreviousIcon: [{\r\n            type: Input\r\n        }], pagerNextIcon: [{\r\n            type: Input\r\n        }], _templateInput: [{\r\n            type: Input,\r\n            args: ['template']\r\n        }], _templateQuery: [{\r\n            type: ContentChild,\r\n            args: [DataTableFooterTemplateDirective, { read: TemplateRef }]\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableBodyComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-body',\r\n                template: `\r\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\r\n    <datatable-selection\r\n      #selector\r\n      [selected]=\"selected\"\r\n      [rows]=\"rows\"\r\n      [selectCheck]=\"selectCheck\"\r\n      [selectEnabled]=\"selectEnabled\"\r\n      [selectionType]=\"selectionType\"\r\n      [rowIdentity]=\"rowIdentity\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n    >\r\n      <datatable-scroller\r\n        *ngIf=\"rows?.length\"\r\n        [scrollbarV]=\"scrollbarV\"\r\n        [scrollbarH]=\"scrollbarH\"\r\n        [scrollHeight]=\"scrollHeight\"\r\n        [scrollWidth]=\"columnGroupWidths?.total\"\r\n        (scroll)=\"onBodyScroll($event)\"\r\n      >\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n        <datatable-row-wrapper\r\n          [groupedRows]=\"groupedRows\"\r\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [ngStyle]=\"getRowsStyles(group)\"\r\n          [rowDetail]=\"rowDetail\"\r\n          [groupHeader]=\"groupHeader\"\r\n          [offsetX]=\"offsetX\"\r\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\r\n          [row]=\"group\"\r\n          [expanded]=\"getRowExpanded(group)\"\r\n          [rowIndex]=\"getRowIndex(group && group[i])\"\r\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\r\n        >\r\n          <datatable-body-row\r\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\r\n            tabindex=\"-1\"\r\n            [isSelected]=\"selector.getRowSelected(group)\"\r\n            [innerWidth]=\"innerWidth\"\r\n            [offsetX]=\"offsetX\"\r\n            [columns]=\"columns\"\r\n            [rowHeight]=\"getRowHeight(group)\"\r\n            [row]=\"group\"\r\n            [rowIndex]=\"getRowIndex(group)\"\r\n            [expanded]=\"getRowExpanded(group)\"\r\n            [rowClass]=\"rowClass\"\r\n            [displayCheck]=\"displayCheck\"\r\n            [treeStatus]=\"group && group.treeStatus\"\r\n            (treeAction)=\"onTreeAction(group)\"\r\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\r\n          >\r\n          </datatable-body-row>\r\n          <ng-template #groupedRowsTemplate>\r\n            <datatable-body-row\r\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\r\n              tabindex=\"-1\"\r\n              [isSelected]=\"selector.getRowSelected(row)\"\r\n              [innerWidth]=\"innerWidth\"\r\n              [offsetX]=\"offsetX\"\r\n              [columns]=\"columns\"\r\n              [rowHeight]=\"getRowHeight(row)\"\r\n              [row]=\"row\"\r\n              [group]=\"group.value\"\r\n              [rowIndex]=\"getRowIndex(row)\"\r\n              [expanded]=\"getRowExpanded(row)\"\r\n              [rowClass]=\"rowClass\"\r\n              (activate)=\"selector.onActivate($event, i)\"\r\n            >\r\n            </datatable-body-row>\r\n          </ng-template>\r\n        </datatable-row-wrapper>\r\n        <datatable-summary-row\r\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\r\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\r\n          [rowHeight]=\"summaryHeight\"\r\n          [offsetX]=\"offsetX\"\r\n          [innerWidth]=\"innerWidth\"\r\n          [rows]=\"rows\"\r\n          [columns]=\"columns\"\r\n        >\r\n        </datatable-summary-row>\r\n      </datatable-scroller>\r\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\r\n    </datatable-selection>\r\n  `,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: {\r\n                    class: 'datatable-body'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { selected: [{\r\n            type: Input\r\n        }], scroll: [{\r\n            type: Output\r\n        }], page: [{\r\n            type: Output\r\n        }], activate: [{\r\n            type: Output\r\n        }], select: [{\r\n            type: Output\r\n        }], detailToggle: [{\r\n            type: Output\r\n        }], rowContextmenu: [{\r\n            type: Output\r\n        }], treeAction: [{\r\n            type: Output\r\n        }], pageSize: [{\r\n            type: Input\r\n        }], rows: [{\r\n            type: Input\r\n        }], columns: [{\r\n            type: Input\r\n        }], offset: [{\r\n            type: Input\r\n        }], rowCount: [{\r\n            type: Input\r\n        }], bodyWidth: [{\r\n            type: HostBinding,\r\n            args: ['style.width']\r\n        }], bodyHeight: [{\r\n            type: Input\r\n        }, {\r\n            type: HostBinding,\r\n            args: ['style.height']\r\n        }], offsetX: [{\r\n            type: Input\r\n        }], loadingIndicator: [{\r\n            type: Input\r\n        }], scrollbarV: [{\r\n            type: Input\r\n        }], scrollbarH: [{\r\n            type: Input\r\n        }], externalPaging: [{\r\n            type: Input\r\n        }], rowHeight: [{\r\n            type: Input\r\n        }], emptyMessage: [{\r\n            type: Input\r\n        }], selectionType: [{\r\n            type: Input\r\n        }], rowIdentity: [{\r\n            type: Input\r\n        }], rowDetail: [{\r\n            type: Input\r\n        }], groupHeader: [{\r\n            type: Input\r\n        }], selectCheck: [{\r\n            type: Input\r\n        }], displayCheck: [{\r\n            type: Input\r\n        }], trackByProp: [{\r\n            type: Input\r\n        }], rowClass: [{\r\n            type: Input\r\n        }], groupedRows: [{\r\n            type: Input\r\n        }], groupExpansionDefault: [{\r\n            type: Input\r\n        }], innerWidth: [{\r\n            type: Input\r\n        }], groupRowsBy: [{\r\n            type: Input\r\n        }], virtualization: [{\r\n            type: Input\r\n        }], summaryRow: [{\r\n            type: Input\r\n        }], summaryPosition: [{\r\n            type: Input\r\n        }], summaryHeight: [{\r\n            type: Input\r\n        }], scroller: [{\r\n            type: ViewChild,\r\n            args: [ScrollerComponent]\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableHeaderComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-header',\r\n                template: `\r\n    <div\r\n      orderable\r\n      (reorder)=\"onColumnReordered($event)\"\r\n      (targetChanged)=\"onTargetChanged($event)\"\r\n      [style.width.px]=\"_columnGroupWidths.total\"\r\n      class=\"datatable-header-inner\"\r\n    >\r\n      <div\r\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\r\n        [class]=\"'datatable-row-' + colGroup.type\"\r\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\r\n      >\r\n        <datatable-header-cell\r\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\r\n          resizeable\r\n          [resizeEnabled]=\"column.resizeable\"\r\n          (resize)=\"onColumnResized($event, column)\"\r\n          long-press\r\n          [pressModel]=\"column\"\r\n          [pressEnabled]=\"reorderable && column.draggable\"\r\n          (longPressStart)=\"onLongPressStart($event)\"\r\n          (longPressEnd)=\"onLongPressEnd($event)\"\r\n          draggable\r\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\r\n          [dragY]=\"false\"\r\n          [dragModel]=\"column\"\r\n          [dragEventTarget]=\"dragEventTarget\"\r\n          [headerHeight]=\"headerHeight\"\r\n          [isTarget]=\"column.isTarget\"\r\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\r\n          [targetMarkerContext]=\"column.targetMarkerContext\"\r\n          [column]=\"column\"\r\n          [sortType]=\"sortType\"\r\n          [sorts]=\"sorts\"\r\n          [selectionType]=\"selectionType\"\r\n          [sortAscendingIcon]=\"sortAscendingIcon\"\r\n          [sortDescendingIcon]=\"sortDescendingIcon\"\r\n          [allRowsSelected]=\"allRowsSelected\"\r\n          (sort)=\"onSort($event)\"\r\n          (select)=\"select.emit($event)\"\r\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\r\n        >\r\n        </datatable-header-cell>\r\n      </div>\r\n    </div>\r\n  `,\r\n                host: {\r\n                    class: 'datatable-header'\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { sort: [{\r\n            type: Output\r\n        }], reorder: [{\r\n            type: Output\r\n        }], resize: [{\r\n            type: Output\r\n        }], select: [{\r\n            type: Output\r\n        }], columnContextmenu: [{\r\n            type: Output\r\n        }], innerWidth: [{\r\n            type: Input\r\n        }], headerHeight: [{\r\n            type: HostBinding,\r\n            args: ['style.height']\r\n        }, {\r\n            type: Input\r\n        }], columns: [{\r\n            type: Input\r\n        }], offsetX: [{\r\n            type: Input\r\n        }], headerWidth: [{\r\n            type: HostBinding,\r\n            args: ['style.width']\r\n        }], sorts: [{\r\n            type: Input\r\n        }], sortAscendingIcon: [{\r\n            type: Input\r\n        }], sortDescendingIcon: [{\r\n            type: Input\r\n        }], scrollbarH: [{\r\n            type: Input\r\n        }], dealsWithGroup: [{\r\n            type: Input\r\n        }], targetMarkerTemplate: [{\r\n            type: Input\r\n        }], sortType: [{\r\n            type: Input\r\n        }], allRowsSelected: [{\r\n            type: Input\r\n        }], selectionType: [{\r\n            type: Input\r\n        }], reorderable: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatatableComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'ngx-datatable',\r\n                template: \"<div visibilityObserver (visible)=\\\"recalculate()\\\">\\n  <datatable-header\\n    *ngIf=\\\"headerHeight\\\"\\n    [sorts]=\\\"sorts\\\"\\n    [sortType]=\\\"sortType\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [dealsWithGroup]=\\\"groupedRows !== undefined\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [headerHeight]=\\\"headerHeight\\\"\\n    [reorderable]=\\\"reorderable\\\"\\n    [targetMarkerTemplate]=\\\"targetMarkerTemplate\\\"\\n    [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n    [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n    [allRowsSelected]=\\\"allRowsSelected\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    (sort)=\\\"onColumnSort($event)\\\"\\n    (resize)=\\\"onColumnResize($event)\\\"\\n    (reorder)=\\\"onColumnReorder($event)\\\"\\n    (select)=\\\"onHeaderSelect($event)\\\"\\n    (columnContextmenu)=\\\"onColumnContextmenu($event)\\\"\\n  >\\n  </datatable-header>\\n  <datatable-body\\n    [groupRowsBy]=\\\"groupRowsBy\\\"\\n    [groupedRows]=\\\"groupedRows\\\"\\n    [rows]=\\\"_internalRows\\\"\\n    [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n    [scrollbarV]=\\\"scrollbarV\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [virtualization]=\\\"virtualization\\\"\\n    [loadingIndicator]=\\\"loadingIndicator\\\"\\n    [externalPaging]=\\\"externalPaging\\\"\\n    [rowHeight]=\\\"rowHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [offset]=\\\"offset\\\"\\n    [trackByProp]=\\\"trackByProp\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [rowDetail]=\\\"rowDetail\\\"\\n    [groupHeader]=\\\"groupHeader\\\"\\n    [selected]=\\\"selected\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [bodyHeight]=\\\"bodyHeight\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    [emptyMessage]=\\\"messages.emptyMessage\\\"\\n    [rowIdentity]=\\\"rowIdentity\\\"\\n    [rowClass]=\\\"rowClass\\\"\\n    [selectCheck]=\\\"selectCheck\\\"\\n    [displayCheck]=\\\"displayCheck\\\"\\n    [summaryRow]=\\\"summaryRow\\\"\\n    [summaryHeight]=\\\"summaryHeight\\\"\\n    [summaryPosition]=\\\"summaryPosition\\\"\\n    (page)=\\\"onBodyPage($event)\\\"\\n    (activate)=\\\"activate.emit($event)\\\"\\n    (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n    (select)=\\\"onBodySelect($event)\\\"\\n    (scroll)=\\\"onBodyScroll($event)\\\"\\n    (treeAction)=\\\"onTreeAction($event)\\\"\\n  >\\n  </datatable-body>\\n  <datatable-footer\\n    *ngIf=\\\"footerHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offset]=\\\"offset\\\"\\n    [footerHeight]=\\\"footerHeight\\\"\\n    [footerTemplate]=\\\"footer\\\"\\n    [totalMessage]=\\\"messages.totalMessage\\\"\\n    [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n    [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n    [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n    [selectedCount]=\\\"selected.length\\\"\\n    [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n    [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n    (page)=\\\"onFooterPage($event)\\\"\\n  >\\n  </datatable-footer>\\n</div>\\n\",\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: {\r\n                    class: 'ngx-datatable'\r\n                },\r\n                styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;transform:translate3d(0,0,0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:0}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:0}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:0}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\"]\r\n            }]\r\n    }], function () { return [{ type: ScrollbarHelper, decorators: [{\r\n                type: SkipSelf\r\n            }] }, { type: DimensionsHelper, decorators: [{\r\n                type: SkipSelf\r\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.KeyValueDiffers }, { type: ColumnChangesService }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: ['configuration']\r\n            }] }]; }, { selected: [{\r\n            type: Input\r\n        }], scrollbarV: [{\r\n            type: Input\r\n        }], scrollbarH: [{\r\n            type: Input\r\n        }], rowHeight: [{\r\n            type: Input\r\n        }], columnMode: [{\r\n            type: Input\r\n        }], headerHeight: [{\r\n            type: Input\r\n        }], footerHeight: [{\r\n            type: Input\r\n        }], externalPaging: [{\r\n            type: Input\r\n        }], externalSorting: [{\r\n            type: Input\r\n        }], loadingIndicator: [{\r\n            type: Input\r\n        }], reorderable: [{\r\n            type: Input\r\n        }], swapColumns: [{\r\n            type: Input\r\n        }], sortType: [{\r\n            type: Input\r\n        }], sorts: [{\r\n            type: Input\r\n        }], cssClasses: [{\r\n            type: Input\r\n        }], messages: [{\r\n            type: Input\r\n        }], groupExpansionDefault: [{\r\n            type: Input\r\n        }], selectAllRowsOnPage: [{\r\n            type: Input\r\n        }], virtualization: [{\r\n            type: Input\r\n        }], summaryRow: [{\r\n            type: Input\r\n        }], summaryHeight: [{\r\n            type: Input\r\n        }], summaryPosition: [{\r\n            type: Input\r\n        }], scroll: [{\r\n            type: Output\r\n        }], activate: [{\r\n            type: Output\r\n        }], select: [{\r\n            type: Output\r\n        }], sort: [{\r\n            type: Output\r\n        }], page: [{\r\n            type: Output\r\n        }], reorder: [{\r\n            type: Output\r\n        }], resize: [{\r\n            type: Output\r\n        }], tableContextmenu: [{\r\n            type: Output\r\n        }], treeAction: [{\r\n            type: Output\r\n        }], rowIdentity: [{\r\n            type: Input\r\n        }], rows: [{\r\n            type: Input\r\n        }], groupedRows: [{\r\n            type: Input\r\n        }], groupRowsBy: [{\r\n            type: Input\r\n        }], columns: [{\r\n            type: Input\r\n        }], limit: [{\r\n            type: Input\r\n        }], count: [{\r\n            type: Input\r\n        }], offset: [{\r\n            type: Input\r\n        }], isFixedHeader: [{\r\n            type: HostBinding,\r\n            args: ['class.fixed-header']\r\n        }], isFixedRow: [{\r\n            type: HostBinding,\r\n            args: ['class.fixed-row']\r\n        }], isVertScroll: [{\r\n            type: HostBinding,\r\n            args: ['class.scroll-vertical']\r\n        }], isVirtualized: [{\r\n            type: HostBinding,\r\n            args: ['class.virtualized']\r\n        }], isHorScroll: [{\r\n            type: HostBinding,\r\n            args: ['class.scroll-horz']\r\n        }], isSelectable: [{\r\n            type: HostBinding,\r\n            args: ['class.selectable']\r\n        }], isCheckboxSelection: [{\r\n            type: HostBinding,\r\n            args: ['class.checkbox-selection']\r\n        }], isCellSelection: [{\r\n            type: HostBinding,\r\n            args: ['class.cell-selection']\r\n        }], isSingleSelection: [{\r\n            type: HostBinding,\r\n            args: ['class.single-selection']\r\n        }], isMultiSelection: [{\r\n            type: HostBinding,\r\n            args: ['class.multi-selection']\r\n        }], isMultiClickSelection: [{\r\n            type: HostBinding,\r\n            args: ['class.multi-click-selection']\r\n        }], columnTemplates: [{\r\n            type: ContentChildren,\r\n            args: [DataTableColumnDirective]\r\n        }], \r\n    /**\r\n     * Window resize handler to update sizes.\r\n     */\r\n    onWindowResize: [{\r\n            type: HostListener,\r\n            args: ['window:resize']\r\n        }], targetMarkerTemplate: [{\r\n            type: Input\r\n        }], selectionType: [{\r\n            type: Input\r\n        }], rowClass: [{\r\n            type: Input\r\n        }], selectCheck: [{\r\n            type: Input\r\n        }], displayCheck: [{\r\n            type: Input\r\n        }], trackByProp: [{\r\n            type: Input\r\n        }], treeFromRelation: [{\r\n            type: Input\r\n        }], treeToRelation: [{\r\n            type: Input\r\n        }], rowDetail: [{\r\n            type: ContentChild,\r\n            args: [DatatableRowDetailDirective]\r\n        }], groupHeader: [{\r\n            type: ContentChild,\r\n            args: [DatatableGroupHeaderDirective]\r\n        }], footer: [{\r\n            type: ContentChild,\r\n            args: [DatatableFooterDirective]\r\n        }], bodyComponent: [{\r\n            type: ViewChild,\r\n            args: [DataTableBodyComponent]\r\n        }], headerComponent: [{\r\n            type: ViewChild,\r\n            args: [DataTableHeaderComponent]\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableHeaderCellComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-header-cell',\r\n                template: `\r\n    <div class=\"datatable-header-cell-template-wrap\">\r\n      <ng-template\r\n        *ngIf=\"isTarget\"\r\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\r\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\r\n      >\r\n      </ng-template>\r\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\r\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\r\n      </label>\r\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\r\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\r\n      </span>\r\n      <ng-template\r\n        *ngIf=\"column.headerTemplate\"\r\n        [ngTemplateOutlet]=\"column.headerTemplate\"\r\n        [ngTemplateOutletContext]=\"cellContext\"\r\n      >\r\n      </ng-template>\r\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\r\n    </div>\r\n  `,\r\n                host: {\r\n                    class: 'datatable-header-cell'\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { sort: [{\r\n            type: Output\r\n        }], select: [{\r\n            type: Output\r\n        }], columnContextmenu: [{\r\n            type: Output\r\n        }], allRowsSelected: [{\r\n            type: Input\r\n        }], column: [{\r\n            type: Input\r\n        }], sorts: [{\r\n            type: Input\r\n        }], columnCssClasses: [{\r\n            type: HostBinding,\r\n            args: ['class']\r\n        }], name: [{\r\n            type: HostBinding,\r\n            args: ['attr.title']\r\n        }], minWidth: [{\r\n            type: HostBinding,\r\n            args: ['style.minWidth.px']\r\n        }], maxWidth: [{\r\n            type: HostBinding,\r\n            args: ['style.maxWidth.px']\r\n        }], width: [{\r\n            type: HostBinding,\r\n            args: ['style.width.px']\r\n        }], onContextmenu: [{\r\n            type: HostListener,\r\n            args: ['contextmenu', ['$event']]\r\n        }], sortType: [{\r\n            type: Input\r\n        }], sortAscendingIcon: [{\r\n            type: Input\r\n        }], sortDescendingIcon: [{\r\n            type: Input\r\n        }], isTarget: [{\r\n            type: Input\r\n        }], targetMarkerTemplate: [{\r\n            type: Input\r\n        }], targetMarkerContext: [{\r\n            type: Input\r\n        }], selectionType: [{\r\n            type: Input\r\n        }], headerHeight: [{\r\n            type: HostBinding,\r\n            args: ['style.height.px']\r\n        }, {\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableFooterComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-footer',\r\n                template: `\r\n    <div\r\n      class=\"datatable-footer-inner\"\r\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\r\n      [style.height.px]=\"footerHeight\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"footerTemplate\"\r\n        [ngTemplateOutlet]=\"footerTemplate.template\"\r\n        [ngTemplateOutletContext]=\"{\r\n          rowCount: rowCount,\r\n          pageSize: pageSize,\r\n          selectedCount: selectedCount,\r\n          curPage: curPage,\r\n          offset: offset\r\n        }\"\r\n      >\r\n      </ng-template>\r\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\r\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\r\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\r\n      </div>\r\n      <datatable-pager\r\n        *ngIf=\"!footerTemplate\"\r\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\r\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\r\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\r\n        [pagerNextIcon]=\"pagerNextIcon\"\r\n        [page]=\"curPage\"\r\n        [size]=\"pageSize\"\r\n        [count]=\"rowCount\"\r\n        [hidden]=\"!isVisible\"\r\n        (change)=\"page.emit($event)\"\r\n      >\r\n      </datatable-pager>\r\n    </div>\r\n  `,\r\n                host: {\r\n                    class: 'datatable-footer'\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            }]\r\n    }], function () { return []; }, { selectedCount: [{\r\n            type: Input\r\n        }], page: [{\r\n            type: Output\r\n        }], footerHeight: [{\r\n            type: Input\r\n        }], rowCount: [{\r\n            type: Input\r\n        }], pageSize: [{\r\n            type: Input\r\n        }], offset: [{\r\n            type: Input\r\n        }], pagerLeftArrowIcon: [{\r\n            type: Input\r\n        }], pagerRightArrowIcon: [{\r\n            type: Input\r\n        }], pagerPreviousIcon: [{\r\n            type: Input\r\n        }], pagerNextIcon: [{\r\n            type: Input\r\n        }], totalMessage: [{\r\n            type: Input\r\n        }], footerTemplate: [{\r\n            type: Input\r\n        }], selectedMessage: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTablePagerComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-pager',\r\n                template: `\r\n    <ul class=\"pager\">\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\r\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canPrevious()\">\r\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\r\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li\r\n        role=\"button\"\r\n        [attr.aria-label]=\"'page ' + pg.number\"\r\n        class=\"pages\"\r\n        *ngFor=\"let pg of pages\"\r\n        [class.active]=\"pg.number === page\"\r\n      >\r\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\r\n          {{ pg.text }}\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\r\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n      <li [class.disabled]=\"!canNext()\">\r\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\r\n          <i class=\"{{ pagerNextIcon }}\"></i>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  `,\r\n                host: {\r\n                    class: 'datatable-pager'\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            }]\r\n    }], function () { return []; }, { change: [{\r\n            type: Output\r\n        }], size: [{\r\n            type: Input\r\n        }], count: [{\r\n            type: Input\r\n        }], page: [{\r\n            type: Input\r\n        }], pagerLeftArrowIcon: [{\r\n            type: Input\r\n        }], pagerRightArrowIcon: [{\r\n            type: Input\r\n        }], pagerPreviousIcon: [{\r\n            type: Input\r\n        }], pagerNextIcon: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProgressBarComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-progress',\r\n                template: `\r\n    <div class=\"progress-linear\" role=\"progressbar\">\r\n      <div class=\"container\">\r\n        <div class=\"bar\"></div>\r\n      </div>\r\n    </div>\r\n  `,\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableBodyRowComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-body-row',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                template: `\r\n    <div\r\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\r\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\r\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\r\n    >\r\n      <datatable-body-cell\r\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\r\n        tabindex=\"-1\"\r\n        [row]=\"row\"\r\n        [group]=\"group\"\r\n        [expanded]=\"expanded\"\r\n        [isSelected]=\"isSelected\"\r\n        [rowIndex]=\"rowIndex\"\r\n        [column]=\"column\"\r\n        [rowHeight]=\"rowHeight\"\r\n        [displayCheck]=\"displayCheck\"\r\n        [treeStatus]=\"treeStatus\"\r\n        (activate)=\"onActivate($event, ii)\"\r\n        (treeAction)=\"onTreeAction()\"\r\n      >\r\n      </datatable-body-cell>\r\n    </div>\r\n  `\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.KeyValueDiffers }, { type: ScrollbarHelper, decorators: [{\r\n                type: SkipSelf\r\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { treeStatus: [{\r\n            type: Input\r\n        }], activate: [{\r\n            type: Output\r\n        }], treeAction: [{\r\n            type: Output\r\n        }], columns: [{\r\n            type: Input\r\n        }], innerWidth: [{\r\n            type: Input\r\n        }], offsetX: [{\r\n            type: Input\r\n        }], cssClass: [{\r\n            type: HostBinding,\r\n            args: ['class']\r\n        }], columnsTotalWidths: [{\r\n            type: HostBinding,\r\n            args: ['style.width.px']\r\n        }], onKeyDown: [{\r\n            type: HostListener,\r\n            args: ['keydown', ['$event']]\r\n        }], onMouseenter: [{\r\n            type: HostListener,\r\n            args: ['mouseenter', ['$event']]\r\n        }], expanded: [{\r\n            type: Input\r\n        }], rowClass: [{\r\n            type: Input\r\n        }], row: [{\r\n            type: Input\r\n        }], group: [{\r\n            type: Input\r\n        }], isSelected: [{\r\n            type: Input\r\n        }], rowIndex: [{\r\n            type: Input\r\n        }], displayCheck: [{\r\n            type: Input\r\n        }], rowHeight: [{\r\n            type: HostBinding,\r\n            args: ['style.height.px']\r\n        }, {\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableRowWrapperComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-row-wrapper',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                template: `\r\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\r\n      <ng-template\r\n        *ngIf=\"groupHeader && groupHeader.template\"\r\n        [ngTemplateOutlet]=\"groupHeader.template\"\r\n        [ngTemplateOutletContext]=\"groupContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\r\n    </ng-content>\r\n    <div\r\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\r\n      [style.height.px]=\"detailRowHeight\"\r\n      class=\"datatable-row-detail\"\r\n    >\r\n      <ng-template\r\n        *ngIf=\"rowDetail && rowDetail.template\"\r\n        [ngTemplateOutlet]=\"rowDetail.template\"\r\n        [ngTemplateOutletContext]=\"rowContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n                host: {\r\n                    class: 'datatable-row-wrapper'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.KeyValueDiffers }]; }, { rowContextmenu: [{\r\n            type: Output\r\n        }], rowIndex: [{\r\n            type: Input\r\n        }], expanded: [{\r\n            type: Input\r\n        }], onContextmenu: [{\r\n            type: HostListener,\r\n            args: ['contextmenu', ['$event']]\r\n        }], innerWidth: [{\r\n            type: Input\r\n        }], rowDetail: [{\r\n            type: Input\r\n        }], groupHeader: [{\r\n            type: Input\r\n        }], offsetX: [{\r\n            type: Input\r\n        }], detailRowHeight: [{\r\n            type: Input\r\n        }], row: [{\r\n            type: Input\r\n        }], groupedRows: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableBodyCellComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-body-cell',\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                template: `\r\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\r\n      <label\r\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\r\n        class=\"datatable-checkbox\"\r\n      >\r\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\r\n      </label>\r\n      <ng-container *ngIf=\"column.isTreeColumn\">\r\n        <button\r\n          *ngIf=\"!column.treeToggleTemplate\"\r\n          class=\"datatable-tree-button\"\r\n          [disabled]=\"treeStatus === 'disabled'\"\r\n          (click)=\"onTreeAction()\"\r\n        >\r\n          <span>\r\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\r\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\r\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\r\n          </span>\r\n        </button>\r\n        <ng-template\r\n          *ngIf=\"column.treeToggleTemplate\"\r\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\r\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\r\n        >\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\r\n      <ng-template\r\n        #cellTemplate\r\n        *ngIf=\"column.cellTemplate\"\r\n        [ngTemplateOutlet]=\"column.cellTemplate\"\r\n        [ngTemplateOutletContext]=\"cellContext\"\r\n      >\r\n      </ng-template>\r\n    </div>\r\n  `\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { activate: [{\r\n            type: Output\r\n        }], treeAction: [{\r\n            type: Output\r\n        }], group: [{\r\n            type: Input\r\n        }], rowHeight: [{\r\n            type: Input\r\n        }], isSelected: [{\r\n            type: Input\r\n        }], expanded: [{\r\n            type: Input\r\n        }], rowIndex: [{\r\n            type: Input\r\n        }], column: [{\r\n            type: Input\r\n        }], row: [{\r\n            type: Input\r\n        }], sorts: [{\r\n            type: Input\r\n        }], treeStatus: [{\r\n            type: Input\r\n        }], columnCssClasses: [{\r\n            type: HostBinding,\r\n            args: ['class']\r\n        }], width: [{\r\n            type: HostBinding,\r\n            args: ['style.width.px']\r\n        }], minWidth: [{\r\n            type: HostBinding,\r\n            args: ['style.minWidth.px']\r\n        }], maxWidth: [{\r\n            type: HostBinding,\r\n            args: ['style.maxWidth.px']\r\n        }], height: [{\r\n            type: HostBinding,\r\n            args: ['style.height']\r\n        }], onFocus: [{\r\n            type: HostListener,\r\n            args: ['focus']\r\n        }], onBlur: [{\r\n            type: HostListener,\r\n            args: ['blur']\r\n        }], onClick: [{\r\n            type: HostListener,\r\n            args: ['click', ['$event']]\r\n        }], onDblClick: [{\r\n            type: HostListener,\r\n            args: ['dblclick', ['$event']]\r\n        }], onKeyDown: [{\r\n            type: HostListener,\r\n            args: ['keydown', ['$event']]\r\n        }], displayCheck: [{\r\n            type: Input\r\n        }], cellTemplate: [{\r\n            type: ViewChild,\r\n            args: ['cellTemplate', { read: ViewContainerRef, static: true }]\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableSelectionComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-selection',\r\n                template: ` <ng-content></ng-content> `,\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            }]\r\n    }], function () { return []; }, { activate: [{\r\n            type: Output\r\n        }], select: [{\r\n            type: Output\r\n        }], rows: [{\r\n            type: Input\r\n        }], selected: [{\r\n            type: Input\r\n        }], selectEnabled: [{\r\n            type: Input\r\n        }], selectionType: [{\r\n            type: Input\r\n        }], rowIdentity: [{\r\n            type: Input\r\n        }], selectCheck: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataTableSummaryRowComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'datatable-summary-row',\r\n                template: `\r\n    <datatable-body-row\r\n      *ngIf=\"summaryRow && _internalColumns\"\r\n      tabindex=\"-1\"\r\n      [innerWidth]=\"innerWidth\"\r\n      [offsetX]=\"offsetX\"\r\n      [columns]=\"_internalColumns\"\r\n      [rowHeight]=\"rowHeight\"\r\n      [row]=\"summaryRow\"\r\n      [rowIndex]=\"-1\"\r\n    >\r\n    </datatable-body-row>\r\n  `,\r\n                host: {\r\n                    class: 'datatable-summary-row'\r\n                }\r\n            }]\r\n    }], function () { return []; }, { rows: [{\r\n            type: Input\r\n        }], columns: [{\r\n            type: Input\r\n        }], rowHeight: [{\r\n            type: Input\r\n        }], offsetX: [{\r\n            type: Input\r\n        }], innerWidth: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxDatatableModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [CommonModule],\r\n                providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\r\n                declarations: [\r\n                    DataTableFooterTemplateDirective,\r\n                    VisibilityDirective,\r\n                    DraggableDirective,\r\n                    ResizeableDirective,\r\n                    OrderableDirective,\r\n                    LongPressDirective,\r\n                    ScrollerComponent,\r\n                    DatatableComponent,\r\n                    DataTableColumnDirective,\r\n                    DataTableHeaderComponent,\r\n                    DataTableHeaderCellComponent,\r\n                    DataTableBodyComponent,\r\n                    DataTableFooterComponent,\r\n                    DataTablePagerComponent,\r\n                    ProgressBarComponent,\r\n                    DataTableBodyRowComponent,\r\n                    DataTableRowWrapperComponent,\r\n                    DatatableRowDetailDirective,\r\n                    DatatableGroupHeaderDirective,\r\n                    DatatableRowDetailTemplateDirective,\r\n                    DataTableBodyCellComponent,\r\n                    DataTableSelectionComponent,\r\n                    DataTableColumnHeaderDirective,\r\n                    DataTableColumnCellDirective,\r\n                    DataTableColumnCellTreeToggle,\r\n                    DatatableFooterDirective,\r\n                    DatatableGroupHeaderTemplateDirective,\r\n                    DataTableSummaryRowComponent\r\n                ],\r\n                exports: [\r\n                    DatatableComponent,\r\n                    DatatableRowDetailDirective,\r\n                    DatatableGroupHeaderDirective,\r\n                    DatatableRowDetailTemplateDirective,\r\n                    DataTableColumnDirective,\r\n                    DataTableColumnHeaderDirective,\r\n                    DataTableColumnCellDirective,\r\n                    DataTableColumnCellTreeToggle,\r\n                    DataTableFooterTemplateDirective,\r\n                    DatatableFooterDirective,\r\n                    DataTablePagerComponent,\r\n                    DatatableGroupHeaderTemplateDirective\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDatatableModule, { declarations: function () { return [DataTableFooterTemplateDirective, VisibilityDirective, DraggableDirective, ResizeableDirective, OrderableDirective, LongPressDirective, ScrollerComponent, DatatableComponent, DataTableColumnDirective, DataTableHeaderComponent, DataTableHeaderCellComponent, DataTableBodyComponent, DataTableFooterComponent, DataTablePagerComponent, ProgressBarComponent, DataTableBodyRowComponent, DataTableRowWrapperComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableBodyCellComponent, DataTableSelectionComponent, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DatatableFooterDirective, DatatableGroupHeaderTemplateDirective, DataTableSummaryRowComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [DatatableComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableFooterTemplateDirective, DatatableFooterDirective, DataTablePagerComponent, DatatableGroupHeaderTemplateDirective]; } }); })();\r\n\r\nvar ClickType;\r\n(function (ClickType) {\r\n    ClickType[\"single\"] = \"single\";\r\n    ClickType[\"double\"] = \"double\";\r\n})(ClickType || (ClickType = {}));\r\n\r\nif (typeof document !== 'undefined' && !document.elementsFromPoint) {\r\n    document.elementsFromPoint = elementsFromPoint;\r\n}\r\n/*tslint:disable*/\r\n/**\r\n * Polyfill for `elementsFromPoint`\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\r\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\r\n * https://gist.github.com/oslego/7265412\r\n */\r\nfunction elementsFromPoint(x, y) {\r\n    const elements = [];\r\n    const previousPointerEvents = [];\r\n    let current; // TODO: window.getComputedStyle should be used with inferred type (Element)\r\n    let i;\r\n    let d;\r\n    //if (document === undefined) return elements;\r\n    // get all elements via elementFromPoint, and remove them from hit-testing in order\r\n    while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\r\n        // push the element and its current style\r\n        elements.push(current);\r\n        previousPointerEvents.push({\r\n            value: current.style.getPropertyValue('pointer-events'),\r\n            priority: current.style.getPropertyPriority('pointer-events')\r\n        });\r\n        // add \"pointer-events: none\", to get to the underlying element\r\n        current.style.setProperty('pointer-events', 'none', 'important');\r\n    }\r\n    // restore the previous pointer-events values\r\n    for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]);) {\r\n        elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\r\n    }\r\n    // return our results\r\n    return elements;\r\n}\r\n/*tslint:enable*/\r\n\r\n/*\r\n * Public API Surface of ngx-datatable\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ClickType, ColumnChangesService, ColumnMode, ContextmenuType, DataTableBodyCellComponent, DataTableBodyComponent, DataTableBodyRowComponent, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableFooterComponent, DataTableFooterTemplateDirective, DataTableHeaderCellComponent, DataTableHeaderComponent, DataTablePagerComponent, DataTableRowWrapperComponent, DataTableSelectionComponent, DataTableSummaryRowComponent, DatatableComponent, DatatableFooterDirective, DatatableGroupHeaderDirective, DatatableGroupHeaderTemplateDirective, DatatableRowDetailDirective, DatatableRowDetailTemplateDirective, DimensionsHelper, DraggableDirective, Keys, LongPressDirective, NgxDatatableModule, OrderableDirective, ProgressBarComponent, ResizeableDirective, RowHeightCache, ScrollbarHelper, ScrollerComponent, SelectionType, SortDirection, SortType, VisibilityDirective, adjustColumnWidths, camelCase, columnGroupWidths, columnTotalWidth, columnsByPin, columnsByPinArr, columnsTotalWidth, deCamelCase, deepValueGetter, elementsFromPoint, emptyStringGetter, forceFillColumnWidths, getTotalFlexGrow, getVendorPrefixedName, getterForProp, groupRowsByParents, id, isNullOrUndefined, nextSortDir, numericIndexGetter, optionalGetterForProp, orderByComparator, selectRows, selectRowsBetween, setColumnDefaults, shallowValueGetter, sortRows, throttle, throttleable, translateTemplates, translateXY, ɵ0 };\r\n\r\n//# sourceMappingURL=swimlane-ngx-datatable.js.map"],"sourceRoot":"webpack:///"}