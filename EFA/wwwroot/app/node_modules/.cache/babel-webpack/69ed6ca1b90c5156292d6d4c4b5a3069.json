{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from 'qrcode';\nconst _c0 = [\"qrcElement\"];\n\nclass QRCodeComponent {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.allowEmptyString = false;\n    this.colorDark = '#000000ff';\n    this.colorLight = '#ffffffff';\n    this.cssClass = 'qrcode';\n    this.elementType = 'canvas';\n    this.errorCorrectionLevel = 'M';\n    this.margin = 4;\n    this.qrdata = '';\n    this.scale = 4;\n    this.width = 10;\n  }\n\n  ngOnChanges() {\n    this.createQRCode();\n  }\n\n  isValidQrCodeText(data) {\n    if (this.allowEmptyString === false) {\n      return !(typeof data === 'undefined' || data === '' || data === 'null' || data === null);\n    }\n\n    return !(typeof data === 'undefined');\n  }\n\n  toDataURL() {\n    return new Promise((resolve, reject) => {\n      QRCode.toDataURL(this.qrdata, {\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        },\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        version: this.version,\n        width: this.width\n      }, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n\n  toCanvas(canvas) {\n    return new Promise((resolve, reject) => {\n      QRCode.toCanvas(canvas, this.qrdata, {\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        },\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        version: this.version,\n        width: this.width\n      }, error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve('success');\n        }\n      });\n    });\n  }\n\n  toSVG() {\n    return new Promise((resolve, reject) => {\n      QRCode.toString(this.qrdata, {\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        },\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        type: 'svg',\n        version: this.version,\n        width: this.width\n      }, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n\n  renderElement(element) {\n    for (const node of this.qrcElement.nativeElement.childNodes) {\n      this.renderer.removeChild(this.qrcElement.nativeElement, node);\n    }\n\n    this.renderer.appendChild(this.qrcElement.nativeElement, element);\n  }\n\n  createQRCode() {\n    // Set sensitive defaults\n    if (this.version && this.version > 40) {\n      console.warn('[angularx-qrcode] max value for `version` is 40');\n      this.version = 40;\n    } else if (this.version && this.version < 1) {\n      console.warn('[angularx-qrcode]`min value for `version` is 1');\n      this.version = 1;\n    } else if (this.version !== undefined && isNaN(this.version)) {\n      console.warn('[angularx-qrcode] version should be a number, defaulting to auto.');\n      this.version = undefined;\n    }\n\n    try {\n      if (!this.isValidQrCodeText(this.qrdata)) {\n        throw new Error('[angularx-qrcode] Field `qrdata` is empty, set `allowEmptyString=\"true\"` to overwrite this behaviour.');\n      } // This is a fix to allow an empty string as qrdata\n\n\n      if (this.isValidQrCodeText(this.qrdata) && this.qrdata === '') {\n        this.qrdata = ' ';\n      }\n\n      let element;\n\n      switch (this.elementType) {\n        case 'canvas':\n          element = this.renderer.createElement('canvas');\n          this.toCanvas(element).then(() => {\n            this.renderElement(element);\n          }).catch(e => {\n            console.error('[angularx-qrcode] canvas error:', e);\n          });\n          break;\n\n        case 'svg':\n          element = this.renderer.createElement('div');\n          this.toSVG().then(svgString => {\n            this.renderer.setProperty(element, 'innerHTML', svgString);\n            const innerElement = element.firstChild;\n            this.renderer.setAttribute(innerElement, 'height', `${this.width}`);\n            this.renderer.setAttribute(innerElement, 'width', `${this.width}`);\n            this.renderElement(innerElement);\n          }).catch(e => {\n            console.error('[angularx-qrcode] svg error:', e);\n          });\n          break;\n\n        case 'url':\n        case 'img':\n        default:\n          element = this.renderer.createElement('img');\n          this.toDataURL().then(dataUrl => {\n            element.setAttribute('src', dataUrl);\n            this.renderElement(element);\n          }).catch(e => {\n            console.error('[angularx-qrcode] img/url error:', e);\n          });\n      }\n    } catch (e) {\n      console.error('[angularx-qrcode] Error generating QR Code:', e.message);\n    }\n  }\n\n}\n\nQRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n  return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nQRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: QRCodeComponent,\n  selectors: [[\"qrcode\"]],\n  viewQuery: function QRCodeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n    }\n  },\n  inputs: {\n    allowEmptyString: \"allowEmptyString\",\n    colorDark: \"colorDark\",\n    colorLight: \"colorLight\",\n    cssClass: \"cssClass\",\n    elementType: \"elementType\",\n    errorCorrectionLevel: \"errorCorrectionLevel\",\n    margin: \"margin\",\n    qrdata: \"qrdata\",\n    scale: \"scale\",\n    version: \"version\",\n    width: \"width\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"qrcElement\", \"\"]],\n  template: function QRCodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClass);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'qrcode',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `<div #qrcElement [class]=\"cssClass\"></div>`\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }];\n  }, {\n    allowEmptyString: [{\n      type: Input\n    }],\n    colorDark: [{\n      type: Input\n    }],\n    colorLight: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementType: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    qrdata: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    version: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    qrcElement: [{\n      type: ViewChild,\n      args: ['qrcElement', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass QRCodeModule {}\n\nQRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n  return new (t || QRCodeModule)();\n};\n\nQRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QRCodeModule\n});\nQRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: []\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeModule, [{\n    type: NgModule,\n    args: [{\n      providers: [],\n      declarations: [QRCodeComponent],\n      exports: [QRCodeComponent]\n    }]\n  }], null, null);\n})();\n\nvar QRCodeErrorCorrectionLevel;\n\n(function (QRCodeErrorCorrectionLevel) {\n  QRCodeErrorCorrectionLevel[\"low\"] = \"low\";\n  QRCodeErrorCorrectionLevel[\"medium\"] = \"medium\";\n  QRCodeErrorCorrectionLevel[\"quartile\"] = \"quartile\";\n  QRCodeErrorCorrectionLevel[\"high\"] = \"high\";\n  QRCodeErrorCorrectionLevel[\"L\"] = \"L\";\n  QRCodeErrorCorrectionLevel[\"M\"] = \"M\";\n  QRCodeErrorCorrectionLevel[\"Q\"] = \"Q\";\n  QRCodeErrorCorrectionLevel[\"H\"] = \"H\";\n})(QRCodeErrorCorrectionLevel || (QRCodeErrorCorrectionLevel = {}));\n\nvar QRCodeElementType;\n\n(function (QRCodeElementType) {\n  QRCodeElementType[\"url\"] = \"url\";\n  QRCodeElementType[\"img\"] = \"img\";\n  QRCodeElementType[\"canvas\"] = \"canvas\";\n  QRCodeElementType[\"svg\"] = \"svg\";\n})(QRCodeElementType || (QRCodeElementType = {}));\n/*\r\n * Public API Surface of angularx-qrcode\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { QRCodeComponent, QRCodeElementType, QRCodeErrorCorrectionLevel, QRCodeModule }; //# sourceMappingURL=angularx-qrcode.js.map","map":{"version":3,"sources":["C:/Users/zubey/source/repos/EdisFightAcademy/EFA/wwwroot/app/node_modules/angularx-qrcode/fesm2015/angularx-qrcode.js"],"names":["i0","Component","ChangeDetectionStrategy","Input","ViewChild","NgModule","QRCode","QRCodeComponent","constructor","renderer","allowEmptyString","colorDark","colorLight","cssClass","elementType","errorCorrectionLevel","margin","qrdata","scale","width","ngOnChanges","createQRCode","isValidQrCodeText","data","toDataURL","Promise","resolve","reject","color","dark","light","version","err","url","toCanvas","canvas","error","toSVG","toString","type","renderElement","element","node","qrcElement","nativeElement","childNodes","removeChild","appendChild","console","warn","undefined","isNaN","Error","createElement","then","catch","e","svgString","setProperty","innerElement","firstChild","setAttribute","dataUrl","message","ɵfac","Renderer2","ɵcmp","args","selector","changeDetection","OnPush","template","static","QRCodeModule","ɵmod","ɵinj","providers","declarations","exports","QRCodeErrorCorrectionLevel","QRCodeElementType"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Component, ChangeDetectionStrategy, Input, ViewChild, NgModule } from '@angular/core';\r\nimport * as QRCode from 'qrcode';\r\n\r\nclass QRCodeComponent {\r\n    constructor(renderer) {\r\n        this.renderer = renderer;\r\n        this.allowEmptyString = false;\r\n        this.colorDark = '#000000ff';\r\n        this.colorLight = '#ffffffff';\r\n        this.cssClass = 'qrcode';\r\n        this.elementType = 'canvas';\r\n        this.errorCorrectionLevel = 'M';\r\n        this.margin = 4;\r\n        this.qrdata = '';\r\n        this.scale = 4;\r\n        this.width = 10;\r\n    }\r\n    ngOnChanges() {\r\n        this.createQRCode();\r\n    }\r\n    isValidQrCodeText(data) {\r\n        if (this.allowEmptyString === false) {\r\n            return !(typeof data === 'undefined' ||\r\n                data === '' ||\r\n                data === 'null' ||\r\n                data === null);\r\n        }\r\n        return !(typeof data === 'undefined');\r\n    }\r\n    toDataURL() {\r\n        return new Promise((resolve, reject) => {\r\n            QRCode.toDataURL(this.qrdata, {\r\n                color: {\r\n                    dark: this.colorDark,\r\n                    light: this.colorLight,\r\n                },\r\n                errorCorrectionLevel: this.errorCorrectionLevel,\r\n                margin: this.margin,\r\n                scale: this.scale,\r\n                version: this.version,\r\n                width: this.width,\r\n            }, (err, url) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(url);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    toCanvas(canvas) {\r\n        return new Promise((resolve, reject) => {\r\n            QRCode.toCanvas(canvas, this.qrdata, {\r\n                color: {\r\n                    dark: this.colorDark,\r\n                    light: this.colorLight,\r\n                },\r\n                errorCorrectionLevel: this.errorCorrectionLevel,\r\n                margin: this.margin,\r\n                scale: this.scale,\r\n                version: this.version,\r\n                width: this.width,\r\n            }, (error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                }\r\n                else {\r\n                    resolve('success');\r\n                }\r\n            });\r\n        });\r\n    }\r\n    toSVG() {\r\n        return new Promise((resolve, reject) => {\r\n            QRCode.toString(this.qrdata, {\r\n                color: {\r\n                    dark: this.colorDark,\r\n                    light: this.colorLight,\r\n                },\r\n                errorCorrectionLevel: this.errorCorrectionLevel,\r\n                margin: this.margin,\r\n                scale: this.scale,\r\n                type: 'svg',\r\n                version: this.version,\r\n                width: this.width,\r\n            }, (err, url) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(url);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    renderElement(element) {\r\n        for (const node of this.qrcElement.nativeElement.childNodes) {\r\n            this.renderer.removeChild(this.qrcElement.nativeElement, node);\r\n        }\r\n        this.renderer.appendChild(this.qrcElement.nativeElement, element);\r\n    }\r\n    createQRCode() {\r\n        // Set sensitive defaults\r\n        if (this.version && this.version > 40) {\r\n            console.warn('[angularx-qrcode] max value for `version` is 40');\r\n            this.version = 40;\r\n        }\r\n        else if (this.version && this.version < 1) {\r\n            console.warn('[angularx-qrcode]`min value for `version` is 1');\r\n            this.version = 1;\r\n        }\r\n        else if (this.version !== undefined && isNaN(this.version)) {\r\n            console.warn('[angularx-qrcode] version should be a number, defaulting to auto.');\r\n            this.version = undefined;\r\n        }\r\n        try {\r\n            if (!this.isValidQrCodeText(this.qrdata)) {\r\n                throw new Error('[angularx-qrcode] Field `qrdata` is empty, set `allowEmptyString=\"true\"` to overwrite this behaviour.');\r\n            }\r\n            // This is a fix to allow an empty string as qrdata\r\n            if (this.isValidQrCodeText(this.qrdata) && this.qrdata === '') {\r\n                this.qrdata = ' ';\r\n            }\r\n            let element;\r\n            switch (this.elementType) {\r\n                case 'canvas':\r\n                    element = this.renderer.createElement('canvas');\r\n                    this.toCanvas(element)\r\n                        .then(() => {\r\n                        this.renderElement(element);\r\n                    })\r\n                        .catch((e) => {\r\n                        console.error('[angularx-qrcode] canvas error:', e);\r\n                    });\r\n                    break;\r\n                case 'svg':\r\n                    element = this.renderer.createElement('div');\r\n                    this.toSVG()\r\n                        .then((svgString) => {\r\n                        this.renderer.setProperty(element, 'innerHTML', svgString);\r\n                        const innerElement = element.firstChild;\r\n                        this.renderer.setAttribute(innerElement, 'height', `${this.width}`);\r\n                        this.renderer.setAttribute(innerElement, 'width', `${this.width}`);\r\n                        this.renderElement(innerElement);\r\n                    })\r\n                        .catch((e) => {\r\n                        console.error('[angularx-qrcode] svg error:', e);\r\n                    });\r\n                    break;\r\n                case 'url':\r\n                case 'img':\r\n                default:\r\n                    element = this.renderer.createElement('img');\r\n                    this.toDataURL()\r\n                        .then((dataUrl) => {\r\n                        element.setAttribute('src', dataUrl);\r\n                        this.renderElement(element);\r\n                    })\r\n                        .catch((e) => {\r\n                        console.error('[angularx-qrcode] img/url error:', e);\r\n                    });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error('[angularx-qrcode] Error generating QR Code:', e.message);\r\n        }\r\n    }\r\n}\r\nQRCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\r\nQRCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: QRCodeComponent, selector: \"qrcode\", inputs: { allowEmptyString: \"allowEmptyString\", colorDark: \"colorDark\", colorLight: \"colorLight\", cssClass: \"cssClass\", elementType: \"elementType\", errorCorrectionLevel: \"errorCorrectionLevel\", margin: \"margin\", qrdata: \"qrdata\", scale: \"scale\", version: \"version\", width: \"width\" }, viewQueries: [{ propertyName: \"qrcElement\", first: true, predicate: [\"qrcElement\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `<div #qrcElement [class]=\"cssClass\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'qrcode',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    template: `<div #qrcElement [class]=\"cssClass\"></div>`,\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { allowEmptyString: [{\r\n                type: Input\r\n            }], colorDark: [{\r\n                type: Input\r\n            }], colorLight: [{\r\n                type: Input\r\n            }], cssClass: [{\r\n                type: Input\r\n            }], elementType: [{\r\n                type: Input\r\n            }], errorCorrectionLevel: [{\r\n                type: Input\r\n            }], margin: [{\r\n                type: Input\r\n            }], qrdata: [{\r\n                type: Input\r\n            }], scale: [{\r\n                type: Input\r\n            }], version: [{\r\n                type: Input\r\n            }], width: [{\r\n                type: Input\r\n            }], qrcElement: [{\r\n                type: ViewChild,\r\n                args: ['qrcElement', { static: true }]\r\n            }] } });\r\n\r\nclass QRCodeModule {\r\n}\r\nQRCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nQRCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeModule, declarations: [QRCodeComponent], exports: [QRCodeComponent] });\r\nQRCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeModule, providers: [] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [],\r\n                    declarations: [QRCodeComponent],\r\n                    exports: [QRCodeComponent],\r\n                }]\r\n        }] });\r\n\r\nvar QRCodeErrorCorrectionLevel;\r\n(function (QRCodeErrorCorrectionLevel) {\r\n    QRCodeErrorCorrectionLevel[\"low\"] = \"low\";\r\n    QRCodeErrorCorrectionLevel[\"medium\"] = \"medium\";\r\n    QRCodeErrorCorrectionLevel[\"quartile\"] = \"quartile\";\r\n    QRCodeErrorCorrectionLevel[\"high\"] = \"high\";\r\n    QRCodeErrorCorrectionLevel[\"L\"] = \"L\";\r\n    QRCodeErrorCorrectionLevel[\"M\"] = \"M\";\r\n    QRCodeErrorCorrectionLevel[\"Q\"] = \"Q\";\r\n    QRCodeErrorCorrectionLevel[\"H\"] = \"H\";\r\n})(QRCodeErrorCorrectionLevel || (QRCodeErrorCorrectionLevel = {}));\r\nvar QRCodeElementType;\r\n(function (QRCodeElementType) {\r\n    QRCodeElementType[\"url\"] = \"url\";\r\n    QRCodeElementType[\"img\"] = \"img\";\r\n    QRCodeElementType[\"canvas\"] = \"canvas\";\r\n    QRCodeElementType[\"svg\"] = \"svg\";\r\n})(QRCodeElementType || (QRCodeElementType = {}));\r\n\r\n/*\r\n * Public API Surface of angularx-qrcode\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { QRCodeComponent, QRCodeElementType, QRCodeErrorCorrectionLevel, QRCodeModule };\r\n//# sourceMappingURL=angularx-qrcode.js.map\r\n"]},"metadata":{},"sourceType":"module"}