{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from 'qrcode';\nconst _c0 = [\"qrcElement\"];\n\nlet QRCodeComponent = /*@__PURE__*/(() => {\n  class QRCodeComponent {\n    constructor(renderer) {\n      this.renderer = renderer;\n      this.allowEmptyString = false;\n      this.colorDark = '#000000ff';\n      this.colorLight = '#ffffffff';\n      this.cssClass = 'qrcode';\n      this.elementType = 'canvas';\n      this.errorCorrectionLevel = 'M';\n      this.margin = 4;\n      this.qrdata = '';\n      this.scale = 4;\n      this.width = 10;\n    }\n\n    ngOnChanges() {\n      this.createQRCode();\n    }\n\n    isValidQrCodeText(data) {\n      if (this.allowEmptyString === false) {\n        return !(typeof data === 'undefined' || data === '' || data === 'null' || data === null);\n      }\n\n      return !(typeof data === 'undefined');\n    }\n\n    toDataURL() {\n      return new Promise((resolve, reject) => {\n        QRCode.toDataURL(this.qrdata, {\n          color: {\n            dark: this.colorDark,\n            light: this.colorLight\n          },\n          errorCorrectionLevel: this.errorCorrectionLevel,\n          margin: this.margin,\n          scale: this.scale,\n          version: this.version,\n          width: this.width\n        }, (err, url) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n\n    toCanvas(canvas) {\n      return new Promise((resolve, reject) => {\n        QRCode.toCanvas(canvas, this.qrdata, {\n          color: {\n            dark: this.colorDark,\n            light: this.colorLight\n          },\n          errorCorrectionLevel: this.errorCorrectionLevel,\n          margin: this.margin,\n          scale: this.scale,\n          version: this.version,\n          width: this.width\n        }, error => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve('success');\n          }\n        });\n      });\n    }\n\n    toSVG() {\n      return new Promise((resolve, reject) => {\n        QRCode.toString(this.qrdata, {\n          color: {\n            dark: this.colorDark,\n            light: this.colorLight\n          },\n          errorCorrectionLevel: this.errorCorrectionLevel,\n          margin: this.margin,\n          scale: this.scale,\n          type: 'svg',\n          version: this.version,\n          width: this.width\n        }, (err, url) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n\n    renderElement(element) {\n      for (const node of this.qrcElement.nativeElement.childNodes) {\n        this.renderer.removeChild(this.qrcElement.nativeElement, node);\n      }\n\n      this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n\n    createQRCode() {\n      // Set sensitive defaults\n      if (this.version && this.version > 40) {\n        console.warn('[angularx-qrcode] max value for `version` is 40');\n        this.version = 40;\n      } else if (this.version && this.version < 1) {\n        console.warn('[angularx-qrcode]`min value for `version` is 1');\n        this.version = 1;\n      } else if (this.version !== undefined && isNaN(this.version)) {\n        console.warn('[angularx-qrcode] version should be a number, defaulting to auto.');\n        this.version = undefined;\n      }\n\n      try {\n        if (!this.isValidQrCodeText(this.qrdata)) {\n          throw new Error('[angularx-qrcode] Field `qrdata` is empty, set `allowEmptyString=\"true\"` to overwrite this behaviour.');\n        } // This is a fix to allow an empty string as qrdata\n\n\n        if (this.isValidQrCodeText(this.qrdata) && this.qrdata === '') {\n          this.qrdata = ' ';\n        }\n\n        let element;\n\n        switch (this.elementType) {\n          case 'canvas':\n            element = this.renderer.createElement('canvas');\n            this.toCanvas(element).then(() => {\n              this.renderElement(element);\n            }).catch(e => {\n              console.error('[angularx-qrcode] canvas error:', e);\n            });\n            break;\n\n          case 'svg':\n            element = this.renderer.createElement('div');\n            this.toSVG().then(svgString => {\n              this.renderer.setProperty(element, 'innerHTML', svgString);\n              const innerElement = element.firstChild;\n              this.renderer.setAttribute(innerElement, 'height', `${this.width}`);\n              this.renderer.setAttribute(innerElement, 'width', `${this.width}`);\n              this.renderElement(innerElement);\n            }).catch(e => {\n              console.error('[angularx-qrcode] svg error:', e);\n            });\n            break;\n\n          case 'url':\n          case 'img':\n          default:\n            element = this.renderer.createElement('img');\n            this.toDataURL().then(dataUrl => {\n              element.setAttribute('src', dataUrl);\n              this.renderElement(element);\n            }).catch(e => {\n              console.error('[angularx-qrcode] img/url error:', e);\n            });\n        }\n      } catch (e) {\n        console.error('[angularx-qrcode] Error generating QR Code:', e.message);\n      }\n    }\n\n  }\n\n  QRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n    return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  QRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: QRCodeComponent,\n    selectors: [[\"qrcode\"]],\n    viewQuery: function QRCodeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n      }\n    },\n    inputs: {\n      allowEmptyString: \"allowEmptyString\",\n      colorDark: \"colorDark\",\n      colorLight: \"colorLight\",\n      cssClass: \"cssClass\",\n      elementType: \"elementType\",\n      errorCorrectionLevel: \"errorCorrectionLevel\",\n      margin: \"margin\",\n      qrdata: \"qrdata\",\n      scale: \"scale\",\n      version: \"version\",\n      width: \"width\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"qrcElement\", \"\"]],\n    template: function QRCodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cssClass);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return QRCodeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'qrcode',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `<div #qrcElement [class]=\"cssClass\"></div>`\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }];\n  }, {\n    allowEmptyString: [{\n      type: Input\n    }],\n    colorDark: [{\n      type: Input\n    }],\n    colorLight: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementType: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    qrdata: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    version: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    qrcElement: [{\n      type: ViewChild,\n      args: ['qrcElement', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nlet QRCodeModule = /*@__PURE__*/(() => {\n  class QRCodeModule {}\n\n  QRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n    return new (t || QRCodeModule)();\n  };\n\n  QRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: QRCodeModule\n  });\n  QRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: []\n  });\n  return QRCodeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeModule, [{\n    type: NgModule,\n    args: [{\n      providers: [],\n      declarations: [QRCodeComponent],\n      exports: [QRCodeComponent]\n    }]\n  }], null, null);\n})();\n\nvar QRCodeErrorCorrectionLevel = /*@__PURE__*/function (QRCodeErrorCorrectionLevel) {\n  QRCodeErrorCorrectionLevel[\"low\"] = \"low\";\n  QRCodeErrorCorrectionLevel[\"medium\"] = \"medium\";\n  QRCodeErrorCorrectionLevel[\"quartile\"] = \"quartile\";\n  QRCodeErrorCorrectionLevel[\"high\"] = \"high\";\n  QRCodeErrorCorrectionLevel[\"L\"] = \"L\";\n  QRCodeErrorCorrectionLevel[\"M\"] = \"M\";\n  QRCodeErrorCorrectionLevel[\"Q\"] = \"Q\";\n  QRCodeErrorCorrectionLevel[\"H\"] = \"H\";\n  return QRCodeErrorCorrectionLevel;\n}({});\n\nvar QRCodeElementType = /*@__PURE__*/function (QRCodeElementType) {\n  QRCodeElementType[\"url\"] = \"url\";\n  QRCodeElementType[\"img\"] = \"img\";\n  QRCodeElementType[\"canvas\"] = \"canvas\";\n  QRCodeElementType[\"svg\"] = \"svg\";\n  return QRCodeElementType;\n}({});\n/*\n * Public API Surface of angularx-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QRCodeComponent, QRCodeElementType, QRCodeErrorCorrectionLevel, QRCodeModule }; //# sourceMappingURL=angularx-qrcode.js.map","map":null,"metadata":{},"sourceType":"module"}