{"version":3,"file":"zxing-ngx-scanner.js","sources":["../../../projects/zxing-scanner/src/lib/browser-multi-format-continuous-reader.ts","../../../projects/zxing-scanner/src/lib/zxing-scanner.component.ts","../../../projects/zxing-scanner/src/lib/zxing-scanner.module.ts","../../../projects/zxing-scanner/src/public_api.ts","../../../projects/zxing-scanner/src/zxing-ngx-scanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChecksumException, FormatException, NotFoundException } from '@zxing/library';\nimport { BrowserMultiFormatReader, IScannerControls } from '@zxing/browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ResultAndError } from './ResultAndError';\n\n/**\n * Based on zxing-typescript BrowserCodeReader\n */\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\n\n  /**\n   * Allows to call scanner controls API while scanning.\n   * Will be undefined if no scanning is runnig.\n   */\n  protected scannerControls: IScannerControls;\n\n  /**\n   * Returns the code reader scanner controls.\n   */\n  public getScannerControls(): IScannerControls {\n    if (!this.scannerControls) {\n      throw new Error('No scanning is running at the time.');\n    }\n    return this.scannerControls;\n  }\n\n  /**\n   * Starts the decoding from the current or a new video element.\n   *\n   * @param deviceId The device's to be used Id\n   * @param previewEl A new video element\n   */\n  public async scanFromDeviceObservable(\n    deviceId?: string,\n    previewEl?: HTMLVideoElement\n  ): Promise<Observable<ResultAndError>> {\n\n    const scan$ = new BehaviorSubject<ResultAndError>({});\n    let ctrls;\n\n    try {\n      ctrls = await this.decodeFromVideoDevice(deviceId, previewEl, (result, error) => {\n\n        if (!error) {\n          scan$.next({ result });\n          return;\n        }\n\n        const errorName = error.name;\n\n        // stream cannot stop on fails.\n        if (\n          // scan Failure - found nothing, no error\n          errorName === NotFoundException.name ||\n          // scan Error - found the QR but got error on decoding\n          errorName === ChecksumException.name ||\n          errorName === FormatException.name ||\n          error.message.includes('No MultiFormat Readers were able to detect the code.')\n        ) {\n          scan$.next({ error });\n          return;\n        }\n\n        // probably fatal error\n        scan$.error(error);\n        this.scannerControls.stop();\n        this.scannerControls = undefined;\n        return;\n      });\n\n      this.scannerControls = {\n        ...ctrls,\n        stop() {\n          ctrls.stop();\n          scan$.complete();\n        },\n      };\n    } catch (e) {\n      scan$.error(e);\n      this.scannerControls?.stop();\n      this.scannerControls = undefined;\n    }\n\n    return scan$.asObservable();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { BrowserCodeReader } from '@zxing/browser';\nimport {\n  BarcodeFormat,\n  DecodeHintType,\n  Exception,\n  Result\n} from '@zxing/library';\nimport { Subscription } from 'rxjs';\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\nimport { ResultAndError } from './ResultAndError';\n\n\n@Component({\n  selector: 'zxing-scanner',\n  templateUrl: './zxing-scanner.component.html',\n  styleUrls: ['./zxing-scanner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ZXingScannerComponent implements OnInit, OnDestroy {\n\n  /**\n   * Supported Hints map.\n   */\n  private _hints: Map<DecodeHintType, any> | null;\n\n  /**\n   * The ZXing code reader.\n   */\n  private _codeReader: BrowserMultiFormatContinuousReader;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  private _device: MediaDeviceInfo;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  private _enabled: boolean;\n\n  /**\n   *\n   */\n  private _isAutostarting: boolean;\n\n  /**\n   * Has `navigator` access.\n   */\n  private hasNavigator: boolean;\n\n  /**\n   * Says if some native API is supported.\n   */\n  private isMediaDevicesSupported: boolean;\n\n  /**\n   * If the user-agent allowed the use of the camera or not.\n   */\n  private hasPermission: boolean | null;\n\n  /**\n   * Unsubscribe to stop scanning.\n   */\n  private _scanSubscription?: Subscription;\n\n  /**\n   * Reference to the preview element, should be the `video` tag.\n   */\n  @ViewChild('preview', { static: true })\n  previewElemRef: ElementRef<HTMLVideoElement>;\n\n  /**\n   * Enable or disable autofocus of the camera (might have an impact on performance)\n   */\n  @Input()\n  autofocusEnabled: boolean;\n\n  /**\n   * Delay between attempts to decode (default is 500ms)\n   */\n  @Input()\n  timeBetweenScans = 500;\n\n  /**\n   * Delay between successful decode (default is 500ms)\n   */\n  @Input()\n  delayBetweenScanSuccess = 500;\n\n  /**\n   * Emits when and if the scanner is autostarted.\n   */\n  @Output()\n  autostarted: EventEmitter<void>;\n\n  /**\n   * True during autostart and false after. It will be null if won't autostart at all.\n   */\n  @Output()\n  autostarting: EventEmitter<boolean>;\n\n  /**\n   * If the scanner should autostart with the first available device.\n   */\n  @Input()\n  autostart: boolean;\n\n  /**\n   * How the preview element shoud be fit inside the :host container.\n   */\n  @Input()\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\n\n  /**\n   * Emitts events when the torch compatibility is changed.\n   */\n  @Output()\n  torchCompatible: EventEmitter<boolean>;\n\n  /**\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\n   */\n  @Output()\n  scanSuccess: EventEmitter<string>;\n\n  /**\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\n   */\n  @Output()\n  scanFailure: EventEmitter<Exception | undefined>;\n\n  /**\n   * Emitts events when a scan throws some error, will inject the error to the callback.\n   */\n  @Output()\n  scanError: EventEmitter<Error>;\n\n  /**\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\n   */\n  @Output()\n  scanComplete: EventEmitter<Result>;\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasNotFound: EventEmitter<any>;\n\n  /**\n   * Emitts events when the users answers for permission.\n   */\n  @Output()\n  permissionResponse: EventEmitter<boolean>;\n\n  /**\n   * Emitts events when has devices status is update.\n   */\n  @Output()\n  hasDevices: EventEmitter<boolean>;\n\n  private _ready = false;\n\n  private _devicePreStart: MediaDeviceInfo;\n\n  /**\n   * Exposes the current code reader, so the user can use it's APIs.\n   */\n  get codeReader(): BrowserMultiFormatContinuousReader {\n    return this._codeReader;\n  }\n\n  /**\n   * User device input\n   */\n  @Input()\n  set device(device: MediaDeviceInfo | undefined) {\n\n    if (!this._ready) {\n      this._devicePreStart = device;\n      // let's ignore silently, users don't liek logs\n      return;\n    }\n\n    if (this.isAutostarting) {\n      // do not allow setting devices during auto-start, since it will set one and emit it.\n      console.warn('Avoid setting a device during auto-start.');\n      return;\n    }\n\n    if (this.isCurrentDevice(device)) {\n      console.warn('Setting the same device is not allowed.');\n      return;\n    }\n\n    if (!this.hasPermission) {\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\n      // this.permissionResponse\n      //   .pipe(\n      //     take(1),\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\n      //   )\n      //   .subscribe(() => this.device = device);\n      return;\n    }\n\n    this.setDevice(device);\n  }\n\n  /**\n   * Emits when the current device is changed.\n   */\n  @Output()\n  deviceChange: EventEmitter<MediaDeviceInfo>;\n\n  /**\n   * User device acessor.\n   */\n  get device() {\n    return this._device;\n  }\n\n  /**\n   * Returns all the registered formats.\n   */\n  get formats(): BarcodeFormat[] {\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\n  }\n\n  /**\n   * Registers formats the scanner should support.\n   *\n   * @param input BarcodeFormat or case-insensitive string array.\n   */\n  @Input()\n  set formats(input: BarcodeFormat[]) {\n\n    if (typeof input === 'string') {\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\n    }\n\n    // formats may be set from html template as BarcodeFormat or string array\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\n\n    const hints = this.hints;\n\n    // updates the hints\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n\n    // handles updating the codeReader\n    this.hints = hints;\n  }\n\n  /**\n   * Returns all the registered hints.\n   */\n  get hints() {\n    return this._hints;\n  }\n\n  /**\n   * Does what it takes to set the hints.\n   */\n  set hints(hints: Map<DecodeHintType, any>) {\n    this._hints = hints;\n    // new instance with new hints.\n    this.codeReader?.setHints(this._hints);\n  }\n\n  /**\n   * Sets the desired constraints in all video tracks.\n   * @experimental\n   */\n  @Input()\n  set videoConstraints(constraints: MediaTrackConstraints) {\n    // new instance with new hints.\n    const controls = this.codeReader?.getScannerControls();\n\n    if (!controls) {\n      // fails silently\n      return;\n    }\n\n    controls?.streamVideoConstraintsApply(constraints);\n  }\n\n  /**\n   *\n   */\n  set isAutostarting(state: boolean) {\n    this._isAutostarting = state;\n    this.autostarting.next(state);\n  }\n\n  /**\n   *\n   */\n  get isAutostarting(): boolean {\n    return this._isAutostarting;\n  }\n\n  /**\n   * Can turn on/off the device flashlight.\n   *\n   * @experimental Torch/Flash APIs are not stable in all browsers, it may be buggy!\n   */\n  @Input()\n  set torch(onOff: boolean) {\n    try {\n      const controls = this.getCodeReader().getScannerControls();\n      controls.switchTorch(onOff);\n    } catch (error) {\n      // ignore error\n    }\n  }\n\n  /**\n   * Starts and Stops the scanning.\n   */\n  @Input()\n  set enable(enabled: boolean) {\n\n    this._enabled = Boolean(enabled);\n\n    if (!this._enabled) {\n      this.reset();\n    } else {\n      if (this.device) {\n        this.scanFromDevice(this.device.deviceId);\n      } else {\n        this.init();\n      }\n    }\n  }\n\n  /**\n   * Tells if the scanner is enabled or not.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * If is `tryHarder` enabled.\n   */\n  get tryHarder(): boolean {\n    return this.hints.get(DecodeHintType.TRY_HARDER);\n  }\n\n  /**\n   * Enable/disable tryHarder hint.\n   */\n  @Input()\n  set tryHarder(enable: boolean) {\n\n    const hints = this.hints;\n\n    if (enable) {\n      hints.set(DecodeHintType.TRY_HARDER, true);\n    } else {\n      hints.delete(DecodeHintType.TRY_HARDER);\n    }\n\n    this.hints = hints;\n  }\n\n  /**\n   * Constructor to build the object and do some DI.\n   */\n  constructor() {\n    // instance based emitters\n    this.autostarted = new EventEmitter();\n    this.autostarting = new EventEmitter();\n    this.torchCompatible = new EventEmitter(false);\n    this.scanSuccess = new EventEmitter();\n    this.scanFailure = new EventEmitter();\n    this.scanError = new EventEmitter();\n    this.scanComplete = new EventEmitter();\n    this.camerasFound = new EventEmitter();\n    this.camerasNotFound = new EventEmitter();\n    this.permissionResponse = new EventEmitter(true);\n    this.hasDevices = new EventEmitter();\n    this.deviceChange = new EventEmitter();\n\n    this._enabled = true;\n    this._hints = new Map<DecodeHintType, any>();\n    this.autofocusEnabled = true;\n    this.autostart = true;\n    this.formats = [BarcodeFormat.QR_CODE];\n\n    // computed data\n    this.hasNavigator = typeof navigator !== 'undefined';\n    this.isMediaDevicesSupported = this.hasNavigator && !!navigator.mediaDevices;\n  }\n\n  /**\n   * Gets and registers all cammeras.\n   */\n  async askForPermission(): Promise<boolean> {\n\n    if (!this.hasNavigator) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    if (!this.isMediaDevicesSupported) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    let stream: MediaStream;\n    let permission: boolean;\n\n    try {\n      // Will try to ask for permission\n      stream = await this.getAnyVideoDevice();\n      permission = !!stream;\n    } catch (err) {\n      return this.handlePermissionException(err);\n    } finally {\n      this.terminateStream(stream);\n    }\n\n    this.setPermission(permission);\n\n    // Returns the permission\n    return permission;\n  }\n\n  /**\n   *\n   */\n  getAnyVideoDevice(): Promise<MediaStream> {\n    return navigator.mediaDevices.getUserMedia({ video: true });\n  }\n\n  /**\n   * Terminates a stream and it's tracks.\n   */\n  private terminateStream(stream: MediaStream) {\n\n    if (stream) {\n      stream.getTracks().forEach(t => t.stop());\n    }\n\n    stream = undefined;\n  }\n\n  private async init() {\n    if (!this.autostart) {\n      console.warn('Feature \\'autostart\\' disabled. Permissions and devices recovery has to be run manually.');\n\n      // does the necessary configuration without autostarting\n      this.initAutostartOff();\n\n      this._ready = true;\n\n      return;\n    }\n\n    // configurates the component and starts the scanner\n    await this.initAutostartOn();\n\n    this._ready = true;\n  }\n\n  /**\n   * Initializes the component without starting the scanner.\n   */\n  private initAutostartOff(): void {\n\n    // do not ask for permission when autostart is off\n    this.isAutostarting = false;\n\n    // just update devices information\n    this.updateVideoInputDevices();\n\n    if (this._device && this._devicePreStart) {\n      this.setDevice(this._devicePreStart);\n    }\n  }\n\n  /**\n   * Initializes the component and starts the scanner.\n   * Permissions are asked to accomplish that.\n   */\n  private async initAutostartOn(): Promise<void> {\n\n    this.isAutostarting = true;\n\n    let hasPermission: boolean;\n\n    try {\n      // Asks for permission before enumerating devices so it can get all the device's info\n      hasPermission = await this.askForPermission();\n    } catch (e) {\n      console.error('Exception occurred while asking for permission:', e);\n      return;\n    }\n\n    // from this point, things gonna need permissions\n    if (hasPermission) {\n      const devices = await this.updateVideoInputDevices();\n      await this.autostartScanner([...devices]);\n    }\n\n    this.isAutostarting = false;\n    this.autostarted.next();\n  }\n\n  /**\n   * Checks if the given device is the current defined one.\n   */\n  isCurrentDevice(device?: MediaDeviceInfo) {\n    return device?.deviceId === this._device?.deviceId;\n  }\n\n  /**\n   * Executes some actions before destroy the component.\n   */\n  ngOnDestroy(): void {\n    this.reset();\n  }\n\n  /**\n   *\n   */\n  ngOnInit(): void {\n    this.init();\n  }\n\n  /**\n   * Stops the scanning, if any.\n   */\n  public scanStop() {\n    if (this._scanSubscription) {\n      this.codeReader?.getScannerControls().stop();\n      this._scanSubscription?.unsubscribe();\n      this._scanSubscription = undefined;\n    }\n    this.torchCompatible.next(false);\n  }\n\n  /**\n   * Stops the scanning, if any.\n   */\n  public scanStart() {\n\n    if (this._scanSubscription) {\n      throw new Error('There is already a scan proccess running.');\n    }\n\n    if (!this._device) {\n      throw new Error('No device defined, cannot start scan, please define a device.');\n    }\n\n    this.scanFromDevice(this._device.deviceId);\n  }\n\n  /**\n   * Stops old `codeReader` and starts scanning in a new one.\n   */\n  restart(): void {\n    // @note apenas necessario por enquanto causa da Torch\n    this._codeReader = undefined;\n\n    const prevDevice = this._reset();\n\n    if (!prevDevice) {\n      return;\n    }\n\n    this.device = prevDevice;\n  }\n\n  /**\n   * Discovers and updates known video input devices.\n   */\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\n\n    // permissions aren't needed to get devices, but to access them and their info\n    const devices = await BrowserCodeReader.listVideoInputDevices() || [];\n    const hasDevices = devices && devices.length > 0;\n\n    // stores discovered devices and updates information\n    this.hasDevices.next(hasDevices);\n    this.camerasFound.next([...devices]);\n\n    if (!hasDevices) {\n      this.camerasNotFound.next();\n    }\n\n    return devices;\n  }\n\n  /**\n   * Starts the scanner with the back camera otherwise take the last\n   * available device.\n   */\n  private async autostartScanner(devices: MediaDeviceInfo[]): Promise<void> {\n\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\n\n    // select the rear camera by default, otherwise take the last camera.\n    const device = devices.find(matcher) || devices.pop();\n\n    if (!device) {\n      throw new Error('Impossible to autostart, no input devices available.');\n    }\n\n    await this.setDevice(device);\n\n    this.deviceChange.next(device);\n  }\n\n  /**\n   * Dispatches the scan success event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanSuccess(result: Result): void {\n    this.scanSuccess.next(result.getText());\n  }\n\n  /**\n   * Dispatches the scan failure event.\n   */\n  private dispatchScanFailure(reason?: Exception): void {\n    this.scanFailure.next(reason);\n  }\n\n  /**\n   * Dispatches the scan error event.\n   *\n   * @param error the error thing.\n   */\n  private dispatchScanError(error: any): void {\n    if (!this.scanError.observers.some(x => Boolean(x))) {\n      console.error(`zxing scanner component: ${error.name}`, error);\n      console.warn('Use the `(scanError)` property to handle errors like this!');\n    }\n    this.scanError.next(error);\n  }\n\n  /**\n   * Dispatches the scan event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanComplete(result: Result): void {\n    this.scanComplete.next(result);\n  }\n\n  /**\n   * Returns the filtered permission.\n   */\n  private handlePermissionException(err: DOMException): boolean {\n\n    // failed to grant permission to video input\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\n\n    let permission: boolean;\n\n    switch (err.name) {\n\n      // usually caused by not secure origins\n      case 'NotSupportedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // could not claim\n        permission = null;\n        // can't check devices\n        this.hasDevices.next(null);\n        break;\n\n      // user denied permission\n      case 'NotAllowedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // claimed and denied permission\n        permission = false;\n        // this means that input devices exists\n        this.hasDevices.next(true);\n        break;\n\n      // the device has no attached input devices\n      case 'NotFoundError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // no permissions claimed\n        permission = null;\n        // because there was no devices\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      case 'NotReadableError':\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\n        // no permissions claimed\n        permission = null;\n        // there are devices, which I couldn't use\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      default:\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\n        // unknown\n        permission = null;\n        // this.hasDevices.next(undefined;\n        break;\n\n    }\n\n    this.setPermission(permission);\n\n    // tells the listener about the error\n    this.permissionResponse.error(err);\n\n    return permission;\n  }\n\n  /**\n   * Returns a valid BarcodeFormat or fails.\n   */\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\n    return typeof format === 'string'\n      ? BarcodeFormat[format.trim().toUpperCase()]\n      : format;\n  }\n\n  /**\n   * Retorna um code reader, cria um se nenhume existe.\n   */\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\n\n    if (!this._codeReader) {\n      const options = {\n        delayBetweenScanAttempts: this.timeBetweenScans,\n        delayBetweenScanSuccess: this.delayBetweenScanSuccess,\n      };\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints, options);\n    }\n\n    return this._codeReader;\n  }\n\n  /**\n   * Starts the continuous scanning for the given device.\n   *\n   * @param deviceId The deviceId from the device.\n   */\n  private async scanFromDevice(deviceId: string): Promise<void> {\n\n    const videoElement = this.previewElemRef.nativeElement;\n\n    const codeReader = this.getCodeReader();\n\n    const scanStream = await codeReader.scanFromDeviceObservable(deviceId, videoElement);\n\n    if (!scanStream) {\n      throw new Error('Undefined decoding stream, aborting.');\n    }\n\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\n    const error = (err: any) => this._onDecodeError(err);\n    const complete = () => { };\n\n    this._scanSubscription = scanStream.subscribe(next, error, complete);\n\n    if (this._scanSubscription.closed) {\n      return;\n    }\n\n    const controls = codeReader.getScannerControls();\n    const hasTorchControl = typeof controls.switchTorch !== 'undefined';\n\n    this.torchCompatible.next(hasTorchControl);\n  }\n\n  /**\n   * Handles decode errors.\n   */\n  private _onDecodeError(err: any) {\n    this.dispatchScanError(err);\n    // this.reset();\n  }\n\n  /**\n   * Handles decode results.\n   */\n  private _onDecodeResult(result: Result, error: Exception): void {\n\n    if (result) {\n      this.dispatchScanSuccess(result);\n    } else {\n      this.dispatchScanFailure(error);\n    }\n\n    this.dispatchScanComplete(result);\n  }\n\n  /**\n   * Stops the code reader and returns the previous selected device.\n   */\n  private _reset(): MediaDeviceInfo {\n\n    if (!this._codeReader) {\n      return;\n    }\n\n    const device = this._device;\n    // do not set this.device inside this method, it would create a recursive loop\n    this.device = undefined;\n\n    this._codeReader = undefined;\n\n    return device;\n  }\n\n  /**\n   * Resets the scanner and emits device change.\n   */\n  public reset(): void {\n    this._reset();\n    this.deviceChange.emit(null);\n  }\n\n  /**\n   * Sets the current device.\n   */\n  private async setDevice(device: MediaDeviceInfo): Promise<void> {\n\n    // instantly stops the scan before changing devices\n    this.scanStop();\n\n    // correctly sets the new (or none) device\n    this._device = device || undefined;\n\n    if (!this._device) {\n      // cleans the video because user removed the device\n      BrowserCodeReader.cleanVideoSource(this.previewElemRef.nativeElement);\n    }\n\n    // if enabled, starts scanning\n    if (this._enabled && device) {\n      await this.scanFromDevice(device.deviceId);\n    }\n  }\n\n  /**\n   * Sets the permission value and emmits the event.\n   */\n  private setPermission(hasPermission: boolean | null): void {\n    this.hasPermission = hasPermission;\n    this.permissionResponse.next(hasPermission);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ZXingScannerComponent } from './zxing-scanner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [ZXingScannerComponent],\n  exports: [ZXingScannerComponent],\n})\nexport class ZXingScannerModule { }\n","/*\n * Public API Surface of zxing-scanner\n */\n\nexport * from './lib/zxing-scanner.module';\nexport * from './lib/zxing-scanner.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}