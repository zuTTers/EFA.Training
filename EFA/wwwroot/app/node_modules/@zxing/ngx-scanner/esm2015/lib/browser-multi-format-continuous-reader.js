import { __awaiter } from "tslib";
import { ChecksumException, FormatException, NotFoundException } from '@zxing/library';
import { BrowserMultiFormatReader } from '@zxing/browser';
import { BehaviorSubject } from 'rxjs';
/**
 * Based on zxing-typescript BrowserCodeReader
 */
export class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {
    /**
     * Returns the code reader scanner controls.
     */
    getScannerControls() {
        if (!this.scannerControls) {
            throw new Error('No scanning is running at the time.');
        }
        return this.scannerControls;
    }
    /**
     * Starts the decoding from the current or a new video element.
     *
     * @param deviceId The device's to be used Id
     * @param previewEl A new video element
     */
    scanFromDeviceObservable(deviceId, previewEl) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const scan$ = new BehaviorSubject({});
            let ctrls;
            try {
                ctrls = yield this.decodeFromVideoDevice(deviceId, previewEl, (result, error) => {
                    if (!error) {
                        scan$.next({ result });
                        return;
                    }
                    const errorName = error.name;
                    // stream cannot stop on fails.
                    if (
                    // scan Failure - found nothing, no error
                    errorName === NotFoundException.name ||
                        // scan Error - found the QR but got error on decoding
                        errorName === ChecksumException.name ||
                        errorName === FormatException.name ||
                        error.message.includes('No MultiFormat Readers were able to detect the code.')) {
                        scan$.next({ error });
                        return;
                    }
                    // probably fatal error
                    scan$.error(error);
                    this.scannerControls.stop();
                    this.scannerControls = undefined;
                    return;
                });
                this.scannerControls = Object.assign(Object.assign({}, ctrls), { stop() {
                        ctrls.stop();
                        scan$.complete();
                    } });
            }
            catch (e) {
                scan$.error(e);
                (_a = this.scannerControls) === null || _a === void 0 ? void 0 : _a.stop();
                this.scannerControls = undefined;
            }
            return scan$.asObservable();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1tdWx0aS1mb3JtYXQtY29udGludW91cy1yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy96eGluZy1zY2FubmVyL3NyYy9saWIvYnJvd3Nlci1tdWx0aS1mb3JtYXQtY29udGludW91cy1yZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RixPQUFPLEVBQUUsd0JBQXdCLEVBQW9CLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUduRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSx3QkFBd0I7SUFROUU7O09BRUc7SUFDSSxrQkFBa0I7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNVLHdCQUF3QixDQUNuQyxRQUFpQixFQUNqQixTQUE0Qjs7O1lBRzVCLE1BQU0sS0FBSyxHQUFHLElBQUksZUFBZSxDQUFpQixFQUFFLENBQUMsQ0FBQztZQUN0RCxJQUFJLEtBQUssQ0FBQztZQUVWLElBQUk7Z0JBQ0YsS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7b0JBRTlFLElBQUksQ0FBQyxLQUFLLEVBQUU7d0JBQ1YsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7d0JBQ3ZCLE9BQU87cUJBQ1I7b0JBRUQsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFFN0IsK0JBQStCO29CQUMvQjtvQkFDRSx5Q0FBeUM7b0JBQ3pDLFNBQVMsS0FBSyxpQkFBaUIsQ0FBQyxJQUFJO3dCQUNwQyxzREFBc0Q7d0JBQ3RELFNBQVMsS0FBSyxpQkFBaUIsQ0FBQyxJQUFJO3dCQUNwQyxTQUFTLEtBQUssZUFBZSxDQUFDLElBQUk7d0JBQ2xDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLHNEQUFzRCxDQUFDLEVBQzlFO3dCQUNBLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO3dCQUN0QixPQUFPO3FCQUNSO29CQUVELHVCQUF1QjtvQkFDdkIsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDbkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDNUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7b0JBQ2pDLE9BQU87Z0JBQ1QsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLGVBQWUsbUNBQ2YsS0FBSyxLQUNSLElBQUk7d0JBQ0YsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO3dCQUNiLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDbkIsQ0FBQyxHQUNGLENBQUM7YUFDSDtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsTUFBQSxJQUFJLENBQUMsZUFBZSwwQ0FBRSxJQUFJLEVBQUUsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7YUFDbEM7WUFFRCxPQUFPLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7S0FDN0I7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoZWNrc3VtRXhjZXB0aW9uLCBGb3JtYXRFeGNlcHRpb24sIE5vdEZvdW5kRXhjZXB0aW9uIH0gZnJvbSAnQHp4aW5nL2xpYnJhcnknO1xuaW1wb3J0IHsgQnJvd3Nlck11bHRpRm9ybWF0UmVhZGVyLCBJU2Nhbm5lckNvbnRyb2xzIH0gZnJvbSAnQHp4aW5nL2Jyb3dzZXInO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSZXN1bHRBbmRFcnJvciB9IGZyb20gJy4vUmVzdWx0QW5kRXJyb3InO1xuXG4vKipcbiAqIEJhc2VkIG9uIHp4aW5nLXR5cGVzY3JpcHQgQnJvd3NlckNvZGVSZWFkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEJyb3dzZXJNdWx0aUZvcm1hdENvbnRpbnVvdXNSZWFkZXIgZXh0ZW5kcyBCcm93c2VyTXVsdGlGb3JtYXRSZWFkZXIge1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgdG8gY2FsbCBzY2FubmVyIGNvbnRyb2xzIEFQSSB3aGlsZSBzY2FubmluZy5cbiAgICogV2lsbCBiZSB1bmRlZmluZWQgaWYgbm8gc2Nhbm5pbmcgaXMgcnVubmlnLlxuICAgKi9cbiAgcHJvdGVjdGVkIHNjYW5uZXJDb250cm9sczogSVNjYW5uZXJDb250cm9scztcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29kZSByZWFkZXIgc2Nhbm5lciBjb250cm9scy5cbiAgICovXG4gIHB1YmxpYyBnZXRTY2FubmVyQ29udHJvbHMoKTogSVNjYW5uZXJDb250cm9scyB7XG4gICAgaWYgKCF0aGlzLnNjYW5uZXJDb250cm9scykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzY2FubmluZyBpcyBydW5uaW5nIGF0IHRoZSB0aW1lLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zY2FubmVyQ29udHJvbHM7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBkZWNvZGluZyBmcm9tIHRoZSBjdXJyZW50IG9yIGEgbmV3IHZpZGVvIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VJZCBUaGUgZGV2aWNlJ3MgdG8gYmUgdXNlZCBJZFxuICAgKiBAcGFyYW0gcHJldmlld0VsIEEgbmV3IHZpZGVvIGVsZW1lbnRcbiAgICovXG4gIHB1YmxpYyBhc3luYyBzY2FuRnJvbURldmljZU9ic2VydmFibGUoXG4gICAgZGV2aWNlSWQ/OiBzdHJpbmcsXG4gICAgcHJldmlld0VsPzogSFRNTFZpZGVvRWxlbWVudFxuICApOiBQcm9taXNlPE9ic2VydmFibGU8UmVzdWx0QW5kRXJyb3I+PiB7XG5cbiAgICBjb25zdCBzY2FuJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UmVzdWx0QW5kRXJyb3I+KHt9KTtcbiAgICBsZXQgY3RybHM7XG5cbiAgICB0cnkge1xuICAgICAgY3RybHMgPSBhd2FpdCB0aGlzLmRlY29kZUZyb21WaWRlb0RldmljZShkZXZpY2VJZCwgcHJldmlld0VsLCAocmVzdWx0LCBlcnJvcikgPT4ge1xuXG4gICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICBzY2FuJC5uZXh0KHsgcmVzdWx0IH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVycm9yTmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgICAgICAgLy8gc3RyZWFtIGNhbm5vdCBzdG9wIG9uIGZhaWxzLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgLy8gc2NhbiBGYWlsdXJlIC0gZm91bmQgbm90aGluZywgbm8gZXJyb3JcbiAgICAgICAgICBlcnJvck5hbWUgPT09IE5vdEZvdW5kRXhjZXB0aW9uLm5hbWUgfHxcbiAgICAgICAgICAvLyBzY2FuIEVycm9yIC0gZm91bmQgdGhlIFFSIGJ1dCBnb3QgZXJyb3Igb24gZGVjb2RpbmdcbiAgICAgICAgICBlcnJvck5hbWUgPT09IENoZWNrc3VtRXhjZXB0aW9uLm5hbWUgfHxcbiAgICAgICAgICBlcnJvck5hbWUgPT09IEZvcm1hdEV4Y2VwdGlvbi5uYW1lIHx8XG4gICAgICAgICAgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnTm8gTXVsdGlGb3JtYXQgUmVhZGVycyB3ZXJlIGFibGUgdG8gZGV0ZWN0IHRoZSBjb2RlLicpXG4gICAgICAgICkge1xuICAgICAgICAgIHNjYW4kLm5leHQoeyBlcnJvciB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwcm9iYWJseSBmYXRhbCBlcnJvclxuICAgICAgICBzY2FuJC5lcnJvcihlcnJvcik7XG4gICAgICAgIHRoaXMuc2Nhbm5lckNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5zY2FubmVyQ29udHJvbHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNjYW5uZXJDb250cm9scyA9IHtcbiAgICAgICAgLi4uY3RybHMsXG4gICAgICAgIHN0b3AoKSB7XG4gICAgICAgICAgY3RybHMuc3RvcCgpO1xuICAgICAgICAgIHNjYW4kLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNjYW4kLmVycm9yKGUpO1xuICAgICAgdGhpcy5zY2FubmVyQ29udHJvbHM/LnN0b3AoKTtcbiAgICAgIHRoaXMuc2Nhbm5lckNvbnRyb2xzID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FuJC5hc09ic2VydmFibGUoKTtcbiAgfVxufVxuIl19