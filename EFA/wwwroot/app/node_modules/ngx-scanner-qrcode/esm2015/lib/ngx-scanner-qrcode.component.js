/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, ViewChild, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, AsyncSubject } from 'rxjs';
import { AS_COMPLETE, BLOB_TO_FILE, CANVAS_TO_BLOB, DRAW_RESULT_APPEND_CHILD, FILES_TO_SCAN, HAS_OWN_PROPERTY, OVERRIDES, PLAY_AUDIO, VIBRATE } from './ngx-scanner-qrcode.helper';
import { CONFIG_DEFAULT, MEDIA_STREAM_DEFAULT } from './ngx-scanner-qrcode.default';
export class NgxScannerQrcodeComponent {
    constructor() {
        /**
         * EventEmitter
         */
        this.event = new EventEmitter();
        /**
         * Input
         */
        this.src = CONFIG_DEFAULT.src;
        this.fps = CONFIG_DEFAULT.fps;
        this.vibrate = CONFIG_DEFAULT.vibrate;
        this.decode = CONFIG_DEFAULT.decode;
        this.isBeep = CONFIG_DEFAULT.isBeep;
        this.deviceActive = CONFIG_DEFAULT.deviceActive;
        this.config = CONFIG_DEFAULT;
        this.constraints = CONFIG_DEFAULT.constraints;
        /**
         * Export
         */
        this.isStart = false;
        this.isLoading = false;
        this.isTorch = false;
        this.data = new BehaviorSubject([]);
        this.devices = new BehaviorSubject([]);
        this.dataForResize = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.overrideConfig();
        if (this.src) {
            this.loadImage(this.src);
        }
        this.resize();
    }
    /**
     * start
     * @return {?} AsyncSubject
     */
    start() {
        /** @type {?} */
        const as = new AsyncSubject();
        if (this.isStart) {
            // Reject
            AS_COMPLETE(as, false);
        }
        else {
            // mediaDevices
            this.loadAllDevices(as);
        }
        return as;
    }
    /**
     * playDevice
     * @param {?} deviceId
     * @param {?=} as
     * @return {?} AsyncSubject
     */
    playDevice(deviceId, as = new AsyncSubject()) {
        /** @type {?} */
        const existDeviceId = this.isStart ? this.getConstraints().deviceId != deviceId : true;
        switch (true) {
            case deviceId == 'null' || deviceId == null:
                this.stop();
                AS_COMPLETE(as, false);
                break;
            case deviceId && existDeviceId:
                stop();
                this.stop();
                clearInterval(this.rAF_ID);
                // Loading on
                this.status(false, true);
                /** @type {?} */
                const constraints = {
                    audio: false,
                    video: (typeof (this.constraints && this.constraints.video) === 'boolean') ? { deviceId: deviceId } : Object.assign({ deviceId: deviceId }, this.constraints && this.constraints.video)
                };
                this.deviceActive = this.devices.value.findIndex((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.deviceId == deviceId));
                // MediaStream
                navigator.mediaDevices.getUserMedia(constraints).then((/**
                 * @param {?} stream
                 * @return {?}
                 */
                (stream) => {
                    this.video.nativeElement.srcObject = stream;
                    this.video.nativeElement.onloadedmetadata = (/**
                     * @return {?}
                     */
                    () => {
                        this.video.nativeElement.play();
                        this.requestAnimationFrame();
                        this.status(true, false);
                        AS_COMPLETE(as, true);
                    });
                })).catch((/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.status(false, false);
                    this.eventEmit(false);
                    AS_COMPLETE(as, false, error);
                }));
                break;
            default:
                AS_COMPLETE(as, false);
                break;
        }
        return as;
    }
    /**
     * stop
     * @return {?} AsyncSubject
     */
    stop() {
        this.eventEmit(null);
        this.status(false, false);
        /** @type {?} */
        const as = new AsyncSubject();
        try {
            this.removeCanvas();
            clearInterval(this.rAF_ID);
            ((/** @type {?} */ (this.video.nativeElement.srcObject))).getTracks().forEach((/**
             * @param {?} track
             * @return {?}
             */
            (track) => {
                track.stop();
                AS_COMPLETE(as, true);
            }));
        }
        catch (error) {
            AS_COMPLETE(as, false, (/** @type {?} */ (error)));
        }
        return as;
    }
    /**
     * play
     * @return {?} AsyncSubject
     */
    play() {
        /** @type {?} */
        const as = new AsyncSubject();
        if (this.isPause) {
            this.video.nativeElement.play();
            this.requestAnimationFrame();
            AS_COMPLETE(as, true);
        }
        else {
            AS_COMPLETE(as, false);
        }
        return as;
    }
    /**
     * pause
     * @return {?} AsyncSubject
     */
    pause() {
        /** @type {?} */
        const as = new AsyncSubject();
        if (this.isStart) {
            clearInterval(this.rAF_ID);
            this.video.nativeElement.pause();
            AS_COMPLETE(as, true);
        }
        else {
            AS_COMPLETE(as, false);
        }
        return as;
    }
    /**
     * loadImage
     * @param {?} src
     * @return {?} AsyncSubject
     */
    loadImage(src) {
        /** @type {?} */
        const as = new AsyncSubject();
        // Loading on
        this.status(false, true);
        // Set the src of this Image object.
        /** @type {?} */
        const image = new Image();
        // Setting cross origin value to anonymous
        image.setAttribute('crossOrigin', 'anonymous');
        // When our image has loaded.
        image.onload = (/**
         * @return {?}
         */
        () => {
            this.drawImage(image, (/**
             * @param {?} flag
             * @return {?}
             */
            (flag) => {
                this.status(false, false);
                AS_COMPLETE(as, flag);
            }));
        });
        // Set src
        image.src = src;
        return as;
    }
    /**
     * torcher
     * @return {?} AsyncSubject
     */
    torcher() {
        /** @type {?} */
        const as = this.applyConstraints({ torch: this.isTorch });
        as.subscribe((/**
         * @return {?}
         */
        () => false), (/**
         * @return {?}
         */
        () => this.isTorch = !this.isTorch));
        return as;
    }
    /**
     * applyConstraints
     * @param {?} constraints
     * @return {?} AsyncSubject
     */
    applyConstraints(constraints) {
        /** @type {?} */
        const as = new AsyncSubject();
        /** @type {?} */
        const stream = (/** @type {?} */ (this.video.nativeElement.srcObject));
        /** @type {?} */
        const videoTrack = (/** @type {?} */ (stream.getVideoTracks()[0]));
        /** @type {?} */
        const imageCapture = new ((/** @type {?} */ (window))).ImageCapture(videoTrack);
        imageCapture.getPhotoCapabilities().then((/**
         * @return {?}
         */
        () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield videoTrack.applyConstraints((/** @type {?} */ ({ advanced: [constraints] })));
            AS_COMPLETE(as, true);
        }))).catch((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            switch (error && error.name) {
                case 'NotFoundError':
                case 'DevicesNotFoundError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Required track is missing')));
                    break;
                case 'NotReadableError':
                case 'TrackStartError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Webcam or mic are already in use')));
                    break;
                case 'OverconstrainedError':
                case 'ConstraintNotSatisfiedError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Constraints can not be satisfied by avb. devices')));
                    break;
                case 'NotAllowedError':
                case 'PermissionDeniedError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Permission denied in browser')));
                    break;
                case 'TypeError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Empty constraints object')));
                    break;
                default:
                    AS_COMPLETE(as, false, (/** @type {?} */ (error)));
                    break;
            }
        }));
        return as;
    }
    ;
    /**
     * getConstraints
     * @return {?}
     */
    getConstraints() {
        /** @type {?} */
        const stream = (/** @type {?} */ (this.video.nativeElement.srcObject));
        /** @type {?} */
        const videoTrack = stream && (/** @type {?} */ (stream.getVideoTracks()[0]));
        return videoTrack && (/** @type {?} */ (videoTrack.getConstraints()));
    }
    /**
     * download
     * @param {?=} fileName
     * @return {?} AsyncSubject
     */
    download(fileName = `ngx-scanner-qrcode-${Date.now()}.png`) {
        /** @type {?} */
        const as = new AsyncSubject();
        /** @type {?} */
        const run = (/**
         * @return {?}
         */
        () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const blob = yield CANVAS_TO_BLOB(this.canvas.nativeElement);
            /** @type {?} */
            const file = BLOB_TO_FILE(blob, fileName);
            FILES_TO_SCAN([file], this.config, as).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                res.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    /** @type {?} */
                    const link = document.createElement('a');
                    link.href = item.url;
                    link.download = item.name;
                    link.click();
                    link.remove();
                }));
            }));
        }));
        run();
        return as;
    }
    /**
     * window: resize
     * Draw again!
     * @private
     * @return {?}
     */
    resize() {
        window.addEventListener("resize", (/**
         * @return {?}
         */
        () => {
            if (this.dataForResize && this.dataForResize.length) {
                DRAW_RESULT_APPEND_CHILD((/** @type {?} */ (this.dataForResize)), this.canvas.nativeElement, this.resultsPanel.nativeElement);
            }
        }));
    }
    /**
     * Override config
     * @private
     * @return {?} void
     */
    overrideConfig() {
        if (HAS_OWN_PROPERTY(this.config, 'src'))
            this.src = this.config.src;
        if (HAS_OWN_PROPERTY(this.config, 'fps'))
            this.fps = this.config.fps;
        if (HAS_OWN_PROPERTY(this.config, 'vibrate'))
            this.vibrate = this.config.vibrate;
        if (HAS_OWN_PROPERTY(this.config, 'decode'))
            this.decode = this.config.decode;
        if (HAS_OWN_PROPERTY(this.config, 'isBeep'))
            this.isBeep = this.config.isBeep;
        if (HAS_OWN_PROPERTY(this.config, 'deviceActive'))
            this.deviceActive = this.config.deviceActive;
        if (HAS_OWN_PROPERTY(this.config, 'constraints'))
            this.constraints = OVERRIDES('constraints', this.config, MEDIA_STREAM_DEFAULT);
    }
    /**
     * loadAllDevices
     * @private
     * @param {?} as
     * @return {?}
     */
    loadAllDevices(as) {
        navigator.mediaDevices.enumerateDevices().then((/**
         * @param {?} devices
         * @return {?}
         */
        devices => {
            /** @type {?} */
            let cameraDevices = [];
            devices.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => f.kind == 'videoinput' && cameraDevices.push(f)));
            this.devices.next(cameraDevices);
            if (cameraDevices.length > 0) {
                /** @type {?} */
                const index = Math.max(0, (cameraDevices.length > this.deviceActive ? this.deviceActive : 0));
                this.playDevice(cameraDevices[index].deviceId, as);
            }
            else {
                AS_COMPLETE(as, false, (/** @type {?} */ ('No camera detected.')));
            }
        }));
    }
    /**
     * drawImage
     * @private
     * @param {?} element
     * @param {?=} callback
     * @return {?}
     */
    drawImage(element, callback = (/**
     * @return {?}
     */
    () => { })) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Get the canvas element by using the getElementById method.
            /** @type {?} */
            const canvas = this.canvas.nativeElement;
            // Get a 2D drawing context for the canvas.
            /** @type {?} */
            const ctx = (/** @type {?} */ (canvas.getContext('2d', { willReadFrequently: true })));
            // HTMLImageElement size
            if (element instanceof HTMLImageElement) {
                canvas.width = element.naturalWidth;
                canvas.height = element.naturalHeight;
                element.style.visibility = '';
                this.video.nativeElement.style.visibility = 'hidden';
                this.video.nativeElement.style.height = canvas.offsetHeight + 'px';
            }
            // HTMLVideoElement size
            if (element instanceof HTMLVideoElement) {
                canvas.width = element.videoWidth;
                canvas.height = element.videoHeight;
                element.style.visibility = '';
                this.canvas.nativeElement.style.visibility = 'hidden';
            }
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            // Draw image
            ctx.drawImage(element, 0, 0, canvas.width, canvas.height);
            // Data image
            /** @type {?} */
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            // Draw frame
            /** @type {?} */
            const code = yield zbarWasm.scanImageData(imageData);
            if (code && code.length) {
                // Decode
                code.forEach((/**
                 * @param {?} s
                 * @return {?}
                 */
                (s) => s.value = s.decode(this.decode && this.decode.toLocaleLowerCase())));
                // Overlay
                DRAW_RESULT_APPEND_CHILD(code, Object.freeze(this.canvas.nativeElement), this.resultsPanel.nativeElement);
                // To blob and emit data
                /** @type {?} */
                const EMIT_DATA = (/**
                 * @return {?}
                 */
                () => {
                    this.eventEmit(code);
                    this.dataForResize = code;
                });
                // HTMLImageElement
                if (element instanceof HTMLImageElement) {
                    callback(true);
                    EMIT_DATA();
                    VIBRATE(this.vibrate);
                    PLAY_AUDIO(this.isBeep);
                }
                // HTMLVideoElement
                if (element instanceof HTMLVideoElement) {
                    EMIT_DATA();
                    VIBRATE(this.vibrate);
                    PLAY_AUDIO(this.isBeep);
                }
            }
            else {
                callback(false);
                this.removeCanvas();
                this.dataForResize = code;
            }
        });
    }
    /**
     * removeCanvas
     * @private
     * @return {?}
     */
    removeCanvas() {
        Object.assign([], this.resultsPanel.nativeElement.childNodes).forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => this.resultsPanel.nativeElement.removeChild(el)));
    }
    /**
     * status
     * @private
     * @param {?} isStart
     * @param {?} isLoading
     * @return {?}
     */
    status(isStart, isLoading) {
        this.isStart = isStart;
        this.isLoading = isLoading;
    }
    /**
     * eventEmit
     * @private
     * @param {?=} response
     * @return {?}
     */
    eventEmit(response = false) {
        (response !== false) && this.data.next(response || { data: null });
        (response !== false) && this.event.emit(response || { data: null });
    }
    /**
     * Single-thread
     * Loop Recording on Camera
     * Must be destroy request
     * Not using: requestAnimationFrame
     * @private
     * @return {?}
     */
    requestAnimationFrame() {
        this.rAF_ID = setInterval((/**
         * @return {?}
         */
        () => {
            if (this.video.nativeElement.readyState === this.video.nativeElement.HAVE_ENOUGH_DATA) {
                this.drawImage(this.video.nativeElement);
            }
        }), this.fps);
    }
    /**
     * Status of camera
     * @return {?} boolean
     */
    get isPause() {
        return this.isStart && this.video.nativeElement.paused;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.pause();
    }
}
NgxScannerQrcodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-scanner-qrcode',
                template: `<div #resultsPanel class="origin-overlay"></div><canvas #canvas class="origin-canvas"></canvas><video #video playsinline class="origin-video"></video>`,
                host: { 'class': 'ngx-scanner-qrcode' },
                exportAs: 'scanner',
                inputs: ['src', 'fps', 'vibrate', 'decode', 'isBeep', 'deviceActive', 'config', 'constraints'],
                outputs: ['event'],
                queries: {
                    video: new ViewChild('video'),
                    canvas: new ViewChild('canvas'),
                    resultsPanel: new ViewChild('resultsPanel')
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".ngx-scanner-qrcode{display:block;position:relative}.origin-overlay{width:100%;position:absolute}.origin-overlay span{z-index:2;color:red;text-align:left;position:absolute}.origin-overlay .qrcode-polygon{z-index:1;position:absolute}.origin-canvas{width:100%;position:absolute}.origin-video{width:100%;background-color:#262626}.qrcode-tooltip{z-index:3;position:absolute}.qrcode-tooltip:hover .qrcode-tooltip-temp{display:block;position:absolute}.qrcode-tooltip-temp{bottom:0;left:50%;padding:5px;color:#fff;text-align:left;display:none;max-width:450px;border-radius:5px;width:-moz-max-content;width:max-content;word-wrap:break-word;transform:translate(-50%);transform-style:preserve-3d;background-color:#000000d0;box-shadow:1px 1px 20px #000000e0}"]
            }] }
];
if (false) {
    /**
     * Element
     * playsinline required to tell iOS safari we don't want fullscreen
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.video;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.canvas;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.resultsPanel;
    /**
     * EventEmitter
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.event;
    /**
     * Input
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.src;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.fps;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.vibrate;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.decode;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isBeep;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.deviceActive;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.config;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.constraints;
    /**
     * Export
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.isStart;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isLoading;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isTorch;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.data;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.devices;
    /**
     * Private
     * @type {?}
     * @private
     */
    NgxScannerQrcodeComponent.prototype.rAF_ID;
    /**
     * @type {?}
     * @private
     */
    NgxScannerQrcodeComponent.prototype.dataForResize;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,