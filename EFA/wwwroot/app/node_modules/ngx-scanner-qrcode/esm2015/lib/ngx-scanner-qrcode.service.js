/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AsyncSubject } from 'rxjs';
import { AS_COMPLETE, FILES_TO_SCAN } from './ngx-scanner-qrcode.helper';
import * as i0 from "@angular/core";
export class NgxScannerQrcodeService {
    /**
     * Load files
     * @param {?=} files
     * @return {?} AsyncSubject
     */
    loadFiles(files = []) {
        /** @type {?} */
        const as = new AsyncSubject();
        Promise.all(Object.assign([], files).map((/**
         * @param {?} m
         * @return {?}
         */
        m => this.readAsDataURL(m)))).then((/**
         * @param {?} img
         * @return {?}
         */
        (img) => AS_COMPLETE(as, img))).catch((/**
         * @param {?} error
         * @return {?}
         */
        (error) => AS_COMPLETE(as, null, error)));
        return as;
    }
    /**
     * loadFilesToScan
     * @param {?=} files
     * @param {?=} config
     * @return {?}
     */
    loadFilesToScan(files = [], config) {
        return FILES_TO_SCAN(files, config);
    }
    /**
     * readAsDataURL
     * @private
     * @param {?} file
     * @return {?} Promise
     */
    readAsDataURL(file) {
        /** drawImage **/
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const fileReader = new FileReader();
            fileReader.onload = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const objectFile = {
                    name: file.name,
                    file: file,
                    url: URL.createObjectURL(file)
                };
                resolve(objectFile);
            });
            fileReader.onerror = (/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error));
            fileReader.readAsDataURL(file);
        }));
    }
}
NgxScannerQrcodeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ NgxScannerQrcodeService.ngInjectableDef = i0.defineInjectable({ factory: function NgxScannerQrcodeService_Factory() { return new NgxScannerQrcodeService(); }, token: NgxScannerQrcodeService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNjYW5uZXItcXJjb2RlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nhbm5lci1xcmNvZGUvIiwic291cmNlcyI6WyJsaWIvbmd4LXNjYW5uZXItcXJjb2RlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQU16RSxNQUFNOzs7Ozs7SUFPRyxTQUFTLENBQUMsUUFBZ0IsRUFBRTs7Y0FDM0IsRUFBRSxHQUFHLElBQUksWUFBWSxFQUFnQztRQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLEdBQWlDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUMsQ0FBQyxLQUFLOzs7O1FBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFDLENBQUM7UUFDNUwsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7Ozs7O0lBUU0sZUFBZSxDQUFDLFFBQWdCLEVBQUUsRUFBRSxNQUEyQjtRQUNwRSxPQUFPLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Ozs7OztJQU9PLGFBQWEsQ0FBQyxJQUFVO1FBQzlCLGlCQUFpQjtRQUNqQixPQUFPLElBQUksT0FBTzs7Ozs7UUFBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTs7a0JBQy9CLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRTtZQUNuQyxVQUFVLENBQUMsTUFBTTs7O1lBQUcsR0FBRyxFQUFFOztzQkFDakIsVUFBVSxHQUFHO29CQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsSUFBSSxFQUFFLElBQUk7b0JBQ1YsR0FBRyxFQUFFLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO2lCQUMvQjtnQkFDRCxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFBLENBQUE7WUFDRCxVQUFVLENBQUMsT0FBTzs7OztZQUFHLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQztZQUNuRCxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLENBQUMsRUFBQyxDQUFBO0lBQ0osQ0FBQzs7O1lBOUNGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXN5bmNTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEFTX0NPTVBMRVRFLCBGSUxFU19UT19TQ0FOIH0gZnJvbSAnLi9uZ3gtc2Nhbm5lci1xcmNvZGUuaGVscGVyJztcclxuaW1wb3J0IHsgU2Nhbm5lclFSQ29kZUNvbmZpZywgU2Nhbm5lclFSQ29kZVNlbGVjdGVkRmlsZXMgfSBmcm9tICcuL25neC1zY2FubmVyLXFyY29kZS5vcHRpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFNjYW5uZXJRcmNvZGVTZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogTG9hZCBmaWxlc1xyXG4gICAqIEBwYXJhbSBmaWxlcyBcclxuICAgKiBAcmV0dXJuIEFzeW5jU3ViamVjdFxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkRmlsZXMoZmlsZXM6IEZpbGVbXSA9IFtdKTogQXN5bmNTdWJqZWN0PFNjYW5uZXJRUkNvZGVTZWxlY3RlZEZpbGVzW10+IHtcclxuICAgIGNvbnN0IGFzID0gbmV3IEFzeW5jU3ViamVjdDxTY2FubmVyUVJDb2RlU2VsZWN0ZWRGaWxlc1tdPigpO1xyXG4gICAgUHJvbWlzZS5hbGwoT2JqZWN0LmFzc2lnbihbXSwgZmlsZXMpLm1hcChtID0+IHRoaXMucmVhZEFzRGF0YVVSTChtKSkpLnRoZW4oKGltZzogU2Nhbm5lclFSQ29kZVNlbGVjdGVkRmlsZXNbXSkgPT4gQVNfQ09NUExFVEUoYXMsIGltZykpLmNhdGNoKChlcnJvcjogYW55KSA9PiBBU19DT01QTEVURShhcywgbnVsbCwgZXJyb3IpKTtcclxuICAgIHJldHVybiBhcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGxvYWRGaWxlc1RvU2NhblxyXG4gICAqIEBwYXJhbSBmaWxlcyBcclxuICAgKiBAcGFyYW0gY29uZmlnIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkRmlsZXNUb1NjYW4oZmlsZXM6IEZpbGVbXSA9IFtdLCBjb25maWc6IFNjYW5uZXJRUkNvZGVDb25maWcpOiBBc3luY1N1YmplY3Q8U2Nhbm5lclFSQ29kZVNlbGVjdGVkRmlsZXNbXT4ge1xyXG4gICAgcmV0dXJuIEZJTEVTX1RPX1NDQU4oZmlsZXMsIGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiByZWFkQXNEYXRhVVJMXHJcbiAgICogQHBhcmFtIGZpbGUgXHJcbiAgICogQHJldHVybiBQcm9taXNlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZWFkQXNEYXRhVVJMKGZpbGU6IEZpbGUpOiBQcm9taXNlPFNjYW5uZXJRUkNvZGVTZWxlY3RlZEZpbGVzPiB7XHJcbiAgICAvKiogZHJhd0ltYWdlICoqL1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9iamVjdEZpbGUgPSB7XHJcbiAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXHJcbiAgICAgICAgICBmaWxlOiBmaWxlLFxyXG4gICAgICAgICAgdXJsOiBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXNvbHZlKG9iamVjdEZpbGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGZpbGVSZWFkZXIub25lcnJvciA9IChlcnJvcjogYW55KSA9PiByZWplY3QoZXJyb3IpO1xyXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICB9KVxyXG4gIH1cclxufSJdfQ==