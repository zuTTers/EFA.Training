/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @record
 */
export function ScannerQRCodeConfig() { }
if (false) {
    /** @type {?|undefined} */
    ScannerQRCodeConfig.prototype.src;
    /** @type {?|undefined} */
    ScannerQRCodeConfig.prototype.fps;
    /** @type {?|undefined} */
    ScannerQRCodeConfig.prototype.vibrate;
    /**
     * support mobile
     * @type {?|undefined}
     */
    ScannerQRCodeConfig.prototype.decode;
    /** @type {?|undefined} */
    ScannerQRCodeConfig.prototype.isBeep;
    /** @type {?|undefined} */
    ScannerQRCodeConfig.prototype.deviceActive;
    /** @type {?|undefined} */
    ScannerQRCodeConfig.prototype.constraints;
}
/**
 * @record
 */
export function ScannerQRCodeSelectedFiles() { }
if (false) {
    /** @type {?} */
    ScannerQRCodeSelectedFiles.prototype.url;
    /** @type {?} */
    ScannerQRCodeSelectedFiles.prototype.name;
    /** @type {?} */
    ScannerQRCodeSelectedFiles.prototype.file;
    /** @type {?|undefined} */
    ScannerQRCodeSelectedFiles.prototype.data;
    /** @type {?|undefined} */
    ScannerQRCodeSelectedFiles.prototype.canvas;
}
/**
 * @record
 */
export function ScannerQRCodeDevice() { }
if (false) {
    /** @type {?} */
    ScannerQRCodeDevice.prototype.kind;
    /** @type {?} */
    ScannerQRCodeDevice.prototype.label;
    /** @type {?} */
    ScannerQRCodeDevice.prototype.groupId;
    /** @type {?} */
    ScannerQRCodeDevice.prototype.deviceId;
}
/**
 * @record
 */
export function ScannerQRCodePoint() { }
if (false) {
    /** @type {?} */
    ScannerQRCodePoint.prototype.x;
    /** @type {?} */
    ScannerQRCodePoint.prototype.y;
}
/** @enum {number} */
var ScannerQRCodeSymbolType = {
    ScannerQRCode_NONE: 0,
    ScannerQRCode_PARTIAL: 1,
    ScannerQRCode_EAN2: 2,
    ScannerQRCode_EAN5: 5,
    ScannerQRCode_EAN8: 8,
    ScannerQRCode_UPCE: 9,
    ScannerQRCode_ISBN10: 10,
    ScannerQRCode_UPCA: 12,
    ScannerQRCode_EAN13: 13,
    ScannerQRCode_ISBN13: 14,
    ScannerQRCode_COMPOSITE: 15,
    ScannerQRCode_I25: 25,
    ScannerQRCode_DATABAR: 34,
    ScannerQRCode_DATABAR_EXP: 35,
    ScannerQRCode_CODABAR: 38,
    ScannerQRCode_CODE39: 39,
    ScannerQRCode_PDF417: 57,
    ScannerQRCode_QRCODE: 64,
    ScannerQRCode_SQCODE: 80,
    ScannerQRCode_CODE93: 93,
    ScannerQRCode_CODE128: 128,
    /*
     * Please see _ScannerQRCode_get_symbol_hash() if adding
     * anything after 128
     */
    /** mask for base symbol type.
     * @deprecated in 0.11, remove this from existing code
     */
    ScannerQRCode_SYMBOL: 255,
    /** 2-digit add-on flag.
     * @deprecated in 0.11, a ::ScannerQRCode_EAN2 component is used for
     * 2-digit GS1 add-ons
     */
    ScannerQRCode_ADDON2: 512,
    /** 5-digit add-on flag.
     * @deprecated in 0.11, a ::ScannerQRCode_EAN5 component is used for
     * 5-digit GS1 add-ons
     */
    ScannerQRCode_ADDON5: 1280,
    /** add-on flag mask.
     * @deprecated in 0.11, GS1 add-ons are represented using composite
     * symbols of type ::ScannerQRCode_COMPOSITE; add-on components use ::ScannerQRCode_EAN2
     * or ::ScannerQRCode_EAN5
     */
    ScannerQRCode_ADDON: 1792,
};
export { ScannerQRCodeSymbolType };
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_NONE] = 'ScannerQRCode_NONE';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_PARTIAL] = 'ScannerQRCode_PARTIAL';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_EAN2] = 'ScannerQRCode_EAN2';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_EAN5] = 'ScannerQRCode_EAN5';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_EAN8] = 'ScannerQRCode_EAN8';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_UPCE] = 'ScannerQRCode_UPCE';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_ISBN10] = 'ScannerQRCode_ISBN10';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_UPCA] = 'ScannerQRCode_UPCA';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_EAN13] = 'ScannerQRCode_EAN13';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_ISBN13] = 'ScannerQRCode_ISBN13';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_COMPOSITE] = 'ScannerQRCode_COMPOSITE';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_I25] = 'ScannerQRCode_I25';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_DATABAR] = 'ScannerQRCode_DATABAR';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_DATABAR_EXP] = 'ScannerQRCode_DATABAR_EXP';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_CODABAR] = 'ScannerQRCode_CODABAR';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_CODE39] = 'ScannerQRCode_CODE39';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_PDF417] = 'ScannerQRCode_PDF417';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_QRCODE] = 'ScannerQRCode_QRCODE';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_SQCODE] = 'ScannerQRCode_SQCODE';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_CODE93] = 'ScannerQRCode_CODE93';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_CODE128] = 'ScannerQRCode_CODE128';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_SYMBOL] = 'ScannerQRCode_SYMBOL';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_ADDON2] = 'ScannerQRCode_ADDON2';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_ADDON5] = 'ScannerQRCode_ADDON5';
ScannerQRCodeSymbolType[ScannerQRCodeSymbolType.ScannerQRCode_ADDON] = 'ScannerQRCode_ADDON';
/** @enum {number} */
var ScannerQRCodeConfigType = {
    ScannerQRCode_CFG_ENABLE: 0,
    ScannerQRCode_CFG_ADD_CHECK: 1,
    ScannerQRCode_CFG_EMIT_CHECK: 2,
    ScannerQRCode_CFG_ASCII: 3,
    ScannerQRCode_CFG_BINARY: 4,
    ScannerQRCode_CFG_NUM: 5,
    ScannerQRCode_CFG_MIN_LEN: 32,
    ScannerQRCode_CFG_MAX_LEN: 33,
    ScannerQRCode_CFG_UNCERTAINTY: 64,
    ScannerQRCode_CFG_POSITION: 128,
    ScannerQRCode_CFG_TEST_INVERTED: 129,
    ScannerQRCode_CFG_X_DENSITY: 256,
    ScannerQRCode_CFG_Y_DENSITY: 257,
};
export { ScannerQRCodeConfigType };
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_ENABLE] = 'ScannerQRCode_CFG_ENABLE';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_ADD_CHECK] = 'ScannerQRCode_CFG_ADD_CHECK';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_EMIT_CHECK] = 'ScannerQRCode_CFG_EMIT_CHECK';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_ASCII] = 'ScannerQRCode_CFG_ASCII';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_BINARY] = 'ScannerQRCode_CFG_BINARY';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_NUM] = 'ScannerQRCode_CFG_NUM';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_MIN_LEN] = 'ScannerQRCode_CFG_MIN_LEN';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_MAX_LEN] = 'ScannerQRCode_CFG_MAX_LEN';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_UNCERTAINTY] = 'ScannerQRCode_CFG_UNCERTAINTY';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_POSITION] = 'ScannerQRCode_CFG_POSITION';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_TEST_INVERTED] = 'ScannerQRCode_CFG_TEST_INVERTED';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_X_DENSITY] = 'ScannerQRCode_CFG_X_DENSITY';
ScannerQRCodeConfigType[ScannerQRCodeConfigType.ScannerQRCode_CFG_Y_DENSITY] = 'ScannerQRCode_CFG_Y_DENSITY';
/** @enum {number} */
var ScannerQRCodeOrientation = {
    ScannerQRCode_ORIENT_UNKNOWN: -1,
    ScannerQRCode_ORIENT_UP: 0,
    ScannerQRCode_ORIENT_RIGHT: 1,
    ScannerQRCode_ORIENT_DOWN: 2,
    ScannerQRCode_ORIENT_LEFT: 3,
};
export { ScannerQRCodeOrientation };
ScannerQRCodeOrientation[ScannerQRCodeOrientation.ScannerQRCode_ORIENT_UNKNOWN] = 'ScannerQRCode_ORIENT_UNKNOWN';
ScannerQRCodeOrientation[ScannerQRCodeOrientation.ScannerQRCode_ORIENT_UP] = 'ScannerQRCode_ORIENT_UP';
ScannerQRCodeOrientation[ScannerQRCodeOrientation.ScannerQRCode_ORIENT_RIGHT] = 'ScannerQRCode_ORIENT_RIGHT';
ScannerQRCodeOrientation[ScannerQRCodeOrientation.ScannerQRCode_ORIENT_DOWN] = 'ScannerQRCode_ORIENT_DOWN';
ScannerQRCodeOrientation[ScannerQRCodeOrientation.ScannerQRCode_ORIENT_LEFT] = 'ScannerQRCode_ORIENT_LEFT';
var ScannerQRCodeTypePointer = /** @class */ (function () {
    function ScannerQRCodeTypePointer(ptr, buf) {
        this.ptr = ptr;
        this.ptr32 = ptr >> 2;
        this.buf = buf;
        this.HEAP8 = new Int8Array(buf);
        this.HEAPU32 = new Uint32Array(buf);
        this.HEAP32 = new Int32Array(buf);
    }
    return ScannerQRCodeTypePointer;
}());
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ScannerQRCodeTypePointer.prototype.ptr;
    /**
     * @type {?}
     * @protected
     */
    ScannerQRCodeTypePointer.prototype.ptr32;
    /**
     * @type {?}
     * @protected
     */
    ScannerQRCodeTypePointer.prototype.buf;
    /**
     * @type {?}
     * @protected
     */
    ScannerQRCodeTypePointer.prototype.HEAP8;
    /**
     * @type {?}
     * @protected
     */
    ScannerQRCodeTypePointer.prototype.HEAP32;
    /**
     * @type {?}
     * @protected
     */
    ScannerQRCodeTypePointer.prototype.HEAPU32;
}
var ScannerQRCodeSymbolPtr = /** @class */ (function (_super) {
    tslib_1.__extends(ScannerQRCodeSymbolPtr, _super);
    function ScannerQRCodeSymbolPtr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ScannerQRCodeSymbolPtr.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this.HEAPU32[this.ptr32]));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScannerQRCodeSymbolPtr.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var len = this.HEAPU32[this.ptr32 + 4];
            /** @type {?} */
            var ptr = this.HEAPU32[this.ptr32 + 5];
            return Int8Array.from(this.HEAP8.subarray(ptr, ptr + len));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScannerQRCodeSymbolPtr.prototype, "points", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var len = this.HEAPU32[this.ptr32 + 7];
            /** @type {?} */
            var ptr = this.HEAPU32[this.ptr32 + 8];
            /** @type {?} */
            var ptr32 = ptr >> 2;
            /** @type {?} */
            var res = [];
            for (var i = 0; i < len; ++i) {
                /** @type {?} */
                var x = this.HEAP32[ptr32 + i * 2];
                /** @type {?} */
                var y = this.HEAP32[ptr32 + i * 2 + 1];
                res.push((/** @type {?} */ ({ x: x, y: y })));
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScannerQRCodeSymbolPtr.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this.HEAP32[this.ptr32 + 9];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScannerQRCodeSymbolPtr.prototype, "next", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var ptr = this.HEAPU32[this.ptr32 + 11];
            if (!ptr)
                return null;
            return new ScannerQRCodeSymbolPtr(ptr, this.buf);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScannerQRCodeSymbolPtr.prototype, "time", {
        get: /**
         * @return {?}
         */
        function () {
            return this.HEAPU32[this.ptr32 + 13];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScannerQRCodeSymbolPtr.prototype, "cacheCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.HEAP32[this.ptr32 + 14];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScannerQRCodeSymbolPtr.prototype, "quality", {
        get: /**
         * @return {?}
         */
        function () {
            return this.HEAP32[this.ptr32 + 15];
        },
        enumerable: true,
        configurable: true
    });
    return ScannerQRCodeSymbolPtr;
}(ScannerQRCodeTypePointer));
var SymbolSetPtr = /** @class */ (function (_super) {
    tslib_1.__extends(SymbolSetPtr, _super);
    function SymbolSetPtr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SymbolSetPtr.prototype, "head", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var ptr = this.HEAPU32[this.ptr32 + 2];
            if (!ptr)
                return null;
            return new ScannerQRCodeSymbolPtr(ptr, this.buf);
        },
        enumerable: true,
        configurable: true
    });
    return SymbolSetPtr;
}(ScannerQRCodeTypePointer));
var ScannerQRCodeResult = /** @class */ (function () {
    function ScannerQRCodeResult(ptr) {
        this.value = '';
        this.type = ptr.type;
        this.typeName = ScannerQRCodeSymbolType[this.type];
        this.data = ptr.data;
        this.points = ptr.points;
        this.orientation = ptr.orientation;
        this.time = ptr.time;
        this.cacheCount = ptr.cacheCount;
        this.quality = ptr.quality;
    }
    /**
     * @param {?} ptr
     * @param {?} buf
     * @return {?}
     */
    ScannerQRCodeResult.createSymbolsFromPtr = /**
     * @param {?} ptr
     * @param {?} buf
     * @return {?}
     */
    function (ptr, buf) {
        if (ptr == 0)
            return [];
        /** @type {?} */
        var set = new SymbolSetPtr(ptr, buf);
        /** @type {?} */
        var symbol = set.head;
        /** @type {?} */
        var res = [];
        while (symbol !== null) {
            res.push(new ScannerQRCodeResult(symbol));
            symbol = symbol.next;
        }
        return res;
    };
    /**
     * @param {?=} encoding
     * @return {?}
     */
    ScannerQRCodeResult.prototype.decode = /**
     * @param {?=} encoding
     * @return {?}
     */
    function (encoding) {
        /** @type {?} */
        var decoder = new TextDecoder(encoding);
        return decoder.decode(this.data);
    };
    return ScannerQRCodeResult;
}());
export { ScannerQRCodeResult };
if (false) {
    /** @type {?} */
    ScannerQRCodeResult.prototype.type;
    /** @type {?} */
    ScannerQRCodeResult.prototype.typeName;
    /** @type {?} */
    ScannerQRCodeResult.prototype.data;
    /** @type {?} */
    ScannerQRCodeResult.prototype.points;
    /** @type {?} */
    ScannerQRCodeResult.prototype.orientation;
    /** @type {?} */
    ScannerQRCodeResult.prototype.time;
    /** @type {?} */
    ScannerQRCodeResult.prototype.cacheCount;
    /** @type {?} */
    ScannerQRCodeResult.prototype.quality;
    /** @type {?} */
    ScannerQRCodeResult.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,