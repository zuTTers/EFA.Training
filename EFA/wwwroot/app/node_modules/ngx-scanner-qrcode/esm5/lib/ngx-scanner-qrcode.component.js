/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, ViewChild, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, AsyncSubject } from 'rxjs';
import { AS_COMPLETE, BLOB_TO_FILE, CANVAS_TO_BLOB, DRAW_RESULT_APPEND_CHILD, FILES_TO_SCAN, HAS_OWN_PROPERTY, OVERRIDES, PLAY_AUDIO, VIBRATE } from './ngx-scanner-qrcode.helper';
import { CONFIG_DEFAULT, MEDIA_STREAM_DEFAULT } from './ngx-scanner-qrcode.default';
var NgxScannerQrcodeComponent = /** @class */ (function () {
    function NgxScannerQrcodeComponent() {
        /**
         * EventEmitter
         */
        this.event = new EventEmitter();
        /**
         * Input
         */
        this.src = CONFIG_DEFAULT.src;
        this.fps = CONFIG_DEFAULT.fps;
        this.vibrate = CONFIG_DEFAULT.vibrate;
        this.decode = CONFIG_DEFAULT.decode;
        this.isBeep = CONFIG_DEFAULT.isBeep;
        this.deviceActive = CONFIG_DEFAULT.deviceActive;
        this.config = CONFIG_DEFAULT;
        this.constraints = CONFIG_DEFAULT.constraints;
        /**
         * Export
         */
        this.isStart = false;
        this.isLoading = false;
        this.isTorch = false;
        this.data = new BehaviorSubject([]);
        this.devices = new BehaviorSubject([]);
        this.dataForResize = [];
    }
    /**
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.overrideConfig();
        if (this.src) {
            this.loadImage(this.src);
        }
        this.resize();
    };
    /**
     * start
     * @return AsyncSubject
     */
    /**
     * start
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.start = /**
     * start
     * @return {?} AsyncSubject
     */
    function () {
        /** @type {?} */
        var as = new AsyncSubject();
        if (this.isStart) {
            // Reject
            AS_COMPLETE(as, false);
        }
        else {
            // mediaDevices
            this.loadAllDevices(as);
        }
        return as;
    };
    /**
     * playDevice
     * @param deviceId
     * @param as
     * @return AsyncSubject
     */
    /**
     * playDevice
     * @param {?} deviceId
     * @param {?=} as
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.playDevice = /**
     * playDevice
     * @param {?} deviceId
     * @param {?=} as
     * @return {?} AsyncSubject
     */
    function (deviceId, as) {
        var _this = this;
        if (as === void 0) { as = new AsyncSubject(); }
        /** @type {?} */
        var existDeviceId = this.isStart ? this.getConstraints().deviceId != deviceId : true;
        switch (true) {
            case deviceId == 'null' || deviceId == null:
                this.stop();
                AS_COMPLETE(as, false);
                break;
            case deviceId && existDeviceId:
                stop();
                this.stop();
                clearInterval(this.rAF_ID);
                // Loading on
                this.status(false, true);
                /** @type {?} */
                var constraints = {
                    audio: false,
                    video: (typeof (this.constraints && this.constraints.video) === 'boolean') ? { deviceId: deviceId } : Object.assign({ deviceId: deviceId }, this.constraints && this.constraints.video)
                };
                this.deviceActive = this.devices.value.findIndex((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.deviceId == deviceId; }));
                // MediaStream
                navigator.mediaDevices.getUserMedia(constraints).then((/**
                 * @param {?} stream
                 * @return {?}
                 */
                function (stream) {
                    _this.video.nativeElement.srcObject = stream;
                    _this.video.nativeElement.onloadedmetadata = (/**
                     * @return {?}
                     */
                    function () {
                        _this.video.nativeElement.play();
                        _this.requestAnimationFrame();
                        _this.status(true, false);
                        AS_COMPLETE(as, true);
                    });
                })).catch((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.status(false, false);
                    _this.eventEmit(false);
                    AS_COMPLETE(as, false, error);
                }));
                break;
            default:
                AS_COMPLETE(as, false);
                break;
        }
        return as;
    };
    /**
     * stop
     * @return AsyncSubject
     */
    /**
     * stop
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.stop = /**
     * stop
     * @return {?} AsyncSubject
     */
    function () {
        this.eventEmit(null);
        this.status(false, false);
        /** @type {?} */
        var as = new AsyncSubject();
        try {
            this.removeCanvas();
            clearInterval(this.rAF_ID);
            ((/** @type {?} */ (this.video.nativeElement.srcObject))).getTracks().forEach((/**
             * @param {?} track
             * @return {?}
             */
            function (track) {
                track.stop();
                AS_COMPLETE(as, true);
            }));
        }
        catch (error) {
            AS_COMPLETE(as, false, (/** @type {?} */ (error)));
        }
        return as;
    };
    /**
     * play
     * @return AsyncSubject
     */
    /**
     * play
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.play = /**
     * play
     * @return {?} AsyncSubject
     */
    function () {
        /** @type {?} */
        var as = new AsyncSubject();
        if (this.isPause) {
            this.video.nativeElement.play();
            this.requestAnimationFrame();
            AS_COMPLETE(as, true);
        }
        else {
            AS_COMPLETE(as, false);
        }
        return as;
    };
    /**
     * pause
     * @return AsyncSubject
     */
    /**
     * pause
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.pause = /**
     * pause
     * @return {?} AsyncSubject
     */
    function () {
        /** @type {?} */
        var as = new AsyncSubject();
        if (this.isStart) {
            clearInterval(this.rAF_ID);
            this.video.nativeElement.pause();
            AS_COMPLETE(as, true);
        }
        else {
            AS_COMPLETE(as, false);
        }
        return as;
    };
    /**
     * loadImage
     * @param src
     * @return AsyncSubject
     */
    /**
     * loadImage
     * @param {?} src
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.loadImage = /**
     * loadImage
     * @param {?} src
     * @return {?} AsyncSubject
     */
    function (src) {
        var _this = this;
        /** @type {?} */
        var as = new AsyncSubject();
        // Loading on
        this.status(false, true);
        // Set the src of this Image object.
        /** @type {?} */
        var image = new Image();
        // Setting cross origin value to anonymous
        image.setAttribute('crossOrigin', 'anonymous');
        // When our image has loaded.
        image.onload = (/**
         * @return {?}
         */
        function () {
            _this.drawImage(image, (/**
             * @param {?} flag
             * @return {?}
             */
            function (flag) {
                _this.status(false, false);
                AS_COMPLETE(as, flag);
            }));
        });
        // Set src
        image.src = src;
        return as;
    };
    /**
     * torcher
     * @return AsyncSubject
     */
    /**
     * torcher
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.torcher = /**
     * torcher
     * @return {?} AsyncSubject
     */
    function () {
        var _this = this;
        /** @type {?} */
        var as = this.applyConstraints({ torch: this.isTorch });
        as.subscribe((/**
         * @return {?}
         */
        function () { return false; }), (/**
         * @return {?}
         */
        function () { return _this.isTorch = !_this.isTorch; }));
        return as;
    };
    /**
     * applyConstraints
     * @return AsyncSubject
     */
    /**
     * applyConstraints
     * @param {?} constraints
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.applyConstraints = /**
     * applyConstraints
     * @param {?} constraints
     * @return {?} AsyncSubject
     */
    function (constraints) {
        var _this = this;
        /** @type {?} */
        var as = new AsyncSubject();
        /** @type {?} */
        var stream = (/** @type {?} */ (this.video.nativeElement.srcObject));
        /** @type {?} */
        var videoTrack = (/** @type {?} */ (stream.getVideoTracks()[0]));
        /** @type {?} */
        var imageCapture = new ((/** @type {?} */ (window))).ImageCapture(videoTrack);
        imageCapture.getPhotoCapabilities().then((/**
         * @return {?}
         */
        function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, videoTrack.applyConstraints((/** @type {?} */ ({ advanced: [constraints] })))];
                    case 1:
                        _a.sent();
                        AS_COMPLETE(as, true);
                        return [2 /*return*/];
                }
            });
        }); })).catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            switch (error && error.name) {
                case 'NotFoundError':
                case 'DevicesNotFoundError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Required track is missing')));
                    break;
                case 'NotReadableError':
                case 'TrackStartError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Webcam or mic are already in use')));
                    break;
                case 'OverconstrainedError':
                case 'ConstraintNotSatisfiedError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Constraints can not be satisfied by avb. devices')));
                    break;
                case 'NotAllowedError':
                case 'PermissionDeniedError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Permission denied in browser')));
                    break;
                case 'TypeError':
                    AS_COMPLETE(as, false, (/** @type {?} */ ('Empty constraints object')));
                    break;
                default:
                    AS_COMPLETE(as, false, (/** @type {?} */ (error)));
                    break;
            }
        }));
        return as;
    };
    ;
    /**
     * getConstraints
     * @param deviceActive
     * @returns
     */
    /**
     * getConstraints
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.getConstraints = /**
     * getConstraints
     * @return {?}
     */
    function () {
        /** @type {?} */
        var stream = (/** @type {?} */ (this.video.nativeElement.srcObject));
        /** @type {?} */
        var videoTrack = stream && (/** @type {?} */ (stream.getVideoTracks()[0]));
        return videoTrack && (/** @type {?} */ (videoTrack.getConstraints()));
    };
    /**
     * download
     * @param fileName
     * @return AsyncSubject
     */
    /**
     * download
     * @param {?=} fileName
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.download = /**
     * download
     * @param {?=} fileName
     * @return {?} AsyncSubject
     */
    function (fileName) {
        var _this = this;
        if (fileName === void 0) { fileName = "ngx-scanner-qrcode-" + Date.now() + ".png"; }
        /** @type {?} */
        var as = new AsyncSubject();
        /** @type {?} */
        var run = (/**
         * @return {?}
         */
        function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var blob, file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, CANVAS_TO_BLOB(this.canvas.nativeElement)];
                    case 1:
                        blob = _a.sent();
                        file = BLOB_TO_FILE(blob, fileName);
                        FILES_TO_SCAN([file], this.config, as).subscribe((/**
                         * @param {?} res
                         * @return {?}
                         */
                        function (res) {
                            res.forEach((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                /** @type {?} */
                                var link = document.createElement('a');
                                link.href = item.url;
                                link.download = item.name;
                                link.click();
                                link.remove();
                            }));
                        }));
                        return [2 /*return*/];
                }
            });
        }); });
        run();
        return as;
    };
    /**
     * window: resize
     * Draw again!
     */
    /**
     * window: resize
     * Draw again!
     * @private
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.resize = /**
     * window: resize
     * Draw again!
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        window.addEventListener("resize", (/**
         * @return {?}
         */
        function () {
            if (_this.dataForResize && _this.dataForResize.length) {
                DRAW_RESULT_APPEND_CHILD((/** @type {?} */ (_this.dataForResize)), _this.canvas.nativeElement, _this.resultsPanel.nativeElement);
            }
        }));
    };
    /**
     * Override config
     * @return void
     */
    /**
     * Override config
     * @private
     * @return {?} void
     */
    NgxScannerQrcodeComponent.prototype.overrideConfig = /**
     * Override config
     * @private
     * @return {?} void
     */
    function () {
        if (HAS_OWN_PROPERTY(this.config, 'src'))
            this.src = this.config.src;
        if (HAS_OWN_PROPERTY(this.config, 'fps'))
            this.fps = this.config.fps;
        if (HAS_OWN_PROPERTY(this.config, 'vibrate'))
            this.vibrate = this.config.vibrate;
        if (HAS_OWN_PROPERTY(this.config, 'decode'))
            this.decode = this.config.decode;
        if (HAS_OWN_PROPERTY(this.config, 'isBeep'))
            this.isBeep = this.config.isBeep;
        if (HAS_OWN_PROPERTY(this.config, 'deviceActive'))
            this.deviceActive = this.config.deviceActive;
        if (HAS_OWN_PROPERTY(this.config, 'constraints'))
            this.constraints = OVERRIDES('constraints', this.config, MEDIA_STREAM_DEFAULT);
    };
    /**
     * loadAllDevices
     */
    /**
     * loadAllDevices
     * @private
     * @param {?} as
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.loadAllDevices = /**
     * loadAllDevices
     * @private
     * @param {?} as
     * @return {?}
     */
    function (as) {
        var _this = this;
        navigator.mediaDevices.enumerateDevices().then((/**
         * @param {?} devices
         * @return {?}
         */
        function (devices) {
            /** @type {?} */
            var cameraDevices = [];
            devices.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.kind == 'videoinput' && cameraDevices.push(f); }));
            _this.devices.next(cameraDevices);
            if (cameraDevices.length > 0) {
                /** @type {?} */
                var index = Math.max(0, (cameraDevices.length > _this.deviceActive ? _this.deviceActive : 0));
                _this.playDevice(cameraDevices[index].deviceId, as);
            }
            else {
                AS_COMPLETE(as, false, (/** @type {?} */ ('No camera detected.')));
            }
        }));
    };
    /**
     * drawImage
     * @param element
     * @param callback
     */
    /**
     * drawImage
     * @private
     * @param {?} element
     * @param {?=} callback
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.drawImage = /**
     * drawImage
     * @private
     * @param {?} element
     * @param {?=} callback
     * @return {?}
     */
    function (element, callback) {
        if (callback === void 0) { callback = (/**
         * @return {?}
         */
        function () { }); }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var canvas, ctx, imageData, code, EMIT_DATA;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Get the canvas element by using the getElementById method.
                        canvas = this.canvas.nativeElement;
                        // Get a 2D drawing context for the canvas.
                        ctx = (/** @type {?} */ (canvas.getContext('2d', { willReadFrequently: true })));
                        // HTMLImageElement size
                        if (element instanceof HTMLImageElement) {
                            canvas.width = element.naturalWidth;
                            canvas.height = element.naturalHeight;
                            element.style.visibility = '';
                            this.video.nativeElement.style.visibility = 'hidden';
                            this.video.nativeElement.style.height = canvas.offsetHeight + 'px';
                        }
                        // HTMLVideoElement size
                        if (element instanceof HTMLVideoElement) {
                            canvas.width = element.videoWidth;
                            canvas.height = element.videoHeight;
                            element.style.visibility = '';
                            this.canvas.nativeElement.style.visibility = 'hidden';
                        }
                        ctx.clearRect(0, 0, canvas.width, canvas.height);
                        // Draw image
                        ctx.drawImage(element, 0, 0, canvas.width, canvas.height);
                        // Data image
                        imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                        // Draw frame
                        return [4 /*yield*/, zbarWasm.scanImageData(imageData)];
                    case 1:
                        code = _a.sent();
                        if (code && code.length) {
                            // Decode
                            code.forEach((/**
                             * @param {?} s
                             * @return {?}
                             */
                            function (s) { return s.value = s.decode(_this.decode && _this.decode.toLocaleLowerCase()); }));
                            // Overlay
                            DRAW_RESULT_APPEND_CHILD(code, Object.freeze(this.canvas.nativeElement), this.resultsPanel.nativeElement);
                            // To blob and emit data
                            EMIT_DATA = (/**
                             * @return {?}
                             */
                            function () {
                                _this.eventEmit(code);
                                _this.dataForResize = code;
                            });
                            // HTMLImageElement
                            if (element instanceof HTMLImageElement) {
                                callback(true);
                                EMIT_DATA();
                                VIBRATE(this.vibrate);
                                PLAY_AUDIO(this.isBeep);
                            }
                            // HTMLVideoElement
                            if (element instanceof HTMLVideoElement) {
                                EMIT_DATA();
                                VIBRATE(this.vibrate);
                                PLAY_AUDIO(this.isBeep);
                            }
                        }
                        else {
                            callback(false);
                            this.removeCanvas();
                            this.dataForResize = code;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * removeCanvas
     */
    /**
     * removeCanvas
     * @private
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.removeCanvas = /**
     * removeCanvas
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        Object.assign([], this.resultsPanel.nativeElement.childNodes).forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return _this.resultsPanel.nativeElement.removeChild(el); }));
    };
    /**
     * status
     * @param isStart
     * @param isLoading
     */
    /**
     * status
     * @private
     * @param {?} isStart
     * @param {?} isLoading
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.status = /**
     * status
     * @private
     * @param {?} isStart
     * @param {?} isLoading
     * @return {?}
     */
    function (isStart, isLoading) {
        this.isStart = isStart;
        this.isLoading = isLoading;
    };
    /**
     * eventEmit
     * @param response
     */
    /**
     * eventEmit
     * @private
     * @param {?=} response
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.eventEmit = /**
     * eventEmit
     * @private
     * @param {?=} response
     * @return {?}
     */
    function (response) {
        if (response === void 0) { response = false; }
        (response !== false) && this.data.next(response || { data: null });
        (response !== false) && this.event.emit(response || { data: null });
    };
    /**
     * Single-thread
     * Loop Recording on Camera
     * Must be destroy request
     * Not using: requestAnimationFrame
     */
    /**
     * Single-thread
     * Loop Recording on Camera
     * Must be destroy request
     * Not using: requestAnimationFrame
     * @private
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.requestAnimationFrame = /**
     * Single-thread
     * Loop Recording on Camera
     * Must be destroy request
     * Not using: requestAnimationFrame
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.rAF_ID = setInterval((/**
         * @return {?}
         */
        function () {
            if (_this.video.nativeElement.readyState === _this.video.nativeElement.HAVE_ENOUGH_DATA) {
                _this.drawImage(_this.video.nativeElement);
            }
        }), this.fps);
    };
    Object.defineProperty(NgxScannerQrcodeComponent.prototype, "isPause", {
        /**
         * Status of camera
         * @return boolean
         */
        get: /**
         * Status of camera
         * @return {?} boolean
         */
        function () {
            return this.isStart && this.video.nativeElement.paused;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.pause();
    };
    NgxScannerQrcodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-scanner-qrcode',
                    template: "<div #resultsPanel class=\"origin-overlay\"></div><canvas #canvas class=\"origin-canvas\"></canvas><video #video playsinline class=\"origin-video\"></video>",
                    host: { 'class': 'ngx-scanner-qrcode' },
                    exportAs: 'scanner',
                    inputs: ['src', 'fps', 'vibrate', 'decode', 'isBeep', 'deviceActive', 'config', 'constraints'],
                    outputs: ['event'],
                    queries: {
                        video: new ViewChild('video'),
                        canvas: new ViewChild('canvas'),
                        resultsPanel: new ViewChild('resultsPanel')
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".ngx-scanner-qrcode{display:block;position:relative}.origin-overlay{width:100%;position:absolute}.origin-overlay span{z-index:2;color:red;text-align:left;position:absolute}.origin-overlay .qrcode-polygon{z-index:1;position:absolute}.origin-canvas{width:100%;position:absolute}.origin-video{width:100%;background-color:#262626}.qrcode-tooltip{z-index:3;position:absolute}.qrcode-tooltip:hover .qrcode-tooltip-temp{display:block;position:absolute}.qrcode-tooltip-temp{bottom:0;left:50%;padding:5px;color:#fff;text-align:left;display:none;max-width:450px;border-radius:5px;width:-moz-max-content;width:max-content;word-wrap:break-word;transform:translate(-50%);transform-style:preserve-3d;background-color:#000000d0;box-shadow:1px 1px 20px #000000e0}"]
                }] }
    ];
    return NgxScannerQrcodeComponent;
}());
export { NgxScannerQrcodeComponent };
if (false) {
    /**
     * Element
     * playsinline required to tell iOS safari we don't want fullscreen
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.video;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.canvas;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.resultsPanel;
    /**
     * EventEmitter
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.event;
    /**
     * Input
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.src;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.fps;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.vibrate;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.decode;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isBeep;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.deviceActive;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.config;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.constraints;
    /**
     * Export
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.isStart;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isLoading;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isTorch;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.data;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.devices;
    /**
     * Private
     * @type {?}
     * @private
     */
    NgxScannerQrcodeComponent.prototype.rAF_ID;
    /**
     * @type {?}
     * @private
     */
    NgxScannerQrcodeComponent.prototype.dataForResize;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,