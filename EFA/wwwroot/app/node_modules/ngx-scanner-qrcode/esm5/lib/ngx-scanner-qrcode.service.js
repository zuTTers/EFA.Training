/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AsyncSubject } from 'rxjs';
import { AS_COMPLETE, FILES_TO_SCAN } from './ngx-scanner-qrcode.helper';
import * as i0 from "@angular/core";
var NgxScannerQrcodeService = /** @class */ (function () {
    function NgxScannerQrcodeService() {
    }
    /**
     * Load files
     * @param files
     * @return AsyncSubject
     */
    /**
     * Load files
     * @param {?=} files
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeService.prototype.loadFiles = /**
     * Load files
     * @param {?=} files
     * @return {?} AsyncSubject
     */
    function (files) {
        var _this = this;
        if (files === void 0) { files = []; }
        /** @type {?} */
        var as = new AsyncSubject();
        Promise.all(Object.assign([], files).map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return _this.readAsDataURL(m); }))).then((/**
         * @param {?} img
         * @return {?}
         */
        function (img) { return AS_COMPLETE(as, img); })).catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return AS_COMPLETE(as, null, error); }));
        return as;
    };
    /**
     * loadFilesToScan
     * @param files
     * @param config
     * @returns
     */
    /**
     * loadFilesToScan
     * @param {?=} files
     * @param {?=} config
     * @return {?}
     */
    NgxScannerQrcodeService.prototype.loadFilesToScan = /**
     * loadFilesToScan
     * @param {?=} files
     * @param {?=} config
     * @return {?}
     */
    function (files, config) {
        if (files === void 0) { files = []; }
        return FILES_TO_SCAN(files, config);
    };
    /**
     * readAsDataURL
     * @param file
     * @return Promise
     */
    /**
     * readAsDataURL
     * @private
     * @param {?} file
     * @return {?} Promise
     */
    NgxScannerQrcodeService.prototype.readAsDataURL = /**
     * readAsDataURL
     * @private
     * @param {?} file
     * @return {?} Promise
     */
    function (file) {
        /** drawImage **/
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var fileReader = new FileReader();
            fileReader.onload = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var objectFile = {
                    name: file.name,
                    file: file,
                    url: URL.createObjectURL(file)
                };
                resolve(objectFile);
            });
            fileReader.onerror = (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); });
            fileReader.readAsDataURL(file);
        }));
    };
    NgxScannerQrcodeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ NgxScannerQrcodeService.ngInjectableDef = i0.defineInjectable({ factory: function NgxScannerQrcodeService_Factory() { return new NgxScannerQrcodeService(); }, token: NgxScannerQrcodeService, providedIn: "root" });
    return NgxScannerQrcodeService;
}());
export { NgxScannerQrcodeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNjYW5uZXItcXJjb2RlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nhbm5lci1xcmNvZGUvIiwic291cmNlcyI6WyJsaWIvbmd4LXNjYW5uZXItcXJjb2RlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUd6RTtJQUFBO0tBK0NDO0lBMUNDOzs7O09BSUc7Ozs7OztJQUNJLDJDQUFTOzs7OztJQUFoQixVQUFpQixLQUFrQjtRQUFuQyxpQkFJQztRQUpnQixzQkFBQSxFQUFBLFVBQWtCOztZQUMzQixFQUFFLEdBQUcsSUFBSSxZQUFZLEVBQWdDO1FBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRzs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBckIsQ0FBcUIsRUFBQyxDQUFDLENBQUMsSUFBSTs7OztRQUFDLFVBQUMsR0FBaUMsSUFBSyxPQUFBLFdBQVcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQXBCLENBQW9CLEVBQUMsQ0FBQyxLQUFLOzs7O1FBQUMsVUFBQyxLQUFVLElBQUssT0FBQSxXQUFXLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsRUFBNUIsQ0FBNEIsRUFBQyxDQUFDO1FBQzVMLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0ksaURBQWU7Ozs7OztJQUF0QixVQUF1QixLQUFrQixFQUFFLE1BQTJCO1FBQS9DLHNCQUFBLEVBQUEsVUFBa0I7UUFDdkMsT0FBTyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0ssK0NBQWE7Ozs7OztJQUFyQixVQUFzQixJQUFVO1FBQzlCLGlCQUFpQjtRQUNqQixPQUFPLElBQUksT0FBTzs7Ozs7UUFBQyxVQUFDLE9BQU8sRUFBRSxNQUFNOztnQkFDM0IsVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFO1lBQ25DLFVBQVUsQ0FBQyxNQUFNOzs7WUFBRzs7b0JBQ1osVUFBVSxHQUFHO29CQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsSUFBSSxFQUFFLElBQUk7b0JBQ1YsR0FBRyxFQUFFLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO2lCQUMvQjtnQkFDRCxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFBLENBQUE7WUFDRCxVQUFVLENBQUMsT0FBTzs7OztZQUFHLFVBQUMsS0FBVSxJQUFLLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFiLENBQWEsQ0FBQSxDQUFDO1lBQ25ELFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsQ0FBQyxFQUFDLENBQUE7SUFDSixDQUFDOztnQkE5Q0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7O2tDQVBEO0NBb0RDLEFBL0NELElBK0NDO1NBNUNZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXN5bmNTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEFTX0NPTVBMRVRFLCBGSUxFU19UT19TQ0FOIH0gZnJvbSAnLi9uZ3gtc2Nhbm5lci1xcmNvZGUuaGVscGVyJztcclxuaW1wb3J0IHsgU2Nhbm5lclFSQ29kZUNvbmZpZywgU2Nhbm5lclFSQ29kZVNlbGVjdGVkRmlsZXMgfSBmcm9tICcuL25neC1zY2FubmVyLXFyY29kZS5vcHRpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFNjYW5uZXJRcmNvZGVTZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogTG9hZCBmaWxlc1xyXG4gICAqIEBwYXJhbSBmaWxlcyBcclxuICAgKiBAcmV0dXJuIEFzeW5jU3ViamVjdFxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkRmlsZXMoZmlsZXM6IEZpbGVbXSA9IFtdKTogQXN5bmNTdWJqZWN0PFNjYW5uZXJRUkNvZGVTZWxlY3RlZEZpbGVzW10+IHtcclxuICAgIGNvbnN0IGFzID0gbmV3IEFzeW5jU3ViamVjdDxTY2FubmVyUVJDb2RlU2VsZWN0ZWRGaWxlc1tdPigpO1xyXG4gICAgUHJvbWlzZS5hbGwoT2JqZWN0LmFzc2lnbihbXSwgZmlsZXMpLm1hcChtID0+IHRoaXMucmVhZEFzRGF0YVVSTChtKSkpLnRoZW4oKGltZzogU2Nhbm5lclFSQ29kZVNlbGVjdGVkRmlsZXNbXSkgPT4gQVNfQ09NUExFVEUoYXMsIGltZykpLmNhdGNoKChlcnJvcjogYW55KSA9PiBBU19DT01QTEVURShhcywgbnVsbCwgZXJyb3IpKTtcclxuICAgIHJldHVybiBhcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGxvYWRGaWxlc1RvU2NhblxyXG4gICAqIEBwYXJhbSBmaWxlcyBcclxuICAgKiBAcGFyYW0gY29uZmlnIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkRmlsZXNUb1NjYW4oZmlsZXM6IEZpbGVbXSA9IFtdLCBjb25maWc6IFNjYW5uZXJRUkNvZGVDb25maWcpOiBBc3luY1N1YmplY3Q8U2Nhbm5lclFSQ29kZVNlbGVjdGVkRmlsZXNbXT4ge1xyXG4gICAgcmV0dXJuIEZJTEVTX1RPX1NDQU4oZmlsZXMsIGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiByZWFkQXNEYXRhVVJMXHJcbiAgICogQHBhcmFtIGZpbGUgXHJcbiAgICogQHJldHVybiBQcm9taXNlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZWFkQXNEYXRhVVJMKGZpbGU6IEZpbGUpOiBQcm9taXNlPFNjYW5uZXJRUkNvZGVTZWxlY3RlZEZpbGVzPiB7XHJcbiAgICAvKiogZHJhd0ltYWdlICoqL1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9iamVjdEZpbGUgPSB7XHJcbiAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXHJcbiAgICAgICAgICBmaWxlOiBmaWxlLFxyXG4gICAgICAgICAgdXJsOiBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXNvbHZlKG9iamVjdEZpbGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGZpbGVSZWFkZXIub25lcnJvciA9IChlcnJvcjogYW55KSA9PiByZWplY3QoZXJyb3IpO1xyXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICB9KVxyXG4gIH1cclxufSJdfQ==